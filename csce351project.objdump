
csce351project.elf:     file format elf32-littlenios2
csce351project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000dc2c memsz 0x0000dc2c flags r-x
    LOAD off    0x0000ec4c vaddr 0x0000dc4c paddr 0x0000f6a8 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00011104 vaddr 0x00011104 paddr 0x00011104 align 2**12
         filesz 0x00000000 memsz 0x00000340 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d55c  000001d4  000001d4  000011d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000051c  0000d730  0000d730  0000e730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000dc4c  0000f6a8  0000ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000340  00011104  00011104  00011104  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000106a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  000106d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001647  00000000  00000000  00011468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025ed1  00000000  00000000  00012aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000083ef  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014e51  00000000  00000000  00040d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c50  00000000  00000000  00055bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000023bf  00000000  00000000  00057810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c5f4  00000000  00000000  00059bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000661c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000661d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069ff5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00069ff8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00069ffb  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00069ffc  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006a000  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006a004  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0006a008  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006a011  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006a01a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0006a023  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000024  00000000  00000000  0006a02e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  0006a052  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d4 l    d  .text	00000000 .text
0000d730 l    d  .rodata	00000000 .rodata
0000dc4c l    d  .rwdata	00000000 .rwdata
00011104 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000020c l       .text	00000000 alt_after_alt_main
000000b8 l       .exceptions	00000000 jump_here
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00011150 l     O .bss	00000018 alarm
00000000 l    df *ABS*	00000000 mysem.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 thread_handler.c
00011110 l     O .bss	00000004 current_running_thread
00011114 l     O .bss	00000004 runQueue
00011118 l     O .bss	00000004 main_stack_pointer
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000dc4c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001868 l     F .text	00000058 __sprint_r
0000d986 l     O .rodata	00000010 blanks.3452
0000d976 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000038e4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00003a98 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000054c0 l     F .text	00000058 std
000055cc l     F .text	00000008 __fp_lock
000055d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f67c l     O .rwdata	00000004 charset
0000d9b8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000db00 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009508 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a634 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b0c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b124 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b150 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b288 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b3ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b48c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b5ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b81c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f698 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000bc78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e608 l     O .rwdata	00001060 JTAG_UART
0000bd68 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bfa8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c1d0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c84c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ca1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ce2c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000cf7c l     F .text	000000f8 alt_file_locked
0000d200 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000016ac g     F .text	0000001c putchar
00000528 g     F .text	0000011c customer
00006b70 g     F .text	00000094 _mprec_log10
00006c5c g     F .text	00000088 __any_on
000086dc g     F .text	00000070 _isatty_r
0000dad8 g     O .rodata	00000028 __mprec_tinytens
0000b64c g     F .text	0000006c alt_main
000016d0 g     F .text	000000a0 _puts_r
000111b4 g     O .bss	00000100 alt_irq
0000874c g     F .text	00000078 _lseek_r
00000874 g     F .text	00000058 Queue
0000f6a8 g       *ABS*	00000000 __flash_rwdata_start
0000a028 g     F .text	00000088 __eqdf2
00011444 g       *ABS*	00000000 __alt_heap_start
000003a0 g     F .text	000000ac semDown
00001634 g     F .text	00000044 printf
000004d8 g     F .text	00000028 semValue
00008048 g     F .text	00000068 __sseek
00005528 g     F .text	000000a4 __sinit
00008248 g     F .text	00000130 __swbuf_r
00006234 g     F .text	00000084 _setlocale_r
00005628 g     F .text	0000009c __sfmoreglue
0000b6d8 g     F .text	00000020 __malloc_unlock
000065ec g     F .text	000000e0 memmove
00005618 g     F .text	00000010 _cleanup
00006ce4 g     F .text	000000bc _Balloc
0000a138 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000a50 g     F .text	00000020 get_current_running_thread
00008668 g     F .text	00000074 _fstat_r
00011128 g     O .bss	00000004 errno
0001113c g     O .bss	00000004 alt_argv
00017668 g       *ABS*	00000000 _gp
00000ac8 g     F .text	0000015c mythread_create
0000e488 g     O .rwdata	00000180 alt_fd_list
000016c8 g     F .text	00000008 _putchar_r
0000d280 g     F .text	00000094 alt_find_dev
0000654c g     F .text	000000a0 memcpy
00000a70 g     F .text	00000038 run_queue_init
0000560c g     F .text	0000000c _cleanup_r
0000a2d0 g     F .text	000000f8 __floatsidf
0000cf04 g     F .text	00000078 alt_io_redirect
0000a248 g     F .text	00000088 __ltdf2
0000d730 g       *ABS*	00000000 __DTOR_END__
00001770 g     F .text	00000014 puts
0000d260 g     F .text	00000020 altera_nios2_irq_init
00006ac0 g     F .text	000000b0 __ratio
0000c3e8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000ee0 g     F .text	00000014 malloc
00001678 g     F .text	00000034 _printf_r
0000a770 g     F .text	00000008 __udivsi3
0000b2e8 g     F .text	000000c4 isatty
0000d9e8 g     O .rodata	000000c8 __mprec_tens
00006210 g     F .text	00000008 __locale_charset
0001111c g     O .bss	00000004 __malloc_top_pad
0000f678 g     O .rwdata	00000004 __mb_cur_max
00006218 g     F .text	0000000c _localeconv_r
00007448 g     F .text	0000003c __i2b
00005bf4 g     F .text	0000049c __sfvwrite_r
00001784 g     F .text	00000070 _sbrk_r
000087c4 g     F .text	00000078 _read_r
0000e454 g     O .rwdata	0000000c __lc_ctype
0000f690 g     O .rwdata	00000004 alt_max_fd
0000ac70 g     F .text	00000138 __unpack_d
00008544 g     F .text	00000110 _fclose_r
0000548c g     F .text	00000034 fflush
00011120 g     O .bss	00000004 __malloc_max_sbrked_mem
00009998 g     F .text	00000074 __adddf3
000069a0 g     F .text	00000120 __b2d
00008ea8 g     F .text	00000660 __umoddi3
0000b4f8 g     F .text	000000f4 lseek
0000f66c g     O .rwdata	00000004 _global_impure_ptr
000079dc g     F .text	000005f4 _realloc_r
00011444 g       *ABS*	00000000 __bss_end
0000cd34 g     F .text	000000f8 alt_iic_isr_register
0000ba48 g     F .text	0000010c alt_tick
0000883c g     F .text	0000066c __udivdi3
0000dab0 g     O .rodata	00000028 __mprec_bigtens
000076d0 g     F .text	00000120 __s2b
0000a4a0 g     F .text	00000194 __floatunsidf
000068c0 g     F .text	00000060 __mcmp
000055f4 g     F .text	00000018 __fp_lock_all
0000ccec g     F .text	00000048 alt_ic_irq_enabled
0000b9b0 g     F .text	00000098 alt_alarm_stop
0001114c g     O .bss	00000004 alt_irq_active
00000234 g     F .text	00000020 reset_alarmflag
0000010c g     F .exceptions	000000c8 alt_irq_handler
0000e460 g     O .rwdata	00000028 alt_dev_null
0000c94c g     F .text	0000001c alt_dcache_flush_all
0000678c g     F .text	00000070 __hi0bits
00000a28 g     F .text	00000028 getQsize
0000a3c8 g     F .text	000000d8 __fixdfsi
0000f6a8 g       *ABS*	00000000 __ram_rwdata_end
0000f688 g     O .rwdata	00000008 alt_dev_list
0000bb54 g     F .text	00000124 write
000078f4 g     F .text	000000e8 _putc_r
0000dc4c g       *ABS*	00000000 __ram_rodata_end
0000b1b0 g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000075b0 g     F .text	00000120 __pow5mult
0001112c g     O .bss	00000004 __nlocale_changed
0000a778 g     F .text	00000008 __umodsi3
00011190 g     O .bss	0000000c mutex
00011444 g       *ABS*	00000000 end
00000500 g     F .text	00000028 semThreadCount
0001119c g     O .bss	0000000c stylistAvailable
0000bee8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000044c g     F .text	0000008c semUp
0000d72c g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c8bc g     F .text	00000090 alt_avalon_timer_sc_init
0000a8dc g     F .text	00000080 __clzsi2
0000c60c g     F .text	00000240 altera_avalon_jtag_uart_write
00005518 g     F .text	00000004 __sfp_lock_acquire
00006468 g     F .text	000000e4 memchr
000018c0 g     F .text	00001ec4 ___vfprintf_internal_r
000058e0 g     F .text	00000314 _free_r
000038e8 g     F .text	000001b0 __call_exitprocs
00011130 g     O .bss	00000004 __mlocale_changed
0000f674 g     O .rwdata	00000004 __malloc_sbrk_base
000001d4 g     F .text	0000003c _start
00011144 g     O .bss	00000004 _alt_tick_rate
00000644 g     F .text	000000ec stylist
00011108 g     O .bss	00000004 waiting
000070a8 g     F .text	0000014c __lshift
00011148 g     O .bss	00000004 _alt_nticks
0000b6f8 g     F .text	00000124 read
0000bd0c g     F .text	0000005c alt_sys_init
0000d58c g     F .text	00000134 __register_exitproc
00000cdc g     F .text	000000f8 mythread_schedule
000071f4 g     F .text	00000254 __multiply
0000c280 g     F .text	00000074 altera_avalon_jtag_uart_close
0000a780 g     F .text	00000038 __mulsi3
0000dc4c g       *ABS*	00000000 __ram_rwdata_start
0000d730 g       *ABS*	00000000 __ram_rodata_start
00011168 g     O .bss	00000028 __malloc_current_mallinfo
00006da0 g     F .text	0000017c __d2b
0000bda0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d434 g     F .text	000000d0 alt_get_fd
0000ada8 g     F .text	000000c8 __fpcmp_parts_d
000084d4 g     F .text	00000070 _close_r
0000d518 g     F .text	00000074 memcmp
0000be50 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00011444 g       *ABS*	00000000 __alt_stack_base
0000be98 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000037a8 g     F .text	0000013c __swsetup_r
00009dd0 g     F .text	00000258 __divdf3
000056c4 g     F .text	000000f0 __sfp
00006c04 g     F .text	00000058 __copybits
0000e04c g     O .rwdata	00000408 __malloc_av_
00005524 g     F .text	00000004 __sinit_lock_release
00009a0c g     F .text	000003c4 __muldf3
00000254 g     F .text	00000058 myinterrupt_handler
0001110c g     O .bss	00000004 haircut
0000812c g     F .text	00000060 __sread
0000d314 g     F .text	00000120 alt_find_file
0000c968 g     F .text	000000b4 alt_dev_llist_insert
0000b6b8 g     F .text	00000020 __malloc_lock
0000b8f4 g     F .text	000000bc sbrk
00005290 g     F .text	000001fc _fflush_r
0000840c g     F .text	000000c8 _calloc_r
00000e28 g     F .text	0000006c mythread_cleanup
00011104 g       *ABS*	00000000 __bss_start
000066cc g     F .text	00000098 memset
00000848 g     F .text	0000002c main
00011140 g     O .bss	00000004 alt_envp
00011124 g     O .bss	00000004 __malloc_max_total_mem
0000bdf8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00008378 g     F .text	0000001c __swbuf
00008040 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008654 g     F .text	00000014 fclose
000112b4 g     O .bss	00000190 _atexit0
00003cdc g     F .text	000015b4 _dtoa_r
00000ef4 g     F .text	00000740 _malloc_r
0000f694 g     O .rwdata	00000004 alt_errno
00006158 g     F .text	000000b8 _fwalk
000077f0 g     F .text	00000104 putc
0000a6b0 g     F .text	00000060 __divsi3
0000db0c g     O .rodata	00000014 __thenan_df
000057b4 g     F .text	0000012c _malloc_trim_r
0000d730 g       *ABS*	00000000 __CTOR_END__
00000dd4 g     F .text	00000054 mythread_isQempty
0000818c g     F .text	000000bc strcmp
0000d730 g       *ABS*	00000000 __flash_rodata_start
0000d730 g       *ABS*	00000000 __DTOR_LIST__
0000a0b0 g     F .text	00000088 __nedf2
0000bcd8 g     F .text	00000034 alt_irq_init
00000c84 g     F .text	0000002c mythread_block
0000b87c g     F .text	00000078 alt_release_fd
0000db20 g     O .rodata	00000100 __clz_tab
00011134 g     O .bss	00000004 _PathLocale
0000d504 g     F .text	00000014 atexit
00008394 g     F .text	00000078 _write_r
000062b8 g     F .text	0000001c setlocale
0000f668 g     O .rwdata	00000004 _impure_ptr
00011138 g     O .bss	00000004 alt_argc
0000cae0 g     F .text	00000064 _do_dtors
00000300 g     F .text	000000a0 semInit
00000020 g       .exceptions	00000000 alt_irq_entry
00006920 g     F .text	00000080 __ulp
00007fd0 g     F .text	00000040 __isinfd
000055dc g     F .text	00000018 __fp_unlock_all
0000f680 g     O .rwdata	00000008 alt_fs_list
000008cc g     F .text	000000bc enqueue
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006224 g     F .text	00000010 localeconv
000002ac g     F .text	00000054 start_alarm_succeed
00000cb0 g     F .text	0000002c mythread_terminate
0000cb60 g     F .text	00000050 alt_ic_isr_register
00000988 g     F .text	000000a0 dequeue
0000f6a8 g       *ABS*	00000000 _edata
00011444 g       *ABS*	00000000 _end
000001d4 g       *ABS*	00000000 __ram_exceptions_end
0000c2f4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000cc4c g     F .text	000000a0 alt_ic_irq_disable
000080b0 g     F .text	0000007c __swrite
0000f670 g     O .rwdata	00000004 __malloc_trim_threshold
00000e94 g     F .text	00000038 exit
00006090 g     F .text	000000c8 _fwalk_reent
00006f1c g     F .text	0000018c __mdiff
0000a710 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000aa8 g     F .text	00000020 get_running_queue
0000551c g     F .text	00000004 __sfp_lock_release
00008010 g     F .text	00000030 __isnand
0000b190 g     F .text	00000020 _exit
0000ae70 g     F .text	00000154 alt_alarm_start
0000a7b8 g     F .text	00000124 __muldi3
000062d4 g     F .text	00000194 __smakebuf_r
000017f4 g     F .text	00000074 strlen
0000d074 g     F .text	0000018c open
000111a8 g     O .bss	0000000c customerAvailable
0000a1c0 g     F .text	00000088 __gedf2
00000c24 g     F .text	0000002c mythread_start
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000cb44 g     F .text	0000001c alt_icache_flush_all
0000f6a4 g     O .rwdata	00000004 alt_priority_mask
0000cbb0 g     F .text	0000009c alt_ic_irq_enable
00003784 g     F .text	00000024 __vfprintf_internal
00009918 g     F .text	00000080 __subdf3
000067fc g     F .text	000000c4 __lo0bits
0000f69c g     O .rwdata	00000008 alt_alarm_list
0000ca7c g     F .text	00000064 _do_ctors
00011104 g     O .bss	00000004 alarmflag
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000afc4 g     F .text	00000100 close
00000730 g     F .text	00000118 os_primitive
0000b40c g     F .text	00000080 alt_load
0000a95c g     F .text	00000314 __pack_d
00000210 g     F .text	00000024 is_alarmflag_set
00000ecc g     F .text	00000014 free
00005520 g     F .text	00000004 __sinit_lock_acquire
00007484 g     F .text	0000012c __multadd
00006764 g     F .text	00000028 _Bfree
00000c50 g     F .text	00000034 mythread_join



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407514 	ori	at,at,468
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	000010c0 	call	10c <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
 		then "alarmflag" is reset and "mythread_scheduler" is called.
	Otherwise, exit.
*/

.section .exceptions.exit.user, "xa"  	/* assembler directive to place code in the corresponding section */
call is_alarmflag_set					/* check the alarmflag */
  98:	00002100 	call	210 <is_alarmflag_set>
beq  r2, r0, jump_here				   	/* if alarmflag has been set, then do (1) and (2); else, goto exit_here*/
  9c:	10000626 	beq	r2,zero,b8 <jump_here>
call reset_alarmflag					/* (1) reset alarmflag */
  a0:	00002340 	call	234 <reset_alarmflag>
mov  r4, sp								/* pass the current stack pointer to mythread_scheduler */
  a4:	d809883a 	mov	r4,sp
call mythread_schedule					/* (2) call mythread_scheduler to save the current stack pointer and return the next stack pointer */
  a8:	0000cdc0 	call	cdc <mythread_schedule>
stw  fp, -4(sp)							/* save the current frame pointer on top of the current stack */
  ac:	df3fff15 	stw	fp,-4(sp)
mov  sp, r2								/* load the next/new stack pointer */
  b0:	1037883a 	mov	sp,r2
ldw  fp, -4(sp)							/* load the next/new frame pointer */
  b4:	df3fff17 	ldw	fp,-4(sp)

000000b8 <jump_here>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  bc:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  c0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  cc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  dc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  ec:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  f0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  fc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 104:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 108:	ef80083a 	eret

0000010c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10c:	defff904 	addi	sp,sp,-28
 110:	dfc00615 	stw	ra,24(sp)
 114:	df000515 	stw	fp,20(sp)
 118:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffc15 	stw	r2,-16(fp)

  return active;
 124:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0ffff17 	ldw	r3,-4(fp)
 13c:	e0bffe17 	ldw	r2,-8(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	1005003a 	cmpeq	r2,r2,zero
 148:	1000161e 	bne	r2,zero,1a4 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	00c00074 	movhi	r3,1
 154:	18c46d04 	addi	r3,r3,4532
 158:	100490fa 	slli	r2,r2,3
 15c:	10c5883a 	add	r2,r2,r3
 160:	11400017 	ldw	r5,0(r2)
 164:	e0bffd17 	ldw	r2,-12(fp)
 168:	00c00074 	movhi	r3,1
 16c:	18c46d04 	addi	r3,r3,4532
 170:	100490fa 	slli	r2,r2,3
 174:	10c5883a 	add	r2,r2,r3
 178:	10800104 	addi	r2,r2,4
 17c:	11000017 	ldw	r4,0(r2)
 180:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 184:	0005313a 	rdctl	r2,ipending
 188:	e0bffb15 	stw	r2,-20(fp)

  return active;
 18c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 190:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 194:	e0bfff17 	ldw	r2,-4(fp)
 198:	1004c03a 	cmpne	r2,r2,zero
 19c:	103fe31e 	bne	r2,zero,12c <alt_irq_handler+0x20>
 1a0:	00000706 	br	1c0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a4:	e0bffe17 	ldw	r2,-8(fp)
 1a8:	1085883a 	add	r2,r2,r2
 1ac:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1b0:	e0bffd17 	ldw	r2,-12(fp)
 1b4:	10800044 	addi	r2,r2,1
 1b8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1bc:	003fde06 	br	138 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

Disassembly of section .text:

000001d4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1d8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1dc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1e0:	d69d9a14 	ori	gp,gp,30312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e8:	10844114 	ori	r2,r2,4356

    movhi r3, %hi(__bss_end)
     1ec:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1f0:	18c51114 	ori	r3,r3,5188

    beq r2, r3, 1f
     1f4:	10c00326 	beq	r2,r3,204 <_start+0x30>

0:
    stw zero, (r2)
     1f8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1fc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     200:	10fffd36 	bltu	r2,r3,1f8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     204:	000b40c0 	call	b40c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     208:	000b64c0 	call	b64c <alt_main>

0000020c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     20c:	003fff06 	br	20c <alt_after_alt_main>

00000210 <is_alarmflag_set>:
/* a global flag for the alarm interrupt */
unsigned int alarmflag = 0;

/* test if "alarmflag" is set */
unsigned int is_alarmflag_set()
{
     210:	deffff04 	addi	sp,sp,-4
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
    return alarmflag != 0;
     21c:	d0a6a717 	ldw	r2,-25956(gp)
     220:	1004c03a 	cmpne	r2,r2,zero
}
     224:	e037883a 	mov	sp,fp
     228:	df000017 	ldw	fp,0(sp)
     22c:	dec00104 	addi	sp,sp,4
     230:	f800283a 	ret

00000234 <reset_alarmflag>:

/* reset "alarmflag" */
void reset_alarmflag()
{
     234:	deffff04 	addi	sp,sp,-4
     238:	df000015 	stw	fp,0(sp)
     23c:	d839883a 	mov	fp,sp
    alarmflag = 0;
     240:	d026a715 	stw	zero,-25956(gp)
}
     244:	e037883a 	mov	sp,fp
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00104 	addi	sp,sp,4
     250:	f800283a 	ret

00000254 <myinterrupt_handler>:

/* the alarm interrupt handler */
alt_u32 myinterrupt_handler(void* context)
{
     254:	defffd04 	addi	sp,sp,-12
     258:	dfc00215 	stw	ra,8(sp)
     25c:	df000115 	stw	fp,4(sp)
     260:	df000104 	addi	fp,sp,4
     264:	e13fff15 	stw	r4,-4(fp)
    alarmflag = 1;
     268:	00800044 	movi	r2,1
     26c:	d0a6a715 	stw	r2,-25956(gp)
    if(mythread_isQempty())
     270:	0000dd40 	call	dd4 <mythread_isQempty>
     274:	1005003a 	cmpeq	r2,r2,zero
     278:	1000031e 	bne	r2,zero,288 <myinterrupt_handler+0x34>
    {
        printf("Interrupted by the DE2 timer!\n");
     27c:	01000074 	movhi	r4,1
     280:	2135cc04 	addi	r4,r4,-10448
     284:	00017700 	call	1770 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     288:	00800074 	movhi	r2,1
     28c:	10845104 	addi	r2,r2,4420
     290:	10800017 	ldw	r2,0(r2)
    }
    
    return alt_ticks_per_second()>>FACTOR;
     294:	1004d0fa 	srli	r2,r2,3
}
     298:	e037883a 	mov	sp,fp
     29c:	dfc00117 	ldw	ra,4(sp)
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00204 	addi	sp,sp,8
     2a8:	f800283a 	ret

000002ac <start_alarm_succeed>:

unsigned int start_alarm_succeed()
{
     2ac:	defffe04 	addi	sp,sp,-8
     2b0:	dfc00115 	stw	ra,4(sp)
     2b4:	df000015 	stw	fp,0(sp)
     2b8:	d839883a 	mov	fp,sp
     2bc:	00800074 	movhi	r2,1
     2c0:	10845104 	addi	r2,r2,4420
     2c4:	10800017 	ldw	r2,0(r2)
    return alt_alarm_start(&alarm, (alt_ticks_per_second()>>FACTOR), myinterrupt_handler, NULL) >= 0;
     2c8:	100ad0fa 	srli	r5,r2,3
     2cc:	01000074 	movhi	r4,1
     2d0:	21045404 	addi	r4,r4,4432
     2d4:	01800034 	movhi	r6,0
     2d8:	31809504 	addi	r6,r6,596
     2dc:	000f883a 	mov	r7,zero
     2e0:	000ae700 	call	ae70 <alt_alarm_start>
     2e4:	0084303a 	nor	r2,zero,r2
     2e8:	1004d7fa 	srli	r2,r2,31
}
     2ec:	e037883a 	mov	sp,fp
     2f0:	dfc00117 	ldw	ra,4(sp)
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00204 	addi	sp,sp,8
     2fc:	f800283a 	ret

00000300 <semInit>:
    asm("movi et, 1");          \
    asm("wrctl status, et");    \
}

int semInit(semaphore * sem, int semVal)
{
     300:	defffb04 	addi	sp,sp,-20
     304:	dfc00415 	stw	ra,16(sp)
     308:	df000315 	stw	fp,12(sp)
     30c:	df000304 	addi	fp,sp,12
     310:	e13ffd15 	stw	r4,-12(fp)
     314:	e17ffe15 	stw	r5,-8(fp)
	/* add your code to initialize your semaphore here */
	sem->value = semVal;
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	18800115 	stw	r2,4(r3)
	sem->threadCount = 0;
     324:	e0bffd17 	ldw	r2,-12(fp)
     328:	10000015 	stw	zero,0(r2)
	sem->blockingQueue = Queue(NULL, NULL, 0);
     32c:	0009883a 	mov	r4,zero
     330:	000b883a 	mov	r5,zero
     334:	000d883a 	mov	r6,zero
     338:	00008740 	call	874 <Queue>
     33c:	1007883a 	mov	r3,r2
     340:	e0bffd17 	ldw	r2,-12(fp)
     344:	10c00215 	stw	r3,8(r2)
	return (sem->value == semVal && sem->threadCount == 0 && sem->blockingQueue != NULL); //return 1 if all init succeeds
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10c00117 	ldw	r3,4(r2)
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	18800b1e 	bne	r3,r2,384 <semInit+0x84>
     358:	e0bffd17 	ldw	r2,-12(fp)
     35c:	10800017 	ldw	r2,0(r2)
     360:	1004c03a 	cmpne	r2,r2,zero
     364:	1000071e 	bne	r2,zero,384 <semInit+0x84>
     368:	e0bffd17 	ldw	r2,-12(fp)
     36c:	10800217 	ldw	r2,8(r2)
     370:	1005003a 	cmpeq	r2,r2,zero
     374:	1000031e 	bne	r2,zero,384 <semInit+0x84>
     378:	00800044 	movi	r2,1
     37c:	e0bfff15 	stw	r2,-4(fp)
     380:	00000106 	br	388 <semInit+0x88>
     384:	e03fff15 	stw	zero,-4(fp)
     388:	e0bfff17 	ldw	r2,-4(fp)
}
     38c:	e037883a 	mov	sp,fp
     390:	dfc00117 	ldw	ra,4(sp)
     394:	df000017 	ldw	fp,0(sp)
     398:	dec00204 	addi	sp,sp,8
     39c:	f800283a 	ret

000003a0 <semDown>:

void semDown(semaphore * sem)
{
     3a0:	defffd04 	addi	sp,sp,-12
     3a4:	dfc00215 	stw	ra,8(sp)
     3a8:	df000115 	stw	fp,4(sp)
     3ac:	df000104 	addi	fp,sp,4
     3b0:	e13fff15 	stw	r4,-4(fp)
	if(sem->value > 0) // block thread
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	10800117 	ldw	r2,4(r2)
     3bc:	10800050 	cmplti	r2,r2,1
     3c0:	1000151e 	bne	r2,zero,418 <semDown+0x78>
	{
		DISABLE_INTERRUPTS();
     3c4:	0001703a 	wrctl	status,zero
		sem->threadCount++;
     3c8:	e0bfff17 	ldw	r2,-4(fp)
     3cc:	10800017 	ldw	r2,0(r2)
     3d0:	10c00044 	addi	r3,r2,1
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10c00015 	stw	r3,0(r2)
		get_current_running_thread()->state = BLOCKED;
     3dc:	0000a500 	call	a50 <get_current_running_thread>
     3e0:	1007883a 	mov	r3,r2
     3e4:	008000c4 	movi	r2,3
     3e8:	18800415 	stw	r2,16(r3)
		enqueue(get_current_running_thread(), sem->blockingQueue);
     3ec:	0000a500 	call	a50 <get_current_running_thread>
     3f0:	1009883a 	mov	r4,r2
     3f4:	e0bfff17 	ldw	r2,-4(fp)
     3f8:	11400217 	ldw	r5,8(r2)
     3fc:	00008cc0 	call	8cc <enqueue>
		ENABLE_INTERRUPTS();
     400:	06000044 	movi	et,1
     404:	c001703a 	wrctl	status,et
		while(get_current_running_thread()->state == BLOCKED);
     408:	0000a500 	call	a50 <get_current_running_thread>
     40c:	10800417 	ldw	r2,16(r2)
     410:	108000e0 	cmpeqi	r2,r2,3
     414:	103ffc1e 	bne	r2,zero,408 <semDown+0x68>

	}
	DISABLE_INTERRUPTS();
     418:	0001703a 	wrctl	status,zero
	sem->value--;
     41c:	e0bfff17 	ldw	r2,-4(fp)
     420:	10800117 	ldw	r2,4(r2)
     424:	10ffffc4 	addi	r3,r2,-1
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10c00115 	stw	r3,4(r2)
	ENABLE_INTERRUPTS();
     430:	06000044 	movi	et,1
     434:	c001703a 	wrctl	status,et
}
     438:	e037883a 	mov	sp,fp
     43c:	dfc00117 	ldw	ra,4(sp)
     440:	df000017 	ldw	fp,0(sp)
     444:	dec00204 	addi	sp,sp,8
     448:	f800283a 	ret

0000044c <semUp>:

void semUp(semaphore * sem)
{	//we do this out here because it's a binary semaphore
     44c:	defffc04 	addi	sp,sp,-16
     450:	dfc00315 	stw	ra,12(sp)
     454:	df000215 	stw	fp,8(sp)
     458:	df000204 	addi	fp,sp,8
     45c:	e13fff15 	stw	r4,-4(fp)

	DISABLE_INTERRUPTS();
     460:	0001703a 	wrctl	status,zero
	sem->value++;
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10800117 	ldw	r2,4(r2)
     46c:	10c00044 	addi	r3,r2,1
     470:	e0bfff17 	ldw	r2,-4(fp)
     474:	10c00115 	stw	r3,4(r2)
	while(sem->threadCount)
     478:	00000c06 	br	4ac <semUp+0x60>
	{

		tcb *thread_to_unblock = dequeue(sem->blockingQueue);
     47c:	e0bfff17 	ldw	r2,-4(fp)
     480:	11000217 	ldw	r4,8(r2)
     484:	00009880 	call	988 <dequeue>
     488:	e0bffe15 	stw	r2,-8(fp)
		thread_to_unblock->state = READY;
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	00800044 	movi	r2,1
     494:	18800415 	stw	r2,16(r3)
		sem->threadCount--;
     498:	e0bfff17 	ldw	r2,-4(fp)
     49c:	10800017 	ldw	r2,0(r2)
     4a0:	10ffffc4 	addi	r3,r2,-1
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	10c00015 	stw	r3,0(r2)
void semUp(semaphore * sem)
{	//we do this out here because it's a binary semaphore

	DISABLE_INTERRUPTS();
	sem->value++;
	while(sem->threadCount)
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	1004c03a 	cmpne	r2,r2,zero
     4b8:	103ff01e 	bne	r2,zero,47c <semUp+0x30>

		tcb *thread_to_unblock = dequeue(sem->blockingQueue);
		thread_to_unblock->state = READY;
		sem->threadCount--;
	}
	ENABLE_INTERRUPTS();
     4bc:	06000044 	movi	et,1
     4c0:	c001703a 	wrctl	status,et
}
     4c4:	e037883a 	mov	sp,fp
     4c8:	dfc00117 	ldw	ra,4(sp)
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00204 	addi	sp,sp,8
     4d4:	f800283a 	ret

000004d8 <semValue>:

unsigned int semValue(semaphore * sem)
{
     4d8:	defffe04 	addi	sp,sp,-8
     4dc:	df000115 	stw	fp,4(sp)
     4e0:	df000104 	addi	fp,sp,4
     4e4:	e13fff15 	stw	r4,-4(fp)
	return sem->value;
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800117 	ldw	r2,4(r2)
}
     4f0:	e037883a 	mov	sp,fp
     4f4:	df000017 	ldw	fp,0(sp)
     4f8:	dec00104 	addi	sp,sp,4
     4fc:	f800283a 	ret

00000500 <semThreadCount>:

unsigned int semThreadCount(semaphore * sem)
{
     500:	defffe04 	addi	sp,sp,-8
     504:	df000115 	stw	fp,4(sp)
     508:	df000104 	addi	fp,sp,4
     50c:	e13fff15 	stw	r4,-4(fp)
	return sem->threadCount;
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	10800017 	ldw	r2,0(r2)
}
     518:	e037883a 	mov	sp,fp
     51c:	df000017 	ldw	fp,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <customer>:
int haircut = 0;
semaphore customerAvailable, stylistAvailable, mutex;


void customer(unsigned int tid)
{
     528:	defffc04 	addi	sp,sp,-16
     52c:	dfc00315 	stw	ra,12(sp)
     530:	df000215 	stw	fp,8(sp)
     534:	df000204 	addi	fp,sp,8
     538:	e13fff15 	stw	r4,-4(fp)
	int j;
	while(1){
		semDown(&mutex);
     53c:	01000074 	movhi	r4,1
     540:	21046404 	addi	r4,r4,4496
     544:	00003a00 	call	3a0 <semDown>
		if (waiting < CHAIRS){
     548:	d0a6a817 	ldw	r2,-25952(gp)
     54c:	10800148 	cmpgei	r2,r2,5
     550:	1000271e 	bne	r2,zero,5f0 <customer+0xc8>
			waiting = waiting + 1;
     554:	d0a6a817 	ldw	r2,-25952(gp)
     558:	10800044 	addi	r2,r2,1
     55c:	d0a6a815 	stw	r2,-25952(gp)
			printf("C: %d customer(s) waiting.\n", waiting);
     560:	d166a817 	ldw	r5,-25952(gp)
     564:	01000074 	movhi	r4,1
     568:	2135d404 	addi	r4,r4,-10416
     56c:	00016340 	call	1634 <printf>
			semUp(&customerAvailable);
     570:	01000074 	movhi	r4,1
     574:	21046a04 	addi	r4,r4,4520
     578:	000044c0 	call	44c <semUp>
			semUp(&mutex);
     57c:	01000074 	movhi	r4,1
     580:	21046404 	addi	r4,r4,4496
     584:	000044c0 	call	44c <semUp>
			semDown(&stylistAvailable);
     588:	01000074 	movhi	r4,1
     58c:	21046704 	addi	r4,r4,4508
     590:	00003a00 	call	3a0 <semDown>
			printf("C: stylistAvailable = %d.\n", semThreadCount(&stylistAvailable));
     594:	01000074 	movhi	r4,1
     598:	21046704 	addi	r4,r4,4508
     59c:	00005000 	call	500 <semThreadCount>
     5a0:	100b883a 	mov	r5,r2
     5a4:	01000074 	movhi	r4,1
     5a8:	2135db04 	addi	r4,r4,-10388
     5ac:	00016340 	call	1634 <printf>
			printf("C: customerAvailable = %d.\n", semValue(&customerAvailable));
     5b0:	01000074 	movhi	r4,1
     5b4:	21046a04 	addi	r4,r4,4520
     5b8:	00004d80 	call	4d8 <semValue>
     5bc:	100b883a 	mov	r5,r2
     5c0:	01000074 	movhi	r4,1
     5c4:	2135e204 	addi	r4,r4,-10360
     5c8:	00016340 	call	1634 <printf>
			printf("Thread %d is getting a haircut (%d).\n", tid, haircut++);
     5cc:	d0a6a917 	ldw	r2,-25948(gp)
     5d0:	100d883a 	mov	r6,r2
     5d4:	10800044 	addi	r2,r2,1
     5d8:	d0a6a915 	stw	r2,-25948(gp)
     5dc:	01000074 	movhi	r4,1
     5e0:	2135e904 	addi	r4,r4,-10332
     5e4:	e17fff17 	ldw	r5,-4(fp)
     5e8:	00016340 	call	1634 <printf>
			for (j = 0; j < MAX; j++);
			printf("Thread %d is going shopping.\n", tid);
		}
	}

}
     5ec:	00001006 	br	630 <customer+0x108>
			printf("C: customerAvailable = %d.\n", semValue(&customerAvailable));
			printf("Thread %d is getting a haircut (%d).\n", tid, haircut++);
			break;
		}
		else{
			semUp(&mutex);
     5f0:	01000074 	movhi	r4,1
     5f4:	21046404 	addi	r4,r4,4496
     5f8:	000044c0 	call	44c <semUp>
			for (j = 0; j < MAX; j++);
     5fc:	e03ffe15 	stw	zero,-8(fp)
     600:	00000306 	br	610 <customer+0xe8>
     604:	e0bffe17 	ldw	r2,-8(fp)
     608:	10800044 	addi	r2,r2,1
     60c:	e0bffe15 	stw	r2,-8(fp)
     610:	e0fffe17 	ldw	r3,-8(fp)
     614:	00b0d3d4 	movui	r2,49999
     618:	10fffa0e 	bge	r2,r3,604 <customer+0xdc>
			printf("Thread %d is going shopping.\n", tid);
     61c:	01000074 	movhi	r4,1
     620:	2135f304 	addi	r4,r4,-10292
     624:	e17fff17 	ldw	r5,-4(fp)
     628:	00016340 	call	1634 <printf>
		}
	}
     62c:	003fc306 	br	53c <customer+0x14>

}
     630:	e037883a 	mov	sp,fp
     634:	dfc00117 	ldw	ra,4(sp)
     638:	df000017 	ldw	fp,0(sp)
     63c:	dec00204 	addi	sp,sp,8
     640:	f800283a 	ret

00000644 <stylist>:

void stylist(unsigned int tid)
{
     644:	defffc04 	addi	sp,sp,-16
     648:	dfc00315 	stw	ra,12(sp)
     64c:	df000215 	stw	fp,8(sp)
     650:	df000204 	addi	fp,sp,8
     654:	e13fff15 	stw	r4,-4(fp)
	int j;
	while(1){
		semDown(&customerAvailable);
     658:	01000074 	movhi	r4,1
     65c:	21046a04 	addi	r4,r4,4520
     660:	00003a00 	call	3a0 <semDown>
		semDown(&mutex);
     664:	01000074 	movhi	r4,1
     668:	21046404 	addi	r4,r4,4496
     66c:	00003a00 	call	3a0 <semDown>
		waiting = waiting - 1;
     670:	d0a6a817 	ldw	r2,-25952(gp)
     674:	10bfffc4 	addi	r2,r2,-1
     678:	d0a6a815 	stw	r2,-25952(gp)
		semUp(&stylistAvailable);
     67c:	01000074 	movhi	r4,1
     680:	21046704 	addi	r4,r4,4508
     684:	000044c0 	call	44c <semUp>
		semUp(&mutex);
     688:	01000074 	movhi	r4,1
     68c:	21046404 	addi	r4,r4,4496
     690:	000044c0 	call	44c <semUp>
		printf("S: %d customer(s) waiting.\n", waiting);
     694:	d166a817 	ldw	r5,-25952(gp)
     698:	01000074 	movhi	r4,1
     69c:	2135fb04 	addi	r4,r4,-10260
     6a0:	00016340 	call	1634 <printf>
		printf("S: customerAvailable = %d.\n", semThreadCount(&customerAvailable));
     6a4:	01000074 	movhi	r4,1
     6a8:	21046a04 	addi	r4,r4,4520
     6ac:	00005000 	call	500 <semThreadCount>
     6b0:	100b883a 	mov	r5,r2
     6b4:	01000074 	movhi	r4,1
     6b8:	21360204 	addi	r4,r4,-10232
     6bc:	00016340 	call	1634 <printf>
		printf("S: styllistAvaliable = %d.\n", semValue(&stylistAvailable));
     6c0:	01000074 	movhi	r4,1
     6c4:	21046704 	addi	r4,r4,4508
     6c8:	00004d80 	call	4d8 <semValue>
     6cc:	100b883a 	mov	r5,r2
     6d0:	01000074 	movhi	r4,1
     6d4:	21360904 	addi	r4,r4,-10204
     6d8:	00016340 	call	1634 <printf>
		for (j = 0; j < MAX; j++);
     6dc:	e03ffe15 	stw	zero,-8(fp)
     6e0:	00000306 	br	6f0 <stylist+0xac>
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10800044 	addi	r2,r2,1
     6ec:	e0bffe15 	stw	r2,-8(fp)
     6f0:	e0fffe17 	ldw	r3,-8(fp)
     6f4:	00b0d3d4 	movui	r2,49999
     6f8:	10fffa0e 	bge	r2,r3,6e4 <stylist+0xa0>
		printf("Stylist (%d) is cutting hair.\n", tid);
     6fc:	01000074 	movhi	r4,1
     700:	21361004 	addi	r4,r4,-10176
     704:	e17fff17 	ldw	r5,-4(fp)
     708:	00016340 	call	1634 <printf>
		if (haircut == NUM_THREADS)
     70c:	d0a6a917 	ldw	r2,-25948(gp)
     710:	108003e0 	cmpeqi	r2,r2,15
     714:	1000011e 	bne	r2,zero,71c <stylist+0xd8>
			break;
	}
     718:	003fcf06 	br	658 <stylist+0x14>
}
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <os_primitive>:
    
void os_primitive()
{
     730:	defffc04 	addi	sp,sp,-16
     734:	dfc00315 	stw	ra,12(sp)
     738:	df000215 	stw	fp,8(sp)
     73c:	df000204 	addi	fp,sp,8
    unsigned int i;
    run_queue_init();
     740:	0000a700 	call	a70 <run_queue_init>
    tcb *thread_pointer;
    semInit(&customerAvailable,0);
     744:	01000074 	movhi	r4,1
     748:	21046a04 	addi	r4,r4,4520
     74c:	000b883a 	mov	r5,zero
     750:	00003000 	call	300 <semInit>
    semInit(&stylistAvailable,0);
     754:	01000074 	movhi	r4,1
     758:	21046704 	addi	r4,r4,4508
     75c:	000b883a 	mov	r5,zero
     760:	00003000 	call	300 <semInit>
    semInit(&mutex,1);
     764:	01000074 	movhi	r4,1
     768:	21046404 	addi	r4,r4,4496
     76c:	01400044 	movi	r5,1
     770:	00003000 	call	300 <semInit>
    
    for (i = 0; i <= NUM_THREADS; i++)
     774:	e03fff15 	stw	zero,-4(fp)
     778:	00001706 	br	7d8 <os_primitive+0xa8>
    {
    	if (i == NUM_THREADS)
     77c:	e0bfff17 	ldw	r2,-4(fp)
     780:	108003d8 	cmpnei	r2,r2,15
     784:	1000071e 	bne	r2,zero,7a4 <os_primitive+0x74>
    		thread_pointer = mythread_create(i, 4096, stylist);
     788:	e13fff17 	ldw	r4,-4(fp)
     78c:	01440004 	movi	r5,4096
     790:	01800034 	movhi	r6,0
     794:	31819104 	addi	r6,r6,1604
     798:	0000ac80 	call	ac8 <mythread_create>
     79c:	e0bffe15 	stw	r2,-8(fp)
     7a0:	00000606 	br	7bc <os_primitive+0x8c>
    	else
    		thread_pointer = mythread_create(i, 4096, customer);
     7a4:	e13fff17 	ldw	r4,-4(fp)
     7a8:	01440004 	movi	r5,4096
     7ac:	01800034 	movhi	r6,0
     7b0:	31814a04 	addi	r6,r6,1320
     7b4:	0000ac80 	call	ac8 <mythread_create>
     7b8:	e0bffe15 	stw	r2,-8(fp)
        mythread_start(thread_pointer);
     7bc:	e13ffe17 	ldw	r4,-8(fp)
     7c0:	0000c240 	call	c24 <mythread_start>
        mythread_join(thread_pointer);
     7c4:	e13ffe17 	ldw	r4,-8(fp)
     7c8:	0000c500 	call	c50 <mythread_join>
    tcb *thread_pointer;
    semInit(&customerAvailable,0);
    semInit(&stylistAvailable,0);
    semInit(&mutex,1);
    
    for (i = 0; i <= NUM_THREADS; i++)
     7cc:	e0bfff17 	ldw	r2,-4(fp)
     7d0:	10800044 	addi	r2,r2,1
     7d4:	e0bfff15 	stw	r2,-4(fp)
     7d8:	e0bfff17 	ldw	r2,-4(fp)
     7dc:	10800430 	cmpltui	r2,r2,16
     7e0:	103fe61e 	bne	r2,zero,77c <os_primitive+0x4c>
        mythread_start(thread_pointer);
        mythread_join(thread_pointer);
    }

    
    if ( start_alarm_succeed() )
     7e4:	00002ac0 	call	2ac <start_alarm_succeed>
     7e8:	1005003a 	cmpeq	r2,r2,zero
     7ec:	1000071e 	bne	r2,zero,80c <os_primitive+0xdc>
    {
        printf ("Start the alarm successfully\n");
     7f0:	01000074 	movhi	r4,1
     7f4:	21361804 	addi	r4,r4,-10144
     7f8:	00017700 	call	1770 <puts>
    	printf ("what is going on\n");
     7fc:	01000074 	movhi	r4,1
     800:	21362004 	addi	r4,r4,-10112
     804:	00017700 	call	1770 <puts>
     808:	00000306 	br	818 <os_primitive+0xe8>
    }
    else
        printf ("Unable to start the alarm\n");
     80c:	01000074 	movhi	r4,1
     810:	21362504 	addi	r4,r4,-10092
     814:	00017700 	call	1770 <puts>

    /* a while loop that runs forever*/
    while (1)
    {
        /* delay printf for a while */
        for (i = 0; i < MAX; i++);
     818:	e03fff15 	stw	zero,-4(fp)
     81c:	00000306 	br	82c <os_primitive+0xfc>
     820:	e0bfff17 	ldw	r2,-4(fp)
     824:	10800044 	addi	r2,r2,1
     828:	e0bfff15 	stw	r2,-4(fp)
     82c:	e0ffff17 	ldw	r3,-4(fp)
     830:	00b0d3d4 	movui	r2,49999
     834:	10fffa2e 	bgeu	r2,r3,820 <os_primitive+0xf0>
        printf ("My simple thread scheduler for CSE351\n");
     838:	01000074 	movhi	r4,1
     83c:	21362c04 	addi	r4,r4,-10064
     840:	00017700 	call	1770 <puts>
    }
     844:	003ff406 	br	818 <os_primitive+0xe8>

00000848 <main>:
}

int main()
{
     848:	defffe04 	addi	sp,sp,-8
     84c:	dfc00115 	stw	ra,4(sp)
     850:	df000015 	stw	fp,0(sp)
     854:	d839883a 	mov	fp,sp
    os_primitive();
     858:	00007300 	call	730 <os_primitive>
    return 0;
     85c:	0005883a 	mov	r2,zero
}
     860:	e037883a 	mov	sp,fp
     864:	dfc00117 	ldw	ra,4(sp)
     868:	df000017 	ldw	fp,0(sp)
     86c:	dec00204 	addi	sp,sp,8
     870:	f800283a 	ret

00000874 <Queue>:
#include <stdlib.h>
#include "queue.h"

//static Q_type queue = {NULL, NULL, 0};
Q_type *Queue(E_type *head, E_type * tail, unsigned int size)
{
     874:	defffa04 	addi	sp,sp,-24
     878:	dfc00515 	stw	ra,20(sp)
     87c:	df000415 	stw	fp,16(sp)
     880:	df000404 	addi	fp,sp,16
     884:	e13ffd15 	stw	r4,-12(fp)
     888:	e17ffe15 	stw	r5,-8(fp)
     88c:	e1bfff15 	stw	r6,-4(fp)

	Q_type *queue = malloc(sizeof(Q_type));
     890:	01000304 	movi	r4,12
     894:	0000ee00 	call	ee0 <malloc>
     898:	e0bffc15 	stw	r2,-16(fp)
	queue->head = NULL;
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10000015 	stw	zero,0(r2)
	queue->tail = NULL;
     8a4:	e0bffc17 	ldw	r2,-16(fp)
     8a8:	10000115 	stw	zero,4(r2)
	queue->size = 0;
     8ac:	e0bffc17 	ldw	r2,-16(fp)
     8b0:	10000215 	stw	zero,8(r2)
	return queue;
     8b4:	e0bffc17 	ldw	r2,-16(fp)
}
     8b8:	e037883a 	mov	sp,fp
     8bc:	dfc00117 	ldw	ra,4(sp)
     8c0:	df000017 	ldw	fp,0(sp)
     8c4:	dec00204 	addi	sp,sp,8
     8c8:	f800283a 	ret

000008cc <enqueue>:

void enqueue(void *data, Q_type *queue)
{
     8cc:	defffb04 	addi	sp,sp,-20
     8d0:	dfc00415 	stw	ra,16(sp)
     8d4:	df000315 	stw	fp,12(sp)
     8d8:	df000304 	addi	fp,sp,12
     8dc:	e13ffe15 	stw	r4,-8(fp)
     8e0:	e17fff15 	stw	r5,-4(fp)
    E_type  *elem;
    
    if ((elem = (E_type *)malloc(sizeof(E_type))) == NULL)
     8e4:	01000204 	movi	r4,8
     8e8:	0000ee00 	call	ee0 <malloc>
     8ec:	e0bffd15 	stw	r2,-12(fp)
     8f0:	e0bffd17 	ldw	r2,-12(fp)
     8f4:	1004c03a 	cmpne	r2,r2,zero
     8f8:	1000051e 	bne	r2,zero,910 <enqueue+0x44>
    {
        printf("Unable to allocate space!\n");
     8fc:	01000074 	movhi	r4,1
     900:	21363604 	addi	r4,r4,-10024
     904:	00017700 	call	1770 <puts>
        exit(1);
     908:	01000044 	movi	r4,1
     90c:	0000e940 	call	e94 <exit>
    }
    elem->data = data;
     910:	e0fffd17 	ldw	r3,-12(fp)
     914:	e0bffe17 	ldw	r2,-8(fp)
     918:	18800015 	stw	r2,0(r3)
    elem->next = NULL;
     91c:	e0bffd17 	ldw	r2,-12(fp)
     920:	10000115 	stw	zero,4(r2)
    
    if (queue->head == NULL)
     924:	e0bfff17 	ldw	r2,-4(fp)
     928:	10800017 	ldw	r2,0(r2)
     92c:	1004c03a 	cmpne	r2,r2,zero
     930:	1000041e 	bne	r2,zero,944 <enqueue+0x78>
        queue->head = elem;
     934:	e0ffff17 	ldw	r3,-4(fp)
     938:	e0bffd17 	ldw	r2,-12(fp)
     93c:	18800015 	stw	r2,0(r3)
     940:	00000406 	br	954 <enqueue+0x88>
    else
        queue->tail->next = elem;
     944:	e0bfff17 	ldw	r2,-4(fp)
     948:	10c00117 	ldw	r3,4(r2)
     94c:	e0bffd17 	ldw	r2,-12(fp)
     950:	18800115 	stw	r2,4(r3)
    queue->tail = elem;
     954:	e0ffff17 	ldw	r3,-4(fp)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	18800115 	stw	r2,4(r3)

    queue->size++;
     960:	e0bfff17 	ldw	r2,-4(fp)
     964:	10800217 	ldw	r2,8(r2)
     968:	10c00044 	addi	r3,r2,1
     96c:	e0bfff17 	ldw	r2,-4(fp)
     970:	10c00215 	stw	r3,8(r2)
}
     974:	e037883a 	mov	sp,fp
     978:	dfc00117 	ldw	ra,4(sp)
     97c:	df000017 	ldw	fp,0(sp)
     980:	dec00204 	addi	sp,sp,8
     984:	f800283a 	ret

00000988 <dequeue>:

void *dequeue(Q_type *queue)
{
     988:	defffb04 	addi	sp,sp,-20
     98c:	dfc00415 	stw	ra,16(sp)
     990:	df000315 	stw	fp,12(sp)
     994:	df000304 	addi	fp,sp,12
     998:	e13fff15 	stw	r4,-4(fp)
    E_type  *elem;
    void    *data = NULL;
     99c:	e03ffd15 	stw	zero,-12(fp)
    
    if (queue->size != 0)
     9a0:	e0bfff17 	ldw	r2,-4(fp)
     9a4:	10800217 	ldw	r2,8(r2)
     9a8:	1005003a 	cmpeq	r2,r2,zero
     9ac:	1000181e 	bne	r2,zero,a10 <dequeue+0x88>
    {
        elem = queue->head;
     9b0:	e0bfff17 	ldw	r2,-4(fp)
     9b4:	10800017 	ldw	r2,0(r2)
     9b8:	e0bffe15 	stw	r2,-8(fp)
        if (queue->size == 1)
     9bc:	e0bfff17 	ldw	r2,-4(fp)
     9c0:	10800217 	ldw	r2,8(r2)
     9c4:	10800058 	cmpnei	r2,r2,1
     9c8:	1000021e 	bne	r2,zero,9d4 <dequeue+0x4c>
            queue->tail = NULL;
     9cc:	e0bfff17 	ldw	r2,-4(fp)
     9d0:	10000115 	stw	zero,4(r2)
        queue->head = queue->head->next;
     9d4:	e0bfff17 	ldw	r2,-4(fp)
     9d8:	10800017 	ldw	r2,0(r2)
     9dc:	10c00117 	ldw	r3,4(r2)
     9e0:	e0bfff17 	ldw	r2,-4(fp)
     9e4:	10c00015 	stw	r3,0(r2)
        
        queue->size--;
     9e8:	e0bfff17 	ldw	r2,-4(fp)
     9ec:	10800217 	ldw	r2,8(r2)
     9f0:	10ffffc4 	addi	r3,r2,-1
     9f4:	e0bfff17 	ldw	r2,-4(fp)
     9f8:	10c00215 	stw	r3,8(r2)
        data = elem->data;
     9fc:	e0bffe17 	ldw	r2,-8(fp)
     a00:	10800017 	ldw	r2,0(r2)
     a04:	e0bffd15 	stw	r2,-12(fp)
        free(elem);
     a08:	e13ffe17 	ldw	r4,-8(fp)
     a0c:	0000ecc0 	call	ecc <free>
    }
        
    return data;
     a10:	e0bffd17 	ldw	r2,-12(fp)
}
     a14:	e037883a 	mov	sp,fp
     a18:	dfc00117 	ldw	ra,4(sp)
     a1c:	df000017 	ldw	fp,0(sp)
     a20:	dec00204 	addi	sp,sp,8
     a24:	f800283a 	ret

00000a28 <getQsize>:

unsigned int getQsize(Q_type *queue)
{
     a28:	defffe04 	addi	sp,sp,-8
     a2c:	df000115 	stw	fp,4(sp)
     a30:	df000104 	addi	fp,sp,4
     a34:	e13fff15 	stw	r4,-4(fp)
    return queue->size;
     a38:	e0bfff17 	ldw	r2,-4(fp)
     a3c:	10800217 	ldw	r2,8(r2)
}
     a40:	e037883a 	mov	sp,fp
     a44:	df000017 	ldw	fp,0(sp)
     a48:	dec00104 	addi	sp,sp,4
     a4c:	f800283a 	ret

00000a50 <get_current_running_thread>:

/* pointing to the stack/context of main() */
static unsigned int *main_stack_pointer = NULL;

tcb *get_current_running_thread()
{
     a50:	deffff04 	addi	sp,sp,-4
     a54:	df000015 	stw	fp,0(sp)
     a58:	d839883a 	mov	fp,sp
	return current_running_thread;
     a5c:	d0a6aa17 	ldw	r2,-25944(gp)
}
     a60:	e037883a 	mov	sp,fp
     a64:	df000017 	ldw	fp,0(sp)
     a68:	dec00104 	addi	sp,sp,4
     a6c:	f800283a 	ret

00000a70 <run_queue_init>:

void run_queue_init()
{
     a70:	defffe04 	addi	sp,sp,-8
     a74:	dfc00115 	stw	ra,4(sp)
     a78:	df000015 	stw	fp,0(sp)
     a7c:	d839883a 	mov	fp,sp
	runQueue = Queue(NULL, NULL, 0);
     a80:	0009883a 	mov	r4,zero
     a84:	000b883a 	mov	r5,zero
     a88:	000d883a 	mov	r6,zero
     a8c:	00008740 	call	874 <Queue>
     a90:	d0a6ab15 	stw	r2,-25940(gp)
}
     a94:	e037883a 	mov	sp,fp
     a98:	dfc00117 	ldw	ra,4(sp)
     a9c:	df000017 	ldw	fp,0(sp)
     aa0:	dec00204 	addi	sp,sp,8
     aa4:	f800283a 	ret

00000aa8 <get_running_queue>:

Q_type *get_running_queue()
{
     aa8:	deffff04 	addi	sp,sp,-4
     aac:	df000015 	stw	fp,0(sp)
     ab0:	d839883a 	mov	fp,sp
	return (Q_type*)runQueue;
     ab4:	d0a6ab17 	ldw	r2,-25940(gp)
}
     ab8:	e037883a 	mov	sp,fp
     abc:	df000017 	ldw	fp,0(sp)
     ac0:	dec00104 	addi	sp,sp,4
     ac4:	f800283a 	ret

00000ac8 <mythread_create>:

tcb *mythread_create(unsigned int tid, unsigned int stack_size, void (*mythread)(unsigned int tid))
{
     ac8:	defff904 	addi	sp,sp,-28
     acc:	dfc00615 	stw	ra,24(sp)
     ad0:	df000515 	stw	fp,20(sp)
     ad4:	df000504 	addi	fp,sp,20
     ad8:	e13ffd15 	stw	r4,-12(fp)
     adc:	e17ffe15 	stw	r5,-8(fp)
     ae0:	e1bfff15 	stw	r6,-4(fp)
    unsigned int *tmp_ptr;
    
    /* allocate a tcb for a thread */
    tcb *thread_pointer;
    
    thread_pointer                      = (tcb *)malloc(sizeof(tcb));
     ae4:	01000504 	movi	r4,20
     ae8:	0000ee00 	call	ee0 <malloc>
     aec:	e0bffb15 	stw	r2,-20(fp)
    if (thread_pointer == NULL)
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	1004c03a 	cmpne	r2,r2,zero
     af8:	1000051e 	bne	r2,zero,b10 <mythread_create+0x48>
    {
        printf("Unable to allocate space!\n");
     afc:	01000074 	movhi	r4,1
     b00:	21363d04 	addi	r4,r4,-9996
     b04:	00017700 	call	1770 <puts>
        exit(1);
     b08:	01000044 	movi	r4,1
     b0c:	0000e940 	call	e94 <exit>
    }
    
    /* initialize the thread's tcb */
    thread_pointer->tid                 = tid;
     b10:	e0fffb17 	ldw	r3,-20(fp)
     b14:	e0bffd17 	ldw	r2,-12(fp)
     b18:	18800015 	stw	r2,0(r3)
    thread_pointer->stack               = (unsigned int *)malloc(sizeof(unsigned int) * stack_size);
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	1085883a 	add	r2,r2,r2
     b24:	1085883a 	add	r2,r2,r2
     b28:	1009883a 	mov	r4,r2
     b2c:	0000ee00 	call	ee0 <malloc>
     b30:	1007883a 	mov	r3,r2
     b34:	e0bffb17 	ldw	r2,-20(fp)
     b38:	10c00115 	stw	r3,4(r2)
    if (thread_pointer->stack == NULL)
     b3c:	e0bffb17 	ldw	r2,-20(fp)
     b40:	10800117 	ldw	r2,4(r2)
     b44:	1004c03a 	cmpne	r2,r2,zero
     b48:	1000051e 	bne	r2,zero,b60 <mythread_create+0x98>
    {
        printf("Unable to allocate space!\n");
     b4c:	01000074 	movhi	r4,1
     b50:	21363d04 	addi	r4,r4,-9996
     b54:	00017700 	call	1770 <puts>
        exit(1);
     b58:	01000044 	movi	r4,1
     b5c:	0000e940 	call	e94 <exit>
    }
    thread_pointer->stack_size          = stack_size;
     b60:	e0fffb17 	ldw	r3,-20(fp)
     b64:	e0bffe17 	ldw	r2,-8(fp)
     b68:	18800215 	stw	r2,8(r3)
    thread_pointer->stack_pointer       = (unsigned int *)(thread_pointer->stack + stack_size - 19);
     b6c:	e0bffb17 	ldw	r2,-20(fp)
     b70:	10c00117 	ldw	r3,4(r2)
     b74:	e0bffe17 	ldw	r2,-8(fp)
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	1885883a 	add	r2,r3,r2
     b84:	10ffed04 	addi	r3,r2,-76
     b88:	e0bffb17 	ldw	r2,-20(fp)
     b8c:	10c00315 	stw	r3,12(r2)
    thread_pointer->state               = NEW;
     b90:	e0bffb17 	ldw	r2,-20(fp)
     b94:	10000415 	stw	zero,16(r2)
    
    /* initialize the thread's stack */
    tmp_ptr                             = thread_pointer->stack_pointer;
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800317 	ldw	r2,12(r2)
     ba0:	e0bffc15 	stw	r2,-16(fp)
    tmp_ptr[18]                         = (unsigned int)mythread;                               // ea
     ba4:	e0bffc17 	ldw	r2,-16(fp)
     ba8:	10c01204 	addi	r3,r2,72
     bac:	e0bfff17 	ldw	r2,-4(fp)
     bb0:	18800015 	stw	r2,0(r3)
    tmp_ptr[17]                         = 1;                                                    // estatus
     bb4:	e0bffc17 	ldw	r2,-16(fp)
     bb8:	10c01104 	addi	r3,r2,68
     bbc:	00800044 	movi	r2,1
     bc0:	18800015 	stw	r2,0(r3)
    tmp_ptr[5]                          = tid;                                                  // r4
     bc4:	e0bffc17 	ldw	r2,-16(fp)
     bc8:	10c00504 	addi	r3,r2,20
     bcc:	e0bffd17 	ldw	r2,-12(fp)
     bd0:	18800015 	stw	r2,0(r3)
    tmp_ptr[0]                          = (unsigned int)mythread_cleanup;                       // ra
     bd4:	00800034 	movhi	r2,0
     bd8:	10838a04 	addi	r2,r2,3624
     bdc:	1007883a 	mov	r3,r2
     be0:	e0bffc17 	ldw	r2,-16(fp)
     be4:	10c00015 	stw	r3,0(r2)
    tmp_ptr[-1]                         = (unsigned int)(thread_pointer->stack + stack_size);   // fp
     be8:	e0bffc17 	ldw	r2,-16(fp)
     bec:	113fff04 	addi	r4,r2,-4
     bf0:	e0bffb17 	ldw	r2,-20(fp)
     bf4:	10c00117 	ldw	r3,4(r2)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	1085883a 	add	r2,r2,r2
     c00:	1085883a 	add	r2,r2,r2
     c04:	1885883a 	add	r2,r3,r2
     c08:	20800015 	stw	r2,0(r4)
           
    return thread_pointer;
     c0c:	e0bffb17 	ldw	r2,-20(fp)
}
     c10:	e037883a 	mov	sp,fp
     c14:	dfc00117 	ldw	ra,4(sp)
     c18:	df000017 	ldw	fp,0(sp)
     c1c:	dec00204 	addi	sp,sp,8
     c20:	f800283a 	ret

00000c24 <mythread_start>:

/* NEW ----> READY */
void mythread_start(tcb *thread_pointer)
{
     c24:	defffe04 	addi	sp,sp,-8
     c28:	df000115 	stw	fp,4(sp)
     c2c:	df000104 	addi	fp,sp,4
     c30:	e13fff15 	stw	r4,-4(fp)
	//printf("I started\n");
    // assert(thread_pointer && thread_pointer->state == NEW);
    thread_pointer->state = READY;
     c34:	e0ffff17 	ldw	r3,-4(fp)
     c38:	00800044 	movi	r2,1
     c3c:	18800415 	stw	r2,16(r3)
}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <mythread_join>:

/* READY --push into--> readyQ */
void mythread_join(tcb *thread_pointer)
{
     c50:	defffd04 	addi	sp,sp,-12
     c54:	dfc00215 	stw	ra,8(sp)
     c58:	df000115 	stw	fp,4(sp)
     c5c:	df000104 	addi	fp,sp,4
     c60:	e13fff15 	stw	r4,-4(fp)
	//printf("I joined\n");
    // assert(thread_pointer && thread_pointer->state == READY);
    enqueue((void *)thread_pointer, runQueue);
     c64:	d166ab17 	ldw	r5,-25940(gp)
     c68:	e13fff17 	ldw	r4,-4(fp)
     c6c:	00008cc0 	call	8cc <enqueue>
}
     c70:	e037883a 	mov	sp,fp
     c74:	dfc00117 	ldw	ra,4(sp)
     c78:	df000017 	ldw	fp,0(sp)
     c7c:	dec00204 	addi	sp,sp,8
     c80:	f800283a 	ret

00000c84 <mythread_block>:

/* RUNNING ----> BLOCKED */
void mythread_block(tcb *thread_pointer)
{
     c84:	defffe04 	addi	sp,sp,-8
     c88:	df000115 	stw	fp,4(sp)
     c8c:	df000104 	addi	fp,sp,4
     c90:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == RUNNING);
    thread_pointer->state = BLOCKED;
     c94:	e0ffff17 	ldw	r3,-4(fp)
     c98:	008000c4 	movi	r2,3
     c9c:	18800415 	stw	r2,16(r3)
}
     ca0:	e037883a 	mov	sp,fp
     ca4:	df000017 	ldw	fp,0(sp)
     ca8:	dec00104 	addi	sp,sp,4
     cac:	f800283a 	ret

00000cb0 <mythread_terminate>:

/* RUNNING ----> TERMINATED */
void mythread_terminate(tcb *thread_pointer)
{
     cb0:	defffe04 	addi	sp,sp,-8
     cb4:	df000115 	stw	fp,4(sp)
     cb8:	df000104 	addi	fp,sp,4
     cbc:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == RUNNING);
    thread_pointer->state = TERMINATED;
     cc0:	e0ffff17 	ldw	r3,-4(fp)
     cc4:	00800104 	movi	r2,4
     cc8:	18800415 	stw	r2,16(r3)
}
     ccc:	e037883a 	mov	sp,fp
     cd0:	df000017 	ldw	fp,0(sp)
     cd4:	dec00104 	addi	sp,sp,4
     cd8:	f800283a 	ret

00000cdc <mythread_schedule>:

void *mythread_schedule(void *context)
{
     cdc:	defffd04 	addi	sp,sp,-12
     ce0:	dfc00215 	stw	ra,8(sp)
     ce4:	df000115 	stw	fp,4(sp)
     ce8:	df000104 	addi	fp,sp,4
     cec:	e13fff15 	stw	r4,-4(fp)
    if (getQsize(runQueue) > 0)
     cf0:	d126ab17 	ldw	r4,-25940(gp)
     cf4:	0000a280 	call	a28 <getQsize>
     cf8:	1005003a 	cmpeq	r2,r2,zero
     cfc:	1000271e 	bne	r2,zero,d9c <mythread_schedule+0xc0>
    {
        if (current_running_thread != NULL)
     d00:	d0a6aa17 	ldw	r2,-25944(gp)
     d04:	1005003a 	cmpeq	r2,r2,zero
     d08:	10000a1e 	bne	r2,zero,d34 <mythread_schedule+0x58>
        {
            // assert(current_running_thread->state == RUNNING);
            // assert(main_stack_pointer != NULL);
            current_running_thread->state = READY;
     d0c:	d0e6aa17 	ldw	r3,-25944(gp)
     d10:	00800044 	movi	r2,1
     d14:	18800415 	stw	r2,16(r3)
            current_running_thread->stack_pointer = (unsigned int *)context;
     d18:	d0e6aa17 	ldw	r3,-25944(gp)
     d1c:	e0bfff17 	ldw	r2,-4(fp)
     d20:	18800315 	stw	r2,12(r3)
            enqueue(current_running_thread, runQueue);
     d24:	d126aa17 	ldw	r4,-25944(gp)
     d28:	d166ab17 	ldw	r5,-25940(gp)
     d2c:	00008cc0 	call	8cc <enqueue>
     d30:	00000506 	br	d48 <mythread_schedule+0x6c>
        }
        else if (main_stack_pointer == NULL)
     d34:	d0a6ac17 	ldw	r2,-25936(gp)
     d38:	1004c03a 	cmpne	r2,r2,zero
     d3c:	1000021e 	bne	r2,zero,d48 <mythread_schedule+0x6c>
        {
            main_stack_pointer = (unsigned int *)context;
     d40:	e0bfff17 	ldw	r2,-4(fp)
     d44:	d0a6ac15 	stw	r2,-25936(gp)
        }
        
        do
        {
        	current_running_thread = (tcb *)dequeue(runQueue);
     d48:	d126ab17 	ldw	r4,-25940(gp)
     d4c:	00009880 	call	988 <dequeue>
     d50:	d0a6aa15 	stw	r2,-25944(gp)
        	if(current_running_thread->state == BLOCKED)
     d54:	d0a6aa17 	ldw	r2,-25944(gp)
     d58:	10800417 	ldw	r2,16(r2)
     d5c:	108000d8 	cmpnei	r2,r2,3
     d60:	1000031e 	bne	r2,zero,d70 <mythread_schedule+0x94>
        	{
        		enqueue(current_running_thread, runQueue);
     d64:	d126aa17 	ldw	r4,-25944(gp)
     d68:	d166ab17 	ldw	r5,-25940(gp)
     d6c:	00008cc0 	call	8cc <enqueue>
        	}
        } while (current_running_thread->state == BLOCKED);
     d70:	d0a6aa17 	ldw	r2,-25944(gp)
     d74:	10800417 	ldw	r2,16(r2)
     d78:	108000e0 	cmpeqi	r2,r2,3
     d7c:	103ff21e 	bne	r2,zero,d48 <mythread_schedule+0x6c>

        // assert(current_running_thread->state == READY);
        current_running_thread->state = RUNNING;
     d80:	d0e6aa17 	ldw	r3,-25944(gp)
     d84:	00800084 	movi	r2,2
     d88:	18800415 	stw	r2,16(r3)
        
        context = (void *)(current_running_thread->stack_pointer);
     d8c:	d0a6aa17 	ldw	r2,-25944(gp)
     d90:	10800317 	ldw	r2,12(r2)
     d94:	e0bfff15 	stw	r2,-4(fp)
     d98:	00000806 	br	dbc <mythread_schedule+0xe0>
    }
    else if (current_running_thread==NULL && main_stack_pointer!=NULL)
     d9c:	d0a6aa17 	ldw	r2,-25944(gp)
     da0:	1004c03a 	cmpne	r2,r2,zero
     da4:	1000051e 	bne	r2,zero,dbc <mythread_schedule+0xe0>
     da8:	d0a6ac17 	ldw	r2,-25936(gp)
     dac:	1005003a 	cmpeq	r2,r2,zero
     db0:	1000021e 	bne	r2,zero,dbc <mythread_schedule+0xe0>
    {        
        context = (void *)main_stack_pointer;
     db4:	d0a6ac17 	ldw	r2,-25936(gp)
     db8:	e0bfff15 	stw	r2,-4(fp)
    }

    return context;
     dbc:	e0bfff17 	ldw	r2,-4(fp)
}
     dc0:	e037883a 	mov	sp,fp
     dc4:	dfc00117 	ldw	ra,4(sp)
     dc8:	df000017 	ldw	fp,0(sp)
     dcc:	dec00204 	addi	sp,sp,8
     dd0:	f800283a 	ret

00000dd4 <mythread_isQempty>:

unsigned int mythread_isQempty()
{
     dd4:	defffd04 	addi	sp,sp,-12
     dd8:	dfc00215 	stw	ra,8(sp)
     ddc:	df000115 	stw	fp,4(sp)
     de0:	df000104 	addi	fp,sp,4
    return (getQsize(runQueue) == 0) && (current_running_thread == NULL);
     de4:	d126ab17 	ldw	r4,-25940(gp)
     de8:	0000a280 	call	a28 <getQsize>
     dec:	1004c03a 	cmpne	r2,r2,zero
     df0:	1000061e 	bne	r2,zero,e0c <mythread_isQempty+0x38>
     df4:	d0a6aa17 	ldw	r2,-25944(gp)
     df8:	1004c03a 	cmpne	r2,r2,zero
     dfc:	1000031e 	bne	r2,zero,e0c <mythread_isQempty+0x38>
     e00:	00800044 	movi	r2,1
     e04:	e0bfff15 	stw	r2,-4(fp)
     e08:	00000106 	br	e10 <mythread_isQempty+0x3c>
     e0c:	e03fff15 	stw	zero,-4(fp)
     e10:	e0bfff17 	ldw	r2,-4(fp)
}
     e14:	e037883a 	mov	sp,fp
     e18:	dfc00117 	ldw	ra,4(sp)
     e1c:	df000017 	ldw	fp,0(sp)
     e20:	dec00204 	addi	sp,sp,8
     e24:	f800283a 	ret

00000e28 <mythread_cleanup>:

void mythread_cleanup()
{
     e28:	defffd04 	addi	sp,sp,-12
     e2c:	dfc00215 	stw	ra,8(sp)
     e30:	df000115 	stw	fp,4(sp)
     e34:	df000104 	addi	fp,sp,4
	int count = 0;
     e38:	e03fff15 	stw	zero,-4(fp)
    DISABLE_INTERRUPTS();
     e3c:	0001703a 	wrctl	status,zero
    mythread_terminate(current_running_thread);
     e40:	d126aa17 	ldw	r4,-25944(gp)
     e44:	0000cb00 	call	cb0 <mythread_terminate>
    free(current_running_thread->stack);
     e48:	d0a6aa17 	ldw	r2,-25944(gp)
     e4c:	11000117 	ldw	r4,4(r2)
     e50:	0000ecc0 	call	ecc <free>
    free(current_running_thread);
     e54:	d126aa17 	ldw	r4,-25944(gp)
     e58:	0000ecc0 	call	ecc <free>
    current_running_thread = NULL;
     e5c:	d026aa15 	stw	zero,-25944(gp)
    ENABLE_INTERRUPTS();
     e60:	06000044 	movi	et,1
     e64:	c001703a 	wrctl	status,et
    while(1){
    	for (count = 0; count < DELAY; count++);
     e68:	e03fff15 	stw	zero,-4(fp)
     e6c:	00000306 	br	e7c <mythread_cleanup+0x54>
     e70:	e0bfff17 	ldw	r2,-4(fp)
     e74:	10800044 	addi	r2,r2,1
     e78:	e0bfff15 	stw	r2,-4(fp)
     e7c:	e0bfff17 	ldw	r2,-4(fp)
     e80:	1089c410 	cmplti	r2,r2,10000
     e84:	103ffa1e 	bne	r2,zero,e70 <mythread_cleanup+0x48>
    	printf(".");
     e88:	01000b84 	movi	r4,46
     e8c:	00016ac0 	call	16ac <putchar>
    }
     e90:	003ff506 	br	e68 <mythread_cleanup+0x40>

00000e94 <exit>:
     e94:	defffe04 	addi	sp,sp,-8
     e98:	000b883a 	mov	r5,zero
     e9c:	dc000015 	stw	r16,0(sp)
     ea0:	dfc00115 	stw	ra,4(sp)
     ea4:	2021883a 	mov	r16,r4
     ea8:	00038e80 	call	38e8 <__call_exitprocs>
     eac:	00800074 	movhi	r2,1
     eb0:	10bd9b04 	addi	r2,r2,-2452
     eb4:	11000017 	ldw	r4,0(r2)
     eb8:	20800f17 	ldw	r2,60(r4)
     ebc:	10000126 	beq	r2,zero,ec4 <exit+0x30>
     ec0:	103ee83a 	callr	r2
     ec4:	8009883a 	mov	r4,r16
     ec8:	000b1900 	call	b190 <_exit>

00000ecc <free>:
     ecc:	00800074 	movhi	r2,1
     ed0:	10bd9a04 	addi	r2,r2,-2456
     ed4:	200b883a 	mov	r5,r4
     ed8:	11000017 	ldw	r4,0(r2)
     edc:	00058e01 	jmpi	58e0 <_free_r>

00000ee0 <malloc>:
     ee0:	00800074 	movhi	r2,1
     ee4:	10bd9a04 	addi	r2,r2,-2456
     ee8:	200b883a 	mov	r5,r4
     eec:	11000017 	ldw	r4,0(r2)
     ef0:	0000ef41 	jmpi	ef4 <_malloc_r>

00000ef4 <_malloc_r>:
     ef4:	defff604 	addi	sp,sp,-40
     ef8:	28c002c4 	addi	r3,r5,11
     efc:	00800584 	movi	r2,22
     f00:	dc800215 	stw	r18,8(sp)
     f04:	dfc00915 	stw	ra,36(sp)
     f08:	df000815 	stw	fp,32(sp)
     f0c:	ddc00715 	stw	r23,28(sp)
     f10:	dd800615 	stw	r22,24(sp)
     f14:	dd400515 	stw	r21,20(sp)
     f18:	dd000415 	stw	r20,16(sp)
     f1c:	dcc00315 	stw	r19,12(sp)
     f20:	dc400115 	stw	r17,4(sp)
     f24:	dc000015 	stw	r16,0(sp)
     f28:	2025883a 	mov	r18,r4
     f2c:	10c01236 	bltu	r2,r3,f78 <_malloc_r+0x84>
     f30:	04400404 	movi	r17,16
     f34:	8940142e 	bgeu	r17,r5,f88 <_malloc_r+0x94>
     f38:	00800304 	movi	r2,12
     f3c:	0007883a 	mov	r3,zero
     f40:	90800015 	stw	r2,0(r18)
     f44:	1805883a 	mov	r2,r3
     f48:	dfc00917 	ldw	ra,36(sp)
     f4c:	df000817 	ldw	fp,32(sp)
     f50:	ddc00717 	ldw	r23,28(sp)
     f54:	dd800617 	ldw	r22,24(sp)
     f58:	dd400517 	ldw	r21,20(sp)
     f5c:	dd000417 	ldw	r20,16(sp)
     f60:	dcc00317 	ldw	r19,12(sp)
     f64:	dc800217 	ldw	r18,8(sp)
     f68:	dc400117 	ldw	r17,4(sp)
     f6c:	dc000017 	ldw	r16,0(sp)
     f70:	dec00a04 	addi	sp,sp,40
     f74:	f800283a 	ret
     f78:	00bffe04 	movi	r2,-8
     f7c:	18a2703a 	and	r17,r3,r2
     f80:	883fed16 	blt	r17,zero,f38 <_malloc_r+0x44>
     f84:	897fec36 	bltu	r17,r5,f38 <_malloc_r+0x44>
     f88:	9009883a 	mov	r4,r18
     f8c:	000b6b80 	call	b6b8 <__malloc_lock>
     f90:	00807dc4 	movi	r2,503
     f94:	14402b2e 	bgeu	r2,r17,1044 <_malloc_r+0x150>
     f98:	8806d27a 	srli	r3,r17,9
     f9c:	18003f1e 	bne	r3,zero,109c <_malloc_r+0x1a8>
     fa0:	880cd0fa 	srli	r6,r17,3
     fa4:	300490fa 	slli	r2,r6,3
     fa8:	02c00074 	movhi	r11,1
     fac:	5af81304 	addi	r11,r11,-8116
     fb0:	12cb883a 	add	r5,r2,r11
     fb4:	2c000317 	ldw	r16,12(r5)
     fb8:	580f883a 	mov	r7,r11
     fbc:	2c00041e 	bne	r5,r16,fd0 <_malloc_r+0xdc>
     fc0:	00000a06 	br	fec <_malloc_r+0xf8>
     fc4:	1800860e 	bge	r3,zero,11e0 <_malloc_r+0x2ec>
     fc8:	84000317 	ldw	r16,12(r16)
     fcc:	2c000726 	beq	r5,r16,fec <_malloc_r+0xf8>
     fd0:	80800117 	ldw	r2,4(r16)
     fd4:	00ffff04 	movi	r3,-4
     fd8:	10c8703a 	and	r4,r2,r3
     fdc:	2447c83a 	sub	r3,r4,r17
     fe0:	008003c4 	movi	r2,15
     fe4:	10fff70e 	bge	r2,r3,fc4 <_malloc_r+0xd0>
     fe8:	31bfffc4 	addi	r6,r6,-1
     fec:	32400044 	addi	r9,r6,1
     ff0:	02800074 	movhi	r10,1
     ff4:	52b81504 	addi	r10,r10,-8108
     ff8:	54000217 	ldw	r16,8(r10)
     ffc:	8280a026 	beq	r16,r10,1280 <_malloc_r+0x38c>
    1000:	80800117 	ldw	r2,4(r16)
    1004:	00ffff04 	movi	r3,-4
    1008:	10ca703a 	and	r5,r2,r3
    100c:	2c4dc83a 	sub	r6,r5,r17
    1010:	008003c4 	movi	r2,15
    1014:	11808316 	blt	r2,r6,1224 <_malloc_r+0x330>
    1018:	52800315 	stw	r10,12(r10)
    101c:	52800215 	stw	r10,8(r10)
    1020:	30002916 	blt	r6,zero,10c8 <_malloc_r+0x1d4>
    1024:	8147883a 	add	r3,r16,r5
    1028:	18800117 	ldw	r2,4(r3)
    102c:	9009883a 	mov	r4,r18
    1030:	10800054 	ori	r2,r2,1
    1034:	18800115 	stw	r2,4(r3)
    1038:	000b6d80 	call	b6d8 <__malloc_unlock>
    103c:	80c00204 	addi	r3,r16,8
    1040:	003fc006 	br	f44 <_malloc_r+0x50>
    1044:	02c00074 	movhi	r11,1
    1048:	5af81304 	addi	r11,r11,-8116
    104c:	8ac5883a 	add	r2,r17,r11
    1050:	14000317 	ldw	r16,12(r2)
    1054:	580f883a 	mov	r7,r11
    1058:	8806d0fa 	srli	r3,r17,3
    105c:	14006c26 	beq	r2,r16,1210 <_malloc_r+0x31c>
    1060:	80c00117 	ldw	r3,4(r16)
    1064:	00bfff04 	movi	r2,-4
    1068:	81800317 	ldw	r6,12(r16)
    106c:	1886703a 	and	r3,r3,r2
    1070:	80c7883a 	add	r3,r16,r3
    1074:	18800117 	ldw	r2,4(r3)
    1078:	81400217 	ldw	r5,8(r16)
    107c:	9009883a 	mov	r4,r18
    1080:	10800054 	ori	r2,r2,1
    1084:	18800115 	stw	r2,4(r3)
    1088:	31400215 	stw	r5,8(r6)
    108c:	29800315 	stw	r6,12(r5)
    1090:	000b6d80 	call	b6d8 <__malloc_unlock>
    1094:	80c00204 	addi	r3,r16,8
    1098:	003faa06 	br	f44 <_malloc_r+0x50>
    109c:	00800104 	movi	r2,4
    10a0:	10c0052e 	bgeu	r2,r3,10b8 <_malloc_r+0x1c4>
    10a4:	00800504 	movi	r2,20
    10a8:	10c07836 	bltu	r2,r3,128c <_malloc_r+0x398>
    10ac:	198016c4 	addi	r6,r3,91
    10b0:	300490fa 	slli	r2,r6,3
    10b4:	003fbc06 	br	fa8 <_malloc_r+0xb4>
    10b8:	8804d1ba 	srli	r2,r17,6
    10bc:	11800e04 	addi	r6,r2,56
    10c0:	300490fa 	slli	r2,r6,3
    10c4:	003fb806 	br	fa8 <_malloc_r+0xb4>
    10c8:	00807fc4 	movi	r2,511
    10cc:	1140bb36 	bltu	r2,r5,13bc <_malloc_r+0x4c8>
    10d0:	2806d0fa 	srli	r3,r5,3
    10d4:	573ffe04 	addi	fp,r10,-8
    10d8:	00800044 	movi	r2,1
    10dc:	180890fa 	slli	r4,r3,3
    10e0:	1807d0ba 	srai	r3,r3,2
    10e4:	e1c00117 	ldw	r7,4(fp)
    10e8:	5909883a 	add	r4,r11,r4
    10ec:	21400217 	ldw	r5,8(r4)
    10f0:	10c4983a 	sll	r2,r2,r3
    10f4:	81000315 	stw	r4,12(r16)
    10f8:	81400215 	stw	r5,8(r16)
    10fc:	388eb03a 	or	r7,r7,r2
    1100:	2c000315 	stw	r16,12(r5)
    1104:	24000215 	stw	r16,8(r4)
    1108:	e1c00115 	stw	r7,4(fp)
    110c:	4807883a 	mov	r3,r9
    1110:	4800cd16 	blt	r9,zero,1448 <_malloc_r+0x554>
    1114:	1807d0ba 	srai	r3,r3,2
    1118:	00800044 	movi	r2,1
    111c:	10c8983a 	sll	r4,r2,r3
    1120:	39004436 	bltu	r7,r4,1234 <_malloc_r+0x340>
    1124:	21c4703a 	and	r2,r4,r7
    1128:	10000a1e 	bne	r2,zero,1154 <_malloc_r+0x260>
    112c:	2109883a 	add	r4,r4,r4
    1130:	00bfff04 	movi	r2,-4
    1134:	4884703a 	and	r2,r9,r2
    1138:	3906703a 	and	r3,r7,r4
    113c:	12400104 	addi	r9,r2,4
    1140:	1800041e 	bne	r3,zero,1154 <_malloc_r+0x260>
    1144:	2109883a 	add	r4,r4,r4
    1148:	3904703a 	and	r2,r7,r4
    114c:	4a400104 	addi	r9,r9,4
    1150:	103ffc26 	beq	r2,zero,1144 <_malloc_r+0x250>
    1154:	480490fa 	slli	r2,r9,3
    1158:	4819883a 	mov	r12,r9
    115c:	023fff04 	movi	r8,-4
    1160:	589b883a 	add	r13,r11,r2
    1164:	6807883a 	mov	r3,r13
    1168:	014003c4 	movi	r5,15
    116c:	1c000317 	ldw	r16,12(r3)
    1170:	1c00041e 	bne	r3,r16,1184 <_malloc_r+0x290>
    1174:	0000a706 	br	1414 <_malloc_r+0x520>
    1178:	3000ab0e 	bge	r6,zero,1428 <_malloc_r+0x534>
    117c:	84000317 	ldw	r16,12(r16)
    1180:	1c00a426 	beq	r3,r16,1414 <_malloc_r+0x520>
    1184:	80800117 	ldw	r2,4(r16)
    1188:	1204703a 	and	r2,r2,r8
    118c:	144dc83a 	sub	r6,r2,r17
    1190:	29bff90e 	bge	r5,r6,1178 <_malloc_r+0x284>
    1194:	81000317 	ldw	r4,12(r16)
    1198:	80c00217 	ldw	r3,8(r16)
    119c:	89400054 	ori	r5,r17,1
    11a0:	8445883a 	add	r2,r16,r17
    11a4:	20c00215 	stw	r3,8(r4)
    11a8:	19000315 	stw	r4,12(r3)
    11ac:	81400115 	stw	r5,4(r16)
    11b0:	1187883a 	add	r3,r2,r6
    11b4:	31000054 	ori	r4,r6,1
    11b8:	50800315 	stw	r2,12(r10)
    11bc:	50800215 	stw	r2,8(r10)
    11c0:	19800015 	stw	r6,0(r3)
    11c4:	11000115 	stw	r4,4(r2)
    11c8:	12800215 	stw	r10,8(r2)
    11cc:	12800315 	stw	r10,12(r2)
    11d0:	9009883a 	mov	r4,r18
    11d4:	000b6d80 	call	b6d8 <__malloc_unlock>
    11d8:	80c00204 	addi	r3,r16,8
    11dc:	003f5906 	br	f44 <_malloc_r+0x50>
    11e0:	8109883a 	add	r4,r16,r4
    11e4:	20800117 	ldw	r2,4(r4)
    11e8:	80c00217 	ldw	r3,8(r16)
    11ec:	81400317 	ldw	r5,12(r16)
    11f0:	10800054 	ori	r2,r2,1
    11f4:	20800115 	stw	r2,4(r4)
    11f8:	28c00215 	stw	r3,8(r5)
    11fc:	19400315 	stw	r5,12(r3)
    1200:	9009883a 	mov	r4,r18
    1204:	000b6d80 	call	b6d8 <__malloc_unlock>
    1208:	80c00204 	addi	r3,r16,8
    120c:	003f4d06 	br	f44 <_malloc_r+0x50>
    1210:	80800204 	addi	r2,r16,8
    1214:	14000317 	ldw	r16,12(r2)
    1218:	143f911e 	bne	r2,r16,1060 <_malloc_r+0x16c>
    121c:	1a400084 	addi	r9,r3,2
    1220:	003f7306 	br	ff0 <_malloc_r+0xfc>
    1224:	88c00054 	ori	r3,r17,1
    1228:	8445883a 	add	r2,r16,r17
    122c:	80c00115 	stw	r3,4(r16)
    1230:	003fdf06 	br	11b0 <_malloc_r+0x2bc>
    1234:	e4000217 	ldw	r16,8(fp)
    1238:	00bfff04 	movi	r2,-4
    123c:	80c00117 	ldw	r3,4(r16)
    1240:	802d883a 	mov	r22,r16
    1244:	18aa703a 	and	r21,r3,r2
    1248:	ac401636 	bltu	r21,r17,12a4 <_malloc_r+0x3b0>
    124c:	ac49c83a 	sub	r4,r21,r17
    1250:	008003c4 	movi	r2,15
    1254:	1100130e 	bge	r2,r4,12a4 <_malloc_r+0x3b0>
    1258:	88800054 	ori	r2,r17,1
    125c:	8447883a 	add	r3,r16,r17
    1260:	80800115 	stw	r2,4(r16)
    1264:	20800054 	ori	r2,r4,1
    1268:	18800115 	stw	r2,4(r3)
    126c:	e0c00215 	stw	r3,8(fp)
    1270:	9009883a 	mov	r4,r18
    1274:	000b6d80 	call	b6d8 <__malloc_unlock>
    1278:	80c00204 	addi	r3,r16,8
    127c:	003f3106 	br	f44 <_malloc_r+0x50>
    1280:	39c00117 	ldw	r7,4(r7)
    1284:	573ffe04 	addi	fp,r10,-8
    1288:	003fa006 	br	110c <_malloc_r+0x218>
    128c:	00801504 	movi	r2,84
    1290:	10c06736 	bltu	r2,r3,1430 <_malloc_r+0x53c>
    1294:	8804d33a 	srli	r2,r17,12
    1298:	11801b84 	addi	r6,r2,110
    129c:	300490fa 	slli	r2,r6,3
    12a0:	003f4106 	br	fa8 <_malloc_r+0xb4>
    12a4:	d0a6ad17 	ldw	r2,-25932(gp)
    12a8:	d0e00317 	ldw	r3,-32756(gp)
    12ac:	053fffc4 	movi	r20,-1
    12b0:	10800404 	addi	r2,r2,16
    12b4:	88a7883a 	add	r19,r17,r2
    12b8:	1d000326 	beq	r3,r20,12c8 <_malloc_r+0x3d4>
    12bc:	98c3ffc4 	addi	r3,r19,4095
    12c0:	00bc0004 	movi	r2,-4096
    12c4:	18a6703a 	and	r19,r3,r2
    12c8:	9009883a 	mov	r4,r18
    12cc:	980b883a 	mov	r5,r19
    12d0:	00017840 	call	1784 <_sbrk_r>
    12d4:	1009883a 	mov	r4,r2
    12d8:	15000426 	beq	r2,r20,12ec <_malloc_r+0x3f8>
    12dc:	854b883a 	add	r5,r16,r21
    12e0:	1029883a 	mov	r20,r2
    12e4:	11405a2e 	bgeu	r2,r5,1450 <_malloc_r+0x55c>
    12e8:	87000c26 	beq	r16,fp,131c <_malloc_r+0x428>
    12ec:	e4000217 	ldw	r16,8(fp)
    12f0:	80c00117 	ldw	r3,4(r16)
    12f4:	00bfff04 	movi	r2,-4
    12f8:	1884703a 	and	r2,r3,r2
    12fc:	14400336 	bltu	r2,r17,130c <_malloc_r+0x418>
    1300:	1449c83a 	sub	r4,r2,r17
    1304:	008003c4 	movi	r2,15
    1308:	113fd316 	blt	r2,r4,1258 <_malloc_r+0x364>
    130c:	9009883a 	mov	r4,r18
    1310:	000b6d80 	call	b6d8 <__malloc_unlock>
    1314:	0007883a 	mov	r3,zero
    1318:	003f0a06 	br	f44 <_malloc_r+0x50>
    131c:	05c00074 	movhi	r23,1
    1320:	bdc45a04 	addi	r23,r23,4456
    1324:	b8800017 	ldw	r2,0(r23)
    1328:	988d883a 	add	r6,r19,r2
    132c:	b9800015 	stw	r6,0(r23)
    1330:	d0e00317 	ldw	r3,-32756(gp)
    1334:	00bfffc4 	movi	r2,-1
    1338:	18808e26 	beq	r3,r2,1574 <_malloc_r+0x680>
    133c:	2145c83a 	sub	r2,r4,r5
    1340:	3085883a 	add	r2,r6,r2
    1344:	b8800015 	stw	r2,0(r23)
    1348:	20c001cc 	andi	r3,r4,7
    134c:	18005f1e 	bne	r3,zero,14cc <_malloc_r+0x5d8>
    1350:	000b883a 	mov	r5,zero
    1354:	a4c5883a 	add	r2,r20,r19
    1358:	1083ffcc 	andi	r2,r2,4095
    135c:	00c40004 	movi	r3,4096
    1360:	1887c83a 	sub	r3,r3,r2
    1364:	28e7883a 	add	r19,r5,r3
    1368:	9009883a 	mov	r4,r18
    136c:	980b883a 	mov	r5,r19
    1370:	00017840 	call	1784 <_sbrk_r>
    1374:	1007883a 	mov	r3,r2
    1378:	00bfffc4 	movi	r2,-1
    137c:	18807a26 	beq	r3,r2,1568 <_malloc_r+0x674>
    1380:	1d05c83a 	sub	r2,r3,r20
    1384:	9885883a 	add	r2,r19,r2
    1388:	10c00054 	ori	r3,r2,1
    138c:	b8800017 	ldw	r2,0(r23)
    1390:	a021883a 	mov	r16,r20
    1394:	a0c00115 	stw	r3,4(r20)
    1398:	9885883a 	add	r2,r19,r2
    139c:	b8800015 	stw	r2,0(r23)
    13a0:	e5000215 	stw	r20,8(fp)
    13a4:	b7003626 	beq	r22,fp,1480 <_malloc_r+0x58c>
    13a8:	018003c4 	movi	r6,15
    13ac:	35404b36 	bltu	r6,r21,14dc <_malloc_r+0x5e8>
    13b0:	00800044 	movi	r2,1
    13b4:	a0800115 	stw	r2,4(r20)
    13b8:	003fcd06 	br	12f0 <_malloc_r+0x3fc>
    13bc:	2808d27a 	srli	r4,r5,9
    13c0:	2000371e 	bne	r4,zero,14a0 <_malloc_r+0x5ac>
    13c4:	2808d0fa 	srli	r4,r5,3
    13c8:	200690fa 	slli	r3,r4,3
    13cc:	1ad1883a 	add	r8,r3,r11
    13d0:	41800217 	ldw	r6,8(r8)
    13d4:	41805b26 	beq	r8,r6,1544 <_malloc_r+0x650>
    13d8:	30800117 	ldw	r2,4(r6)
    13dc:	00ffff04 	movi	r3,-4
    13e0:	10c4703a 	and	r2,r2,r3
    13e4:	2880022e 	bgeu	r5,r2,13f0 <_malloc_r+0x4fc>
    13e8:	31800217 	ldw	r6,8(r6)
    13ec:	41bffa1e 	bne	r8,r6,13d8 <_malloc_r+0x4e4>
    13f0:	32000317 	ldw	r8,12(r6)
    13f4:	39c00117 	ldw	r7,4(r7)
    13f8:	82000315 	stw	r8,12(r16)
    13fc:	81800215 	stw	r6,8(r16)
    1400:	07000074 	movhi	fp,1
    1404:	e7381304 	addi	fp,fp,-8116
    1408:	34000315 	stw	r16,12(r6)
    140c:	44000215 	stw	r16,8(r8)
    1410:	003f3e06 	br	110c <_malloc_r+0x218>
    1414:	63000044 	addi	r12,r12,1
    1418:	608000cc 	andi	r2,r12,3
    141c:	10005d26 	beq	r2,zero,1594 <_malloc_r+0x6a0>
    1420:	18c00204 	addi	r3,r3,8
    1424:	003f5106 	br	116c <_malloc_r+0x278>
    1428:	8089883a 	add	r4,r16,r2
    142c:	003f6d06 	br	11e4 <_malloc_r+0x2f0>
    1430:	00805504 	movi	r2,340
    1434:	10c02036 	bltu	r2,r3,14b8 <_malloc_r+0x5c4>
    1438:	8804d3fa 	srli	r2,r17,15
    143c:	11801dc4 	addi	r6,r2,119
    1440:	300490fa 	slli	r2,r6,3
    1444:	003ed806 	br	fa8 <_malloc_r+0xb4>
    1448:	48c000c4 	addi	r3,r9,3
    144c:	003f3106 	br	1114 <_malloc_r+0x220>
    1450:	05c00074 	movhi	r23,1
    1454:	bdc45a04 	addi	r23,r23,4456
    1458:	b8800017 	ldw	r2,0(r23)
    145c:	988d883a 	add	r6,r19,r2
    1460:	b9800015 	stw	r6,0(r23)
    1464:	293fb21e 	bne	r5,r4,1330 <_malloc_r+0x43c>
    1468:	2083ffcc 	andi	r2,r4,4095
    146c:	103fb01e 	bne	r2,zero,1330 <_malloc_r+0x43c>
    1470:	e4000217 	ldw	r16,8(fp)
    1474:	9d45883a 	add	r2,r19,r21
    1478:	10800054 	ori	r2,r2,1
    147c:	80800115 	stw	r2,4(r16)
    1480:	b8c00017 	ldw	r3,0(r23)
    1484:	d0a6ae17 	ldw	r2,-25928(gp)
    1488:	10c0012e 	bgeu	r2,r3,1490 <_malloc_r+0x59c>
    148c:	d0e6ae15 	stw	r3,-25928(gp)
    1490:	d0a6af17 	ldw	r2,-25924(gp)
    1494:	10ff962e 	bgeu	r2,r3,12f0 <_malloc_r+0x3fc>
    1498:	d0e6af15 	stw	r3,-25924(gp)
    149c:	003f9406 	br	12f0 <_malloc_r+0x3fc>
    14a0:	00800104 	movi	r2,4
    14a4:	11001e36 	bltu	r2,r4,1520 <_malloc_r+0x62c>
    14a8:	2804d1ba 	srli	r2,r5,6
    14ac:	11000e04 	addi	r4,r2,56
    14b0:	200690fa 	slli	r3,r4,3
    14b4:	003fc506 	br	13cc <_malloc_r+0x4d8>
    14b8:	00815504 	movi	r2,1364
    14bc:	10c01d2e 	bgeu	r2,r3,1534 <_malloc_r+0x640>
    14c0:	01801f84 	movi	r6,126
    14c4:	0080fc04 	movi	r2,1008
    14c8:	003eb706 	br	fa8 <_malloc_r+0xb4>
    14cc:	00800204 	movi	r2,8
    14d0:	10cbc83a 	sub	r5,r2,r3
    14d4:	2169883a 	add	r20,r4,r5
    14d8:	003f9e06 	br	1354 <_malloc_r+0x460>
    14dc:	00bffe04 	movi	r2,-8
    14e0:	a93ffd04 	addi	r4,r21,-12
    14e4:	2088703a 	and	r4,r4,r2
    14e8:	b10b883a 	add	r5,r22,r4
    14ec:	00c00144 	movi	r3,5
    14f0:	28c00215 	stw	r3,8(r5)
    14f4:	28c00115 	stw	r3,4(r5)
    14f8:	b0800117 	ldw	r2,4(r22)
    14fc:	1080004c 	andi	r2,r2,1
    1500:	2084b03a 	or	r2,r4,r2
    1504:	b0800115 	stw	r2,4(r22)
    1508:	313fdd2e 	bgeu	r6,r4,1480 <_malloc_r+0x58c>
    150c:	b1400204 	addi	r5,r22,8
    1510:	9009883a 	mov	r4,r18
    1514:	00058e00 	call	58e0 <_free_r>
    1518:	e4000217 	ldw	r16,8(fp)
    151c:	003fd806 	br	1480 <_malloc_r+0x58c>
    1520:	00800504 	movi	r2,20
    1524:	11001536 	bltu	r2,r4,157c <_malloc_r+0x688>
    1528:	210016c4 	addi	r4,r4,91
    152c:	200690fa 	slli	r3,r4,3
    1530:	003fa606 	br	13cc <_malloc_r+0x4d8>
    1534:	8804d4ba 	srli	r2,r17,18
    1538:	11801f04 	addi	r6,r2,124
    153c:	300490fa 	slli	r2,r6,3
    1540:	003e9906 	br	fa8 <_malloc_r+0xb4>
    1544:	2009d0ba 	srai	r4,r4,2
    1548:	01400074 	movhi	r5,1
    154c:	29781304 	addi	r5,r5,-8116
    1550:	00c00044 	movi	r3,1
    1554:	28800117 	ldw	r2,4(r5)
    1558:	1906983a 	sll	r3,r3,r4
    155c:	10c4b03a 	or	r2,r2,r3
    1560:	28800115 	stw	r2,4(r5)
    1564:	003fa306 	br	13f4 <_malloc_r+0x500>
    1568:	0027883a 	mov	r19,zero
    156c:	00c00044 	movi	r3,1
    1570:	003f8606 	br	138c <_malloc_r+0x498>
    1574:	d1200315 	stw	r4,-32756(gp)
    1578:	003f7306 	br	1348 <_malloc_r+0x454>
    157c:	00801504 	movi	r2,84
    1580:	11001936 	bltu	r2,r4,15e8 <_malloc_r+0x6f4>
    1584:	2804d33a 	srli	r2,r5,12
    1588:	11001b84 	addi	r4,r2,110
    158c:	200690fa 	slli	r3,r4,3
    1590:	003f8e06 	br	13cc <_malloc_r+0x4d8>
    1594:	480b883a 	mov	r5,r9
    1598:	6807883a 	mov	r3,r13
    159c:	288000cc 	andi	r2,r5,3
    15a0:	18fffe04 	addi	r3,r3,-8
    15a4:	297fffc4 	addi	r5,r5,-1
    15a8:	10001526 	beq	r2,zero,1600 <_malloc_r+0x70c>
    15ac:	18800217 	ldw	r2,8(r3)
    15b0:	10fffa26 	beq	r2,r3,159c <_malloc_r+0x6a8>
    15b4:	2109883a 	add	r4,r4,r4
    15b8:	393f1e36 	bltu	r7,r4,1234 <_malloc_r+0x340>
    15bc:	203f1d26 	beq	r4,zero,1234 <_malloc_r+0x340>
    15c0:	21c4703a 	and	r2,r4,r7
    15c4:	10000226 	beq	r2,zero,15d0 <_malloc_r+0x6dc>
    15c8:	6013883a 	mov	r9,r12
    15cc:	003ee106 	br	1154 <_malloc_r+0x260>
    15d0:	2109883a 	add	r4,r4,r4
    15d4:	3904703a 	and	r2,r7,r4
    15d8:	63000104 	addi	r12,r12,4
    15dc:	103ffc26 	beq	r2,zero,15d0 <_malloc_r+0x6dc>
    15e0:	6013883a 	mov	r9,r12
    15e4:	003edb06 	br	1154 <_malloc_r+0x260>
    15e8:	00805504 	movi	r2,340
    15ec:	11000836 	bltu	r2,r4,1610 <_malloc_r+0x71c>
    15f0:	2804d3fa 	srli	r2,r5,15
    15f4:	11001dc4 	addi	r4,r2,119
    15f8:	200690fa 	slli	r3,r4,3
    15fc:	003f7306 	br	13cc <_malloc_r+0x4d8>
    1600:	0104303a 	nor	r2,zero,r4
    1604:	388e703a 	and	r7,r7,r2
    1608:	e1c00115 	stw	r7,4(fp)
    160c:	003fe906 	br	15b4 <_malloc_r+0x6c0>
    1610:	00815504 	movi	r2,1364
    1614:	1100032e 	bgeu	r2,r4,1624 <_malloc_r+0x730>
    1618:	01001f84 	movi	r4,126
    161c:	00c0fc04 	movi	r3,1008
    1620:	003f6a06 	br	13cc <_malloc_r+0x4d8>
    1624:	2804d4ba 	srli	r2,r5,18
    1628:	11001f04 	addi	r4,r2,124
    162c:	200690fa 	slli	r3,r4,3
    1630:	003f6606 	br	13cc <_malloc_r+0x4d8>

00001634 <printf>:
    1634:	defffb04 	addi	sp,sp,-20
    1638:	dfc00115 	stw	ra,4(sp)
    163c:	d9400215 	stw	r5,8(sp)
    1640:	d9800315 	stw	r6,12(sp)
    1644:	d9c00415 	stw	r7,16(sp)
    1648:	00800074 	movhi	r2,1
    164c:	10bd9a04 	addi	r2,r2,-2456
    1650:	10c00017 	ldw	r3,0(r2)
    1654:	200b883a 	mov	r5,r4
    1658:	d8800204 	addi	r2,sp,8
    165c:	19000217 	ldw	r4,8(r3)
    1660:	100d883a 	mov	r6,r2
    1664:	d8800015 	stw	r2,0(sp)
    1668:	00037840 	call	3784 <__vfprintf_internal>
    166c:	dfc00117 	ldw	ra,4(sp)
    1670:	dec00504 	addi	sp,sp,20
    1674:	f800283a 	ret

00001678 <_printf_r>:
    1678:	defffc04 	addi	sp,sp,-16
    167c:	dfc00115 	stw	ra,4(sp)
    1680:	d9800215 	stw	r6,8(sp)
    1684:	d9c00315 	stw	r7,12(sp)
    1688:	280d883a 	mov	r6,r5
    168c:	21400217 	ldw	r5,8(r4)
    1690:	d8c00204 	addi	r3,sp,8
    1694:	180f883a 	mov	r7,r3
    1698:	d8c00015 	stw	r3,0(sp)
    169c:	00018c00 	call	18c0 <___vfprintf_internal_r>
    16a0:	dfc00117 	ldw	ra,4(sp)
    16a4:	dec00404 	addi	sp,sp,16
    16a8:	f800283a 	ret

000016ac <putchar>:
    16ac:	00800074 	movhi	r2,1
    16b0:	10bd9a04 	addi	r2,r2,-2456
    16b4:	11800017 	ldw	r6,0(r2)
    16b8:	200b883a 	mov	r5,r4
    16bc:	3009883a 	mov	r4,r6
    16c0:	31800217 	ldw	r6,8(r6)
    16c4:	00078f41 	jmpi	78f4 <_putc_r>

000016c8 <_putchar_r>:
    16c8:	21800217 	ldw	r6,8(r4)
    16cc:	00078f41 	jmpi	78f4 <_putc_r>

000016d0 <_puts_r>:
    16d0:	defff604 	addi	sp,sp,-40
    16d4:	dc400715 	stw	r17,28(sp)
    16d8:	2023883a 	mov	r17,r4
    16dc:	2809883a 	mov	r4,r5
    16e0:	dfc00915 	stw	ra,36(sp)
    16e4:	dcc00815 	stw	r19,32(sp)
    16e8:	2827883a 	mov	r19,r5
    16ec:	00017f40 	call	17f4 <strlen>
    16f0:	89400217 	ldw	r5,8(r17)
    16f4:	00c00074 	movhi	r3,1
    16f8:	18f64504 	addi	r3,r3,-9964
    16fc:	01c00044 	movi	r7,1
    1700:	12000044 	addi	r8,r2,1
    1704:	d8c00515 	stw	r3,20(sp)
    1708:	d9c00615 	stw	r7,24(sp)
    170c:	d8c00304 	addi	r3,sp,12
    1710:	01c00084 	movi	r7,2
    1714:	8809883a 	mov	r4,r17
    1718:	d80d883a 	mov	r6,sp
    171c:	d8c00015 	stw	r3,0(sp)
    1720:	dcc00315 	stw	r19,12(sp)
    1724:	da000215 	stw	r8,8(sp)
    1728:	d9c00115 	stw	r7,4(sp)
    172c:	d8800415 	stw	r2,16(sp)
    1730:	0005bf40 	call	5bf4 <__sfvwrite_r>
    1734:	00ffffc4 	movi	r3,-1
    1738:	10000626 	beq	r2,zero,1754 <_puts_r+0x84>
    173c:	1805883a 	mov	r2,r3
    1740:	dfc00917 	ldw	ra,36(sp)
    1744:	dcc00817 	ldw	r19,32(sp)
    1748:	dc400717 	ldw	r17,28(sp)
    174c:	dec00a04 	addi	sp,sp,40
    1750:	f800283a 	ret
    1754:	00c00284 	movi	r3,10
    1758:	1805883a 	mov	r2,r3
    175c:	dfc00917 	ldw	ra,36(sp)
    1760:	dcc00817 	ldw	r19,32(sp)
    1764:	dc400717 	ldw	r17,28(sp)
    1768:	dec00a04 	addi	sp,sp,40
    176c:	f800283a 	ret

00001770 <puts>:
    1770:	00800074 	movhi	r2,1
    1774:	10bd9a04 	addi	r2,r2,-2456
    1778:	200b883a 	mov	r5,r4
    177c:	11000017 	ldw	r4,0(r2)
    1780:	00016d01 	jmpi	16d0 <_puts_r>

00001784 <_sbrk_r>:
    1784:	defffd04 	addi	sp,sp,-12
    1788:	dc000015 	stw	r16,0(sp)
    178c:	04000074 	movhi	r16,1
    1790:	84044a04 	addi	r16,r16,4392
    1794:	dc400115 	stw	r17,4(sp)
    1798:	80000015 	stw	zero,0(r16)
    179c:	2023883a 	mov	r17,r4
    17a0:	2809883a 	mov	r4,r5
    17a4:	dfc00215 	stw	ra,8(sp)
    17a8:	000b8f40 	call	b8f4 <sbrk>
    17ac:	1007883a 	mov	r3,r2
    17b0:	00bfffc4 	movi	r2,-1
    17b4:	18800626 	beq	r3,r2,17d0 <_sbrk_r+0x4c>
    17b8:	1805883a 	mov	r2,r3
    17bc:	dfc00217 	ldw	ra,8(sp)
    17c0:	dc400117 	ldw	r17,4(sp)
    17c4:	dc000017 	ldw	r16,0(sp)
    17c8:	dec00304 	addi	sp,sp,12
    17cc:	f800283a 	ret
    17d0:	80800017 	ldw	r2,0(r16)
    17d4:	103ff826 	beq	r2,zero,17b8 <_sbrk_r+0x34>
    17d8:	88800015 	stw	r2,0(r17)
    17dc:	1805883a 	mov	r2,r3
    17e0:	dfc00217 	ldw	ra,8(sp)
    17e4:	dc400117 	ldw	r17,4(sp)
    17e8:	dc000017 	ldw	r16,0(sp)
    17ec:	dec00304 	addi	sp,sp,12
    17f0:	f800283a 	ret

000017f4 <strlen>:
    17f4:	208000cc 	andi	r2,r4,3
    17f8:	2011883a 	mov	r8,r4
    17fc:	1000161e 	bne	r2,zero,1858 <strlen+0x64>
    1800:	20c00017 	ldw	r3,0(r4)
    1804:	017fbff4 	movhi	r5,65279
    1808:	297fbfc4 	addi	r5,r5,-257
    180c:	01e02074 	movhi	r7,32897
    1810:	39e02004 	addi	r7,r7,-32640
    1814:	1945883a 	add	r2,r3,r5
    1818:	11c4703a 	and	r2,r2,r7
    181c:	00c6303a 	nor	r3,zero,r3
    1820:	1886703a 	and	r3,r3,r2
    1824:	18000c1e 	bne	r3,zero,1858 <strlen+0x64>
    1828:	280d883a 	mov	r6,r5
    182c:	380b883a 	mov	r5,r7
    1830:	21000104 	addi	r4,r4,4
    1834:	20800017 	ldw	r2,0(r4)
    1838:	1187883a 	add	r3,r2,r6
    183c:	1946703a 	and	r3,r3,r5
    1840:	0084303a 	nor	r2,zero,r2
    1844:	10c4703a 	and	r2,r2,r3
    1848:	103ff926 	beq	r2,zero,1830 <strlen+0x3c>
    184c:	20800007 	ldb	r2,0(r4)
    1850:	10000326 	beq	r2,zero,1860 <strlen+0x6c>
    1854:	21000044 	addi	r4,r4,1
    1858:	20800007 	ldb	r2,0(r4)
    185c:	103ffd1e 	bne	r2,zero,1854 <strlen+0x60>
    1860:	2205c83a 	sub	r2,r4,r8
    1864:	f800283a 	ret

00001868 <__sprint_r>:
    1868:	30800217 	ldw	r2,8(r6)
    186c:	defffe04 	addi	sp,sp,-8
    1870:	dc000015 	stw	r16,0(sp)
    1874:	dfc00115 	stw	ra,4(sp)
    1878:	3021883a 	mov	r16,r6
    187c:	0007883a 	mov	r3,zero
    1880:	1000061e 	bne	r2,zero,189c <__sprint_r+0x34>
    1884:	1805883a 	mov	r2,r3
    1888:	30000115 	stw	zero,4(r6)
    188c:	dfc00117 	ldw	ra,4(sp)
    1890:	dc000017 	ldw	r16,0(sp)
    1894:	dec00204 	addi	sp,sp,8
    1898:	f800283a 	ret
    189c:	0005bf40 	call	5bf4 <__sfvwrite_r>
    18a0:	1007883a 	mov	r3,r2
    18a4:	1805883a 	mov	r2,r3
    18a8:	80000115 	stw	zero,4(r16)
    18ac:	80000215 	stw	zero,8(r16)
    18b0:	dfc00117 	ldw	ra,4(sp)
    18b4:	dc000017 	ldw	r16,0(sp)
    18b8:	dec00204 	addi	sp,sp,8
    18bc:	f800283a 	ret

000018c0 <___vfprintf_internal_r>:
    18c0:	defea404 	addi	sp,sp,-1392
    18c4:	dd815815 	stw	r22,1376(sp)
    18c8:	dc015215 	stw	r16,1352(sp)
    18cc:	d9c15115 	stw	r7,1348(sp)
    18d0:	dfc15b15 	stw	ra,1388(sp)
    18d4:	df015a15 	stw	fp,1384(sp)
    18d8:	ddc15915 	stw	r23,1380(sp)
    18dc:	dd415715 	stw	r21,1372(sp)
    18e0:	dd015615 	stw	r20,1368(sp)
    18e4:	dcc15515 	stw	r19,1364(sp)
    18e8:	dc815415 	stw	r18,1360(sp)
    18ec:	dc415315 	stw	r17,1356(sp)
    18f0:	282d883a 	mov	r22,r5
    18f4:	3021883a 	mov	r16,r6
    18f8:	d9014f15 	stw	r4,1340(sp)
    18fc:	00062180 	call	6218 <_localeconv_r>
    1900:	10800017 	ldw	r2,0(r2)
    1904:	d9c15117 	ldw	r7,1348(sp)
    1908:	d8814915 	stw	r2,1316(sp)
    190c:	d8814f17 	ldw	r2,1340(sp)
    1910:	10000226 	beq	r2,zero,191c <___vfprintf_internal_r+0x5c>
    1914:	10800e17 	ldw	r2,56(r2)
    1918:	10020d26 	beq	r2,zero,2150 <___vfprintf_internal_r+0x890>
    191c:	b080030b 	ldhu	r2,12(r22)
    1920:	1080020c 	andi	r2,r2,8
    1924:	10020e26 	beq	r2,zero,2160 <___vfprintf_internal_r+0x8a0>
    1928:	b0800417 	ldw	r2,16(r22)
    192c:	10020c26 	beq	r2,zero,2160 <___vfprintf_internal_r+0x8a0>
    1930:	b200030b 	ldhu	r8,12(r22)
    1934:	00800284 	movi	r2,10
    1938:	40c0068c 	andi	r3,r8,26
    193c:	18802f1e 	bne	r3,r2,19fc <___vfprintf_internal_r+0x13c>
    1940:	b080038f 	ldh	r2,14(r22)
    1944:	10002d16 	blt	r2,zero,19fc <___vfprintf_internal_r+0x13c>
    1948:	b240038b 	ldhu	r9,14(r22)
    194c:	b2800717 	ldw	r10,28(r22)
    1950:	b2c00917 	ldw	r11,36(r22)
    1954:	d9014f17 	ldw	r4,1340(sp)
    1958:	dc402904 	addi	r17,sp,164
    195c:	d8804004 	addi	r2,sp,256
    1960:	00c10004 	movi	r3,1024
    1964:	423fff4c 	andi	r8,r8,65533
    1968:	800d883a 	mov	r6,r16
    196c:	880b883a 	mov	r5,r17
    1970:	da002c0d 	sth	r8,176(sp)
    1974:	da402c8d 	sth	r9,178(sp)
    1978:	da803015 	stw	r10,192(sp)
    197c:	dac03215 	stw	r11,200(sp)
    1980:	d8802d15 	stw	r2,180(sp)
    1984:	d8c02e15 	stw	r3,184(sp)
    1988:	d8802915 	stw	r2,164(sp)
    198c:	d8c02b15 	stw	r3,172(sp)
    1990:	d8002f15 	stw	zero,188(sp)
    1994:	00018c00 	call	18c0 <___vfprintf_internal_r>
    1998:	d8814b15 	stw	r2,1324(sp)
    199c:	10000416 	blt	r2,zero,19b0 <___vfprintf_internal_r+0xf0>
    19a0:	d9014f17 	ldw	r4,1340(sp)
    19a4:	880b883a 	mov	r5,r17
    19a8:	00052900 	call	5290 <_fflush_r>
    19ac:	1002321e 	bne	r2,zero,2278 <___vfprintf_internal_r+0x9b8>
    19b0:	d8802c0b 	ldhu	r2,176(sp)
    19b4:	1080100c 	andi	r2,r2,64
    19b8:	10000326 	beq	r2,zero,19c8 <___vfprintf_internal_r+0x108>
    19bc:	b080030b 	ldhu	r2,12(r22)
    19c0:	10801014 	ori	r2,r2,64
    19c4:	b080030d 	sth	r2,12(r22)
    19c8:	d8814b17 	ldw	r2,1324(sp)
    19cc:	dfc15b17 	ldw	ra,1388(sp)
    19d0:	df015a17 	ldw	fp,1384(sp)
    19d4:	ddc15917 	ldw	r23,1380(sp)
    19d8:	dd815817 	ldw	r22,1376(sp)
    19dc:	dd415717 	ldw	r21,1372(sp)
    19e0:	dd015617 	ldw	r20,1368(sp)
    19e4:	dcc15517 	ldw	r19,1364(sp)
    19e8:	dc815417 	ldw	r18,1360(sp)
    19ec:	dc415317 	ldw	r17,1356(sp)
    19f0:	dc015217 	ldw	r16,1352(sp)
    19f4:	dec15c04 	addi	sp,sp,1392
    19f8:	f800283a 	ret
    19fc:	0005883a 	mov	r2,zero
    1a00:	0007883a 	mov	r3,zero
    1a04:	dd401904 	addi	r21,sp,100
    1a08:	d8814215 	stw	r2,1288(sp)
    1a0c:	802f883a 	mov	r23,r16
    1a10:	d8c14315 	stw	r3,1292(sp)
    1a14:	d8014b15 	stw	zero,1324(sp)
    1a18:	d8014815 	stw	zero,1312(sp)
    1a1c:	d8014415 	stw	zero,1296(sp)
    1a20:	d8014715 	stw	zero,1308(sp)
    1a24:	dd400c15 	stw	r21,48(sp)
    1a28:	d8000e15 	stw	zero,56(sp)
    1a2c:	d8000d15 	stw	zero,52(sp)
    1a30:	b8800007 	ldb	r2,0(r23)
    1a34:	10001926 	beq	r2,zero,1a9c <___vfprintf_internal_r+0x1dc>
    1a38:	00c00944 	movi	r3,37
    1a3c:	10c01726 	beq	r2,r3,1a9c <___vfprintf_internal_r+0x1dc>
    1a40:	b821883a 	mov	r16,r23
    1a44:	00000106 	br	1a4c <___vfprintf_internal_r+0x18c>
    1a48:	10c00326 	beq	r2,r3,1a58 <___vfprintf_internal_r+0x198>
    1a4c:	84000044 	addi	r16,r16,1
    1a50:	80800007 	ldb	r2,0(r16)
    1a54:	103ffc1e 	bne	r2,zero,1a48 <___vfprintf_internal_r+0x188>
    1a58:	85e7c83a 	sub	r19,r16,r23
    1a5c:	98000e26 	beq	r19,zero,1a98 <___vfprintf_internal_r+0x1d8>
    1a60:	dc800e17 	ldw	r18,56(sp)
    1a64:	dc400d17 	ldw	r17,52(sp)
    1a68:	008001c4 	movi	r2,7
    1a6c:	94e5883a 	add	r18,r18,r19
    1a70:	8c400044 	addi	r17,r17,1
    1a74:	adc00015 	stw	r23,0(r21)
    1a78:	dc800e15 	stw	r18,56(sp)
    1a7c:	acc00115 	stw	r19,4(r21)
    1a80:	dc400d15 	stw	r17,52(sp)
    1a84:	14428b16 	blt	r2,r17,24b4 <___vfprintf_internal_r+0xbf4>
    1a88:	ad400204 	addi	r21,r21,8
    1a8c:	d9014b17 	ldw	r4,1324(sp)
    1a90:	24c9883a 	add	r4,r4,r19
    1a94:	d9014b15 	stw	r4,1324(sp)
    1a98:	802f883a 	mov	r23,r16
    1a9c:	b8800007 	ldb	r2,0(r23)
    1aa0:	10013c26 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x6d4>
    1aa4:	bdc00044 	addi	r23,r23,1
    1aa8:	d8000405 	stb	zero,16(sp)
    1aac:	b8c00007 	ldb	r3,0(r23)
    1ab0:	04ffffc4 	movi	r19,-1
    1ab4:	d8014c15 	stw	zero,1328(sp)
    1ab8:	d8014a15 	stw	zero,1320(sp)
    1abc:	d8c14d15 	stw	r3,1332(sp)
    1ac0:	bdc00044 	addi	r23,r23,1
    1ac4:	d9414d17 	ldw	r5,1332(sp)
    1ac8:	00801604 	movi	r2,88
    1acc:	28fff804 	addi	r3,r5,-32
    1ad0:	10c06036 	bltu	r2,r3,1c54 <___vfprintf_internal_r+0x394>
    1ad4:	18c5883a 	add	r2,r3,r3
    1ad8:	1085883a 	add	r2,r2,r2
    1adc:	00c00034 	movhi	r3,0
    1ae0:	18c6bc04 	addi	r3,r3,6896
    1ae4:	10c5883a 	add	r2,r2,r3
    1ae8:	11000017 	ldw	r4,0(r2)
    1aec:	2000683a 	jmp	r4
    1af0:	00002a64 	muli	zero,zero,169
    1af4:	00001c54 	movui	zero,113
    1af8:	00001c54 	movui	zero,113
    1afc:	00002a50 	cmplti	zero,zero,169
    1b00:	00001c54 	movui	zero,113
    1b04:	00001c54 	movui	zero,113
    1b08:	00001c54 	movui	zero,113
    1b0c:	00001c54 	movui	zero,113
    1b10:	00001c54 	movui	zero,113
    1b14:	00001c54 	movui	zero,113
    1b18:	00002830 	cmpltui	zero,zero,160
    1b1c:	00002a40 	call	2a4 <myinterrupt_handler+0x50>
    1b20:	00001c54 	movui	zero,113
    1b24:	00002848 	cmpgei	zero,zero,161
    1b28:	00002ae8 	cmpgeui	zero,zero,171
    1b2c:	00001c54 	movui	zero,113
    1b30:	00002ad4 	movui	zero,171
    1b34:	00002a90 	cmplti	zero,zero,170
    1b38:	00002a90 	cmplti	zero,zero,170
    1b3c:	00002a90 	cmplti	zero,zero,170
    1b40:	00002a90 	cmplti	zero,zero,170
    1b44:	00002a90 	cmplti	zero,zero,170
    1b48:	00002a90 	cmplti	zero,zero,170
    1b4c:	00002a90 	cmplti	zero,zero,170
    1b50:	00002a90 	cmplti	zero,zero,170
    1b54:	00002a90 	cmplti	zero,zero,170
    1b58:	00001c54 	movui	zero,113
    1b5c:	00001c54 	movui	zero,113
    1b60:	00001c54 	movui	zero,113
    1b64:	00001c54 	movui	zero,113
    1b68:	00001c54 	movui	zero,113
    1b6c:	00001c54 	movui	zero,113
    1b70:	00001c54 	movui	zero,113
    1b74:	00001c54 	movui	zero,113
    1b78:	00001c54 	movui	zero,113
    1b7c:	00001c54 	movui	zero,113
    1b80:	000022ac 	andhi	zero,zero,138
    1b84:	00002918 	cmpnei	zero,zero,164
    1b88:	00001c54 	movui	zero,113
    1b8c:	00002918 	cmpnei	zero,zero,164
    1b90:	00001c54 	movui	zero,113
    1b94:	00001c54 	movui	zero,113
    1b98:	00001c54 	movui	zero,113
    1b9c:	00001c54 	movui	zero,113
    1ba0:	00002a7c 	xorhi	zero,zero,169
    1ba4:	00001c54 	movui	zero,113
    1ba8:	00001c54 	movui	zero,113
    1bac:	00002360 	cmpeqi	zero,zero,141
    1bb0:	00001c54 	movui	zero,113
    1bb4:	00001c54 	movui	zero,113
    1bb8:	00001c54 	movui	zero,113
    1bbc:	00001c54 	movui	zero,113
    1bc0:	00001c54 	movui	zero,113
    1bc4:	000023ac 	andhi	zero,zero,142
    1bc8:	00001c54 	movui	zero,113
    1bcc:	00001c54 	movui	zero,113
    1bd0:	000029cc 	andi	zero,zero,167
    1bd4:	00001c54 	movui	zero,113
    1bd8:	00001c54 	movui	zero,113
    1bdc:	00001c54 	movui	zero,113
    1be0:	00001c54 	movui	zero,113
    1be4:	00001c54 	movui	zero,113
    1be8:	00001c54 	movui	zero,113
    1bec:	00001c54 	movui	zero,113
    1bf0:	00001c54 	movui	zero,113
    1bf4:	00001c54 	movui	zero,113
    1bf8:	00001c54 	movui	zero,113
    1bfc:	000029a0 	cmpeqi	zero,zero,166
    1c00:	000022b8 	rdprs	zero,zero,138
    1c04:	00002918 	cmpnei	zero,zero,164
    1c08:	00002918 	cmpnei	zero,zero,164
    1c0c:	00002918 	cmpnei	zero,zero,164
    1c10:	00002904 	movi	zero,164
    1c14:	000022b8 	rdprs	zero,zero,138
    1c18:	00001c54 	movui	zero,113
    1c1c:	00001c54 	movui	zero,113
    1c20:	0000288c 	andi	zero,zero,162
    1c24:	00001c54 	movui	zero,113
    1c28:	0000285c 	xori	zero,zero,161
    1c2c:	0000236c 	andhi	zero,zero,141
    1c30:	000028bc 	xorhi	zero,zero,162
    1c34:	000028a8 	cmpgeui	zero,zero,162
    1c38:	00001c54 	movui	zero,113
    1c3c:	00002b50 	cmplti	zero,zero,173
    1c40:	00001c54 	movui	zero,113
    1c44:	000023b8 	rdprs	zero,zero,142
    1c48:	00001c54 	movui	zero,113
    1c4c:	00001c54 	movui	zero,113
    1c50:	00002a30 	cmpltui	zero,zero,168
    1c54:	d9014d17 	ldw	r4,1332(sp)
    1c58:	2000ce26 	beq	r4,zero,1f94 <___vfprintf_internal_r+0x6d4>
    1c5c:	01400044 	movi	r5,1
    1c60:	d9800f04 	addi	r6,sp,60
    1c64:	d9c14015 	stw	r7,1280(sp)
    1c68:	d9414515 	stw	r5,1300(sp)
    1c6c:	d9814115 	stw	r6,1284(sp)
    1c70:	280f883a 	mov	r7,r5
    1c74:	d9000f05 	stb	r4,60(sp)
    1c78:	d8000405 	stb	zero,16(sp)
    1c7c:	d8014615 	stw	zero,1304(sp)
    1c80:	d8c14c17 	ldw	r3,1328(sp)
    1c84:	1880008c 	andi	r2,r3,2
    1c88:	1005003a 	cmpeq	r2,r2,zero
    1c8c:	d8815015 	stw	r2,1344(sp)
    1c90:	1000031e 	bne	r2,zero,1ca0 <___vfprintf_internal_r+0x3e0>
    1c94:	d9014517 	ldw	r4,1300(sp)
    1c98:	21000084 	addi	r4,r4,2
    1c9c:	d9014515 	stw	r4,1300(sp)
    1ca0:	d9414c17 	ldw	r5,1328(sp)
    1ca4:	2940210c 	andi	r5,r5,132
    1ca8:	d9414e15 	stw	r5,1336(sp)
    1cac:	28002d1e 	bne	r5,zero,1d64 <___vfprintf_internal_r+0x4a4>
    1cb0:	d9814a17 	ldw	r6,1320(sp)
    1cb4:	d8814517 	ldw	r2,1300(sp)
    1cb8:	30a1c83a 	sub	r16,r6,r2
    1cbc:	0400290e 	bge	zero,r16,1d64 <___vfprintf_internal_r+0x4a4>
    1cc0:	00800404 	movi	r2,16
    1cc4:	14045e0e 	bge	r2,r16,2e40 <___vfprintf_internal_r+0x1580>
    1cc8:	dc800e17 	ldw	r18,56(sp)
    1ccc:	dc400d17 	ldw	r17,52(sp)
    1cd0:	1027883a 	mov	r19,r2
    1cd4:	07000074 	movhi	fp,1
    1cd8:	e7366184 	addi	fp,fp,-9850
    1cdc:	050001c4 	movi	r20,7
    1ce0:	00000306 	br	1cf0 <___vfprintf_internal_r+0x430>
    1ce4:	843ffc04 	addi	r16,r16,-16
    1ce8:	ad400204 	addi	r21,r21,8
    1cec:	9c00130e 	bge	r19,r16,1d3c <___vfprintf_internal_r+0x47c>
    1cf0:	94800404 	addi	r18,r18,16
    1cf4:	8c400044 	addi	r17,r17,1
    1cf8:	af000015 	stw	fp,0(r21)
    1cfc:	acc00115 	stw	r19,4(r21)
    1d00:	dc800e15 	stw	r18,56(sp)
    1d04:	dc400d15 	stw	r17,52(sp)
    1d08:	a47ff60e 	bge	r20,r17,1ce4 <___vfprintf_internal_r+0x424>
    1d0c:	d9014f17 	ldw	r4,1340(sp)
    1d10:	b00b883a 	mov	r5,r22
    1d14:	d9800c04 	addi	r6,sp,48
    1d18:	d9c15115 	stw	r7,1348(sp)
    1d1c:	00018680 	call	1868 <__sprint_r>
    1d20:	d9c15117 	ldw	r7,1348(sp)
    1d24:	10009e1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    1d28:	843ffc04 	addi	r16,r16,-16
    1d2c:	dc800e17 	ldw	r18,56(sp)
    1d30:	dc400d17 	ldw	r17,52(sp)
    1d34:	dd401904 	addi	r21,sp,100
    1d38:	9c3fed16 	blt	r19,r16,1cf0 <___vfprintf_internal_r+0x430>
    1d3c:	9425883a 	add	r18,r18,r16
    1d40:	8c400044 	addi	r17,r17,1
    1d44:	008001c4 	movi	r2,7
    1d48:	af000015 	stw	fp,0(r21)
    1d4c:	ac000115 	stw	r16,4(r21)
    1d50:	dc800e15 	stw	r18,56(sp)
    1d54:	dc400d15 	stw	r17,52(sp)
    1d58:	1441f516 	blt	r2,r17,2530 <___vfprintf_internal_r+0xc70>
    1d5c:	ad400204 	addi	r21,r21,8
    1d60:	00000206 	br	1d6c <___vfprintf_internal_r+0x4ac>
    1d64:	dc800e17 	ldw	r18,56(sp)
    1d68:	dc400d17 	ldw	r17,52(sp)
    1d6c:	d8800407 	ldb	r2,16(sp)
    1d70:	10000b26 	beq	r2,zero,1da0 <___vfprintf_internal_r+0x4e0>
    1d74:	00800044 	movi	r2,1
    1d78:	94800044 	addi	r18,r18,1
    1d7c:	8c400044 	addi	r17,r17,1
    1d80:	a8800115 	stw	r2,4(r21)
    1d84:	d8c00404 	addi	r3,sp,16
    1d88:	008001c4 	movi	r2,7
    1d8c:	a8c00015 	stw	r3,0(r21)
    1d90:	dc800e15 	stw	r18,56(sp)
    1d94:	dc400d15 	stw	r17,52(sp)
    1d98:	1441da16 	blt	r2,r17,2504 <___vfprintf_internal_r+0xc44>
    1d9c:	ad400204 	addi	r21,r21,8
    1da0:	d9015017 	ldw	r4,1344(sp)
    1da4:	20000b1e 	bne	r4,zero,1dd4 <___vfprintf_internal_r+0x514>
    1da8:	d8800444 	addi	r2,sp,17
    1dac:	94800084 	addi	r18,r18,2
    1db0:	8c400044 	addi	r17,r17,1
    1db4:	a8800015 	stw	r2,0(r21)
    1db8:	00c00084 	movi	r3,2
    1dbc:	008001c4 	movi	r2,7
    1dc0:	a8c00115 	stw	r3,4(r21)
    1dc4:	dc800e15 	stw	r18,56(sp)
    1dc8:	dc400d15 	stw	r17,52(sp)
    1dcc:	1441c216 	blt	r2,r17,24d8 <___vfprintf_internal_r+0xc18>
    1dd0:	ad400204 	addi	r21,r21,8
    1dd4:	d9414e17 	ldw	r5,1336(sp)
    1dd8:	00802004 	movi	r2,128
    1ddc:	2880b126 	beq	r5,r2,20a4 <___vfprintf_internal_r+0x7e4>
    1de0:	d8c14617 	ldw	r3,1304(sp)
    1de4:	19e1c83a 	sub	r16,r3,r7
    1de8:	0400260e 	bge	zero,r16,1e84 <___vfprintf_internal_r+0x5c4>
    1dec:	00800404 	movi	r2,16
    1df0:	1403cf0e 	bge	r2,r16,2d30 <___vfprintf_internal_r+0x1470>
    1df4:	1027883a 	mov	r19,r2
    1df8:	07000074 	movhi	fp,1
    1dfc:	e7365d84 	addi	fp,fp,-9866
    1e00:	050001c4 	movi	r20,7
    1e04:	00000306 	br	1e14 <___vfprintf_internal_r+0x554>
    1e08:	843ffc04 	addi	r16,r16,-16
    1e0c:	ad400204 	addi	r21,r21,8
    1e10:	9c00130e 	bge	r19,r16,1e60 <___vfprintf_internal_r+0x5a0>
    1e14:	94800404 	addi	r18,r18,16
    1e18:	8c400044 	addi	r17,r17,1
    1e1c:	af000015 	stw	fp,0(r21)
    1e20:	acc00115 	stw	r19,4(r21)
    1e24:	dc800e15 	stw	r18,56(sp)
    1e28:	dc400d15 	stw	r17,52(sp)
    1e2c:	a47ff60e 	bge	r20,r17,1e08 <___vfprintf_internal_r+0x548>
    1e30:	d9014f17 	ldw	r4,1340(sp)
    1e34:	b00b883a 	mov	r5,r22
    1e38:	d9800c04 	addi	r6,sp,48
    1e3c:	d9c15115 	stw	r7,1348(sp)
    1e40:	00018680 	call	1868 <__sprint_r>
    1e44:	d9c15117 	ldw	r7,1348(sp)
    1e48:	1000551e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    1e4c:	843ffc04 	addi	r16,r16,-16
    1e50:	dc800e17 	ldw	r18,56(sp)
    1e54:	dc400d17 	ldw	r17,52(sp)
    1e58:	dd401904 	addi	r21,sp,100
    1e5c:	9c3fed16 	blt	r19,r16,1e14 <___vfprintf_internal_r+0x554>
    1e60:	9425883a 	add	r18,r18,r16
    1e64:	8c400044 	addi	r17,r17,1
    1e68:	008001c4 	movi	r2,7
    1e6c:	af000015 	stw	fp,0(r21)
    1e70:	ac000115 	stw	r16,4(r21)
    1e74:	dc800e15 	stw	r18,56(sp)
    1e78:	dc400d15 	stw	r17,52(sp)
    1e7c:	14418216 	blt	r2,r17,2488 <___vfprintf_internal_r+0xbc8>
    1e80:	ad400204 	addi	r21,r21,8
    1e84:	d9014c17 	ldw	r4,1328(sp)
    1e88:	2080400c 	andi	r2,r4,256
    1e8c:	10004a1e 	bne	r2,zero,1fb8 <___vfprintf_internal_r+0x6f8>
    1e90:	d9414117 	ldw	r5,1284(sp)
    1e94:	91e5883a 	add	r18,r18,r7
    1e98:	8c400044 	addi	r17,r17,1
    1e9c:	008001c4 	movi	r2,7
    1ea0:	a9400015 	stw	r5,0(r21)
    1ea4:	a9c00115 	stw	r7,4(r21)
    1ea8:	dc800e15 	stw	r18,56(sp)
    1eac:	dc400d15 	stw	r17,52(sp)
    1eb0:	14416716 	blt	r2,r17,2450 <___vfprintf_internal_r+0xb90>
    1eb4:	a8c00204 	addi	r3,r21,8
    1eb8:	d9814c17 	ldw	r6,1328(sp)
    1ebc:	3080010c 	andi	r2,r6,4
    1ec0:	10002826 	beq	r2,zero,1f64 <___vfprintf_internal_r+0x6a4>
    1ec4:	d8814a17 	ldw	r2,1320(sp)
    1ec8:	d9014517 	ldw	r4,1300(sp)
    1ecc:	1121c83a 	sub	r16,r2,r4
    1ed0:	0400240e 	bge	zero,r16,1f64 <___vfprintf_internal_r+0x6a4>
    1ed4:	00800404 	movi	r2,16
    1ed8:	1404550e 	bge	r2,r16,3030 <___vfprintf_internal_r+0x1770>
    1edc:	dc400d17 	ldw	r17,52(sp)
    1ee0:	1027883a 	mov	r19,r2
    1ee4:	07000074 	movhi	fp,1
    1ee8:	e7366184 	addi	fp,fp,-9850
    1eec:	050001c4 	movi	r20,7
    1ef0:	00000306 	br	1f00 <___vfprintf_internal_r+0x640>
    1ef4:	843ffc04 	addi	r16,r16,-16
    1ef8:	18c00204 	addi	r3,r3,8
    1efc:	9c00110e 	bge	r19,r16,1f44 <___vfprintf_internal_r+0x684>
    1f00:	94800404 	addi	r18,r18,16
    1f04:	8c400044 	addi	r17,r17,1
    1f08:	1f000015 	stw	fp,0(r3)
    1f0c:	1cc00115 	stw	r19,4(r3)
    1f10:	dc800e15 	stw	r18,56(sp)
    1f14:	dc400d15 	stw	r17,52(sp)
    1f18:	a47ff60e 	bge	r20,r17,1ef4 <___vfprintf_internal_r+0x634>
    1f1c:	d9014f17 	ldw	r4,1340(sp)
    1f20:	b00b883a 	mov	r5,r22
    1f24:	d9800c04 	addi	r6,sp,48
    1f28:	00018680 	call	1868 <__sprint_r>
    1f2c:	10001c1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    1f30:	843ffc04 	addi	r16,r16,-16
    1f34:	dc800e17 	ldw	r18,56(sp)
    1f38:	dc400d17 	ldw	r17,52(sp)
    1f3c:	d8c01904 	addi	r3,sp,100
    1f40:	9c3fef16 	blt	r19,r16,1f00 <___vfprintf_internal_r+0x640>
    1f44:	9425883a 	add	r18,r18,r16
    1f48:	8c400044 	addi	r17,r17,1
    1f4c:	008001c4 	movi	r2,7
    1f50:	1f000015 	stw	fp,0(r3)
    1f54:	1c000115 	stw	r16,4(r3)
    1f58:	dc800e15 	stw	r18,56(sp)
    1f5c:	dc400d15 	stw	r17,52(sp)
    1f60:	1440cb16 	blt	r2,r17,2290 <___vfprintf_internal_r+0x9d0>
    1f64:	d8814a17 	ldw	r2,1320(sp)
    1f68:	d9414517 	ldw	r5,1300(sp)
    1f6c:	1140010e 	bge	r2,r5,1f74 <___vfprintf_internal_r+0x6b4>
    1f70:	2805883a 	mov	r2,r5
    1f74:	d9814b17 	ldw	r6,1324(sp)
    1f78:	308d883a 	add	r6,r6,r2
    1f7c:	d9814b15 	stw	r6,1324(sp)
    1f80:	90013b1e 	bne	r18,zero,2470 <___vfprintf_internal_r+0xbb0>
    1f84:	d9c14017 	ldw	r7,1280(sp)
    1f88:	dd401904 	addi	r21,sp,100
    1f8c:	d8000d15 	stw	zero,52(sp)
    1f90:	003ea706 	br	1a30 <___vfprintf_internal_r+0x170>
    1f94:	d8800e17 	ldw	r2,56(sp)
    1f98:	1005451e 	bne	r2,zero,34b0 <___vfprintf_internal_r+0x1bf0>
    1f9c:	d8000d15 	stw	zero,52(sp)
    1fa0:	b080030b 	ldhu	r2,12(r22)
    1fa4:	1080100c 	andi	r2,r2,64
    1fa8:	103e8726 	beq	r2,zero,19c8 <___vfprintf_internal_r+0x108>
    1fac:	00bfffc4 	movi	r2,-1
    1fb0:	d8814b15 	stw	r2,1324(sp)
    1fb4:	003e8406 	br	19c8 <___vfprintf_internal_r+0x108>
    1fb8:	d9814d17 	ldw	r6,1332(sp)
    1fbc:	00801944 	movi	r2,101
    1fc0:	11806e16 	blt	r2,r6,217c <___vfprintf_internal_r+0x8bc>
    1fc4:	d9414717 	ldw	r5,1308(sp)
    1fc8:	00c00044 	movi	r3,1
    1fcc:	1943490e 	bge	r3,r5,2cf4 <___vfprintf_internal_r+0x1434>
    1fd0:	d8814117 	ldw	r2,1284(sp)
    1fd4:	94800044 	addi	r18,r18,1
    1fd8:	8c400044 	addi	r17,r17,1
    1fdc:	a8800015 	stw	r2,0(r21)
    1fe0:	008001c4 	movi	r2,7
    1fe4:	a8c00115 	stw	r3,4(r21)
    1fe8:	dc800e15 	stw	r18,56(sp)
    1fec:	dc400d15 	stw	r17,52(sp)
    1ff0:	1441ca16 	blt	r2,r17,271c <___vfprintf_internal_r+0xe5c>
    1ff4:	a8c00204 	addi	r3,r21,8
    1ff8:	d9014917 	ldw	r4,1316(sp)
    1ffc:	00800044 	movi	r2,1
    2000:	94800044 	addi	r18,r18,1
    2004:	8c400044 	addi	r17,r17,1
    2008:	18800115 	stw	r2,4(r3)
    200c:	008001c4 	movi	r2,7
    2010:	19000015 	stw	r4,0(r3)
    2014:	dc800e15 	stw	r18,56(sp)
    2018:	dc400d15 	stw	r17,52(sp)
    201c:	1441b616 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xe38>
    2020:	1cc00204 	addi	r19,r3,8
    2024:	d9014217 	ldw	r4,1288(sp)
    2028:	d9414317 	ldw	r5,1292(sp)
    202c:	000d883a 	mov	r6,zero
    2030:	000f883a 	mov	r7,zero
    2034:	000a0b00 	call	a0b0 <__nedf2>
    2038:	10017426 	beq	r2,zero,260c <___vfprintf_internal_r+0xd4c>
    203c:	d9414717 	ldw	r5,1308(sp)
    2040:	d9814117 	ldw	r6,1284(sp)
    2044:	8c400044 	addi	r17,r17,1
    2048:	2c85883a 	add	r2,r5,r18
    204c:	14bfffc4 	addi	r18,r2,-1
    2050:	28bfffc4 	addi	r2,r5,-1
    2054:	30c00044 	addi	r3,r6,1
    2058:	98800115 	stw	r2,4(r19)
    205c:	008001c4 	movi	r2,7
    2060:	98c00015 	stw	r3,0(r19)
    2064:	dc800e15 	stw	r18,56(sp)
    2068:	dc400d15 	stw	r17,52(sp)
    206c:	14418e16 	blt	r2,r17,26a8 <___vfprintf_internal_r+0xde8>
    2070:	9cc00204 	addi	r19,r19,8
    2074:	d9414817 	ldw	r5,1312(sp)
    2078:	d8800804 	addi	r2,sp,32
    207c:	8c400044 	addi	r17,r17,1
    2080:	9165883a 	add	r18,r18,r5
    2084:	98800015 	stw	r2,0(r19)
    2088:	008001c4 	movi	r2,7
    208c:	99400115 	stw	r5,4(r19)
    2090:	dc800e15 	stw	r18,56(sp)
    2094:	dc400d15 	stw	r17,52(sp)
    2098:	1440ed16 	blt	r2,r17,2450 <___vfprintf_internal_r+0xb90>
    209c:	98c00204 	addi	r3,r19,8
    20a0:	003f8506 	br	1eb8 <___vfprintf_internal_r+0x5f8>
    20a4:	d9814a17 	ldw	r6,1320(sp)
    20a8:	d8814517 	ldw	r2,1300(sp)
    20ac:	30a1c83a 	sub	r16,r6,r2
    20b0:	043f4b0e 	bge	zero,r16,1de0 <___vfprintf_internal_r+0x520>
    20b4:	00800404 	movi	r2,16
    20b8:	14043a0e 	bge	r2,r16,31a4 <___vfprintf_internal_r+0x18e4>
    20bc:	1027883a 	mov	r19,r2
    20c0:	07000074 	movhi	fp,1
    20c4:	e7365d84 	addi	fp,fp,-9866
    20c8:	050001c4 	movi	r20,7
    20cc:	00000306 	br	20dc <___vfprintf_internal_r+0x81c>
    20d0:	843ffc04 	addi	r16,r16,-16
    20d4:	ad400204 	addi	r21,r21,8
    20d8:	9c00130e 	bge	r19,r16,2128 <___vfprintf_internal_r+0x868>
    20dc:	94800404 	addi	r18,r18,16
    20e0:	8c400044 	addi	r17,r17,1
    20e4:	af000015 	stw	fp,0(r21)
    20e8:	acc00115 	stw	r19,4(r21)
    20ec:	dc800e15 	stw	r18,56(sp)
    20f0:	dc400d15 	stw	r17,52(sp)
    20f4:	a47ff60e 	bge	r20,r17,20d0 <___vfprintf_internal_r+0x810>
    20f8:	d9014f17 	ldw	r4,1340(sp)
    20fc:	b00b883a 	mov	r5,r22
    2100:	d9800c04 	addi	r6,sp,48
    2104:	d9c15115 	stw	r7,1348(sp)
    2108:	00018680 	call	1868 <__sprint_r>
    210c:	d9c15117 	ldw	r7,1348(sp)
    2110:	103fa31e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2114:	843ffc04 	addi	r16,r16,-16
    2118:	dc800e17 	ldw	r18,56(sp)
    211c:	dc400d17 	ldw	r17,52(sp)
    2120:	dd401904 	addi	r21,sp,100
    2124:	9c3fed16 	blt	r19,r16,20dc <___vfprintf_internal_r+0x81c>
    2128:	9425883a 	add	r18,r18,r16
    212c:	8c400044 	addi	r17,r17,1
    2130:	008001c4 	movi	r2,7
    2134:	af000015 	stw	fp,0(r21)
    2138:	ac000115 	stw	r16,4(r21)
    213c:	dc800e15 	stw	r18,56(sp)
    2140:	dc400d15 	stw	r17,52(sp)
    2144:	14416116 	blt	r2,r17,26cc <___vfprintf_internal_r+0xe0c>
    2148:	ad400204 	addi	r21,r21,8
    214c:	003f2406 	br	1de0 <___vfprintf_internal_r+0x520>
    2150:	d9014f17 	ldw	r4,1340(sp)
    2154:	00055280 	call	5528 <__sinit>
    2158:	d9c15117 	ldw	r7,1348(sp)
    215c:	003def06 	br	191c <___vfprintf_internal_r+0x5c>
    2160:	d9014f17 	ldw	r4,1340(sp)
    2164:	b00b883a 	mov	r5,r22
    2168:	d9c15115 	stw	r7,1348(sp)
    216c:	00037a80 	call	37a8 <__swsetup_r>
    2170:	d9c15117 	ldw	r7,1348(sp)
    2174:	103dee26 	beq	r2,zero,1930 <___vfprintf_internal_r+0x70>
    2178:	003f8c06 	br	1fac <___vfprintf_internal_r+0x6ec>
    217c:	d9014217 	ldw	r4,1288(sp)
    2180:	d9414317 	ldw	r5,1292(sp)
    2184:	000d883a 	mov	r6,zero
    2188:	000f883a 	mov	r7,zero
    218c:	000a0280 	call	a028 <__eqdf2>
    2190:	1000f21e 	bne	r2,zero,255c <___vfprintf_internal_r+0xc9c>
    2194:	00800074 	movhi	r2,1
    2198:	10b65d04 	addi	r2,r2,-9868
    219c:	94800044 	addi	r18,r18,1
    21a0:	8c400044 	addi	r17,r17,1
    21a4:	a8800015 	stw	r2,0(r21)
    21a8:	00c00044 	movi	r3,1
    21ac:	008001c4 	movi	r2,7
    21b0:	a8c00115 	stw	r3,4(r21)
    21b4:	dc800e15 	stw	r18,56(sp)
    21b8:	dc400d15 	stw	r17,52(sp)
    21bc:	14430016 	blt	r2,r17,2dc0 <___vfprintf_internal_r+0x1500>
    21c0:	a8c00204 	addi	r3,r21,8
    21c4:	d8800517 	ldw	r2,20(sp)
    21c8:	d9014717 	ldw	r4,1308(sp)
    21cc:	11015c0e 	bge	r2,r4,2740 <___vfprintf_internal_r+0xe80>
    21d0:	dc400d17 	ldw	r17,52(sp)
    21d4:	d9814917 	ldw	r6,1316(sp)
    21d8:	00800044 	movi	r2,1
    21dc:	94800044 	addi	r18,r18,1
    21e0:	8c400044 	addi	r17,r17,1
    21e4:	18800115 	stw	r2,4(r3)
    21e8:	008001c4 	movi	r2,7
    21ec:	19800015 	stw	r6,0(r3)
    21f0:	dc800e15 	stw	r18,56(sp)
    21f4:	dc400d15 	stw	r17,52(sp)
    21f8:	14431616 	blt	r2,r17,2e54 <___vfprintf_internal_r+0x1594>
    21fc:	18c00204 	addi	r3,r3,8
    2200:	d8814717 	ldw	r2,1308(sp)
    2204:	143fffc4 	addi	r16,r2,-1
    2208:	043f2b0e 	bge	zero,r16,1eb8 <___vfprintf_internal_r+0x5f8>
    220c:	00800404 	movi	r2,16
    2210:	1402a80e 	bge	r2,r16,2cb4 <___vfprintf_internal_r+0x13f4>
    2214:	dc400d17 	ldw	r17,52(sp)
    2218:	1027883a 	mov	r19,r2
    221c:	07000074 	movhi	fp,1
    2220:	e7365d84 	addi	fp,fp,-9866
    2224:	050001c4 	movi	r20,7
    2228:	00000306 	br	2238 <___vfprintf_internal_r+0x978>
    222c:	18c00204 	addi	r3,r3,8
    2230:	843ffc04 	addi	r16,r16,-16
    2234:	9c02a20e 	bge	r19,r16,2cc0 <___vfprintf_internal_r+0x1400>
    2238:	94800404 	addi	r18,r18,16
    223c:	8c400044 	addi	r17,r17,1
    2240:	1f000015 	stw	fp,0(r3)
    2244:	1cc00115 	stw	r19,4(r3)
    2248:	dc800e15 	stw	r18,56(sp)
    224c:	dc400d15 	stw	r17,52(sp)
    2250:	a47ff60e 	bge	r20,r17,222c <___vfprintf_internal_r+0x96c>
    2254:	d9014f17 	ldw	r4,1340(sp)
    2258:	b00b883a 	mov	r5,r22
    225c:	d9800c04 	addi	r6,sp,48
    2260:	00018680 	call	1868 <__sprint_r>
    2264:	103f4e1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2268:	dc800e17 	ldw	r18,56(sp)
    226c:	dc400d17 	ldw	r17,52(sp)
    2270:	d8c01904 	addi	r3,sp,100
    2274:	003fee06 	br	2230 <___vfprintf_internal_r+0x970>
    2278:	d8802c0b 	ldhu	r2,176(sp)
    227c:	00ffffc4 	movi	r3,-1
    2280:	d8c14b15 	stw	r3,1324(sp)
    2284:	1080100c 	andi	r2,r2,64
    2288:	103dcc1e 	bne	r2,zero,19bc <___vfprintf_internal_r+0xfc>
    228c:	003dce06 	br	19c8 <___vfprintf_internal_r+0x108>
    2290:	d9014f17 	ldw	r4,1340(sp)
    2294:	b00b883a 	mov	r5,r22
    2298:	d9800c04 	addi	r6,sp,48
    229c:	00018680 	call	1868 <__sprint_r>
    22a0:	103f3f1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    22a4:	dc800e17 	ldw	r18,56(sp)
    22a8:	003f2e06 	br	1f64 <___vfprintf_internal_r+0x6a4>
    22ac:	d9414c17 	ldw	r5,1328(sp)
    22b0:	29400414 	ori	r5,r5,16
    22b4:	d9414c15 	stw	r5,1328(sp)
    22b8:	d9814c17 	ldw	r6,1328(sp)
    22bc:	3080080c 	andi	r2,r6,32
    22c0:	10014f1e 	bne	r2,zero,2800 <___vfprintf_internal_r+0xf40>
    22c4:	d8c14c17 	ldw	r3,1328(sp)
    22c8:	1880040c 	andi	r2,r3,16
    22cc:	1002f01e 	bne	r2,zero,2e90 <___vfprintf_internal_r+0x15d0>
    22d0:	d9014c17 	ldw	r4,1328(sp)
    22d4:	2080100c 	andi	r2,r4,64
    22d8:	1002ed26 	beq	r2,zero,2e90 <___vfprintf_internal_r+0x15d0>
    22dc:	3880000f 	ldh	r2,0(r7)
    22e0:	39c00104 	addi	r7,r7,4
    22e4:	d9c14015 	stw	r7,1280(sp)
    22e8:	1023d7fa 	srai	r17,r2,31
    22ec:	1021883a 	mov	r16,r2
    22f0:	88037816 	blt	r17,zero,30d4 <___vfprintf_internal_r+0x1814>
    22f4:	01000044 	movi	r4,1
    22f8:	98000416 	blt	r19,zero,230c <___vfprintf_internal_r+0xa4c>
    22fc:	d8c14c17 	ldw	r3,1328(sp)
    2300:	00bfdfc4 	movi	r2,-129
    2304:	1886703a 	and	r3,r3,r2
    2308:	d8c14c15 	stw	r3,1328(sp)
    230c:	8444b03a 	or	r2,r16,r17
    2310:	10022c1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x1304>
    2314:	98022b1e 	bne	r19,zero,2bc4 <___vfprintf_internal_r+0x1304>
    2318:	20803fcc 	andi	r2,r4,255
    231c:	1002a126 	beq	r2,zero,2da4 <___vfprintf_internal_r+0x14e4>
    2320:	d8c01904 	addi	r3,sp,100
    2324:	dd000f04 	addi	r20,sp,60
    2328:	d8c14115 	stw	r3,1284(sp)
    232c:	d8c14117 	ldw	r3,1284(sp)
    2330:	dcc14515 	stw	r19,1300(sp)
    2334:	a0c5c83a 	sub	r2,r20,r3
    2338:	11c00a04 	addi	r7,r2,40
    233c:	99c0010e 	bge	r19,r7,2344 <___vfprintf_internal_r+0xa84>
    2340:	d9c14515 	stw	r7,1300(sp)
    2344:	dcc14615 	stw	r19,1304(sp)
    2348:	d8800407 	ldb	r2,16(sp)
    234c:	103e4c26 	beq	r2,zero,1c80 <___vfprintf_internal_r+0x3c0>
    2350:	d8814517 	ldw	r2,1300(sp)
    2354:	10800044 	addi	r2,r2,1
    2358:	d8814515 	stw	r2,1300(sp)
    235c:	003e4806 	br	1c80 <___vfprintf_internal_r+0x3c0>
    2360:	d9814c17 	ldw	r6,1328(sp)
    2364:	31800414 	ori	r6,r6,16
    2368:	d9814c15 	stw	r6,1328(sp)
    236c:	d8c14c17 	ldw	r3,1328(sp)
    2370:	1880080c 	andi	r2,r3,32
    2374:	1001271e 	bne	r2,zero,2814 <___vfprintf_internal_r+0xf54>
    2378:	d9414c17 	ldw	r5,1328(sp)
    237c:	2880040c 	andi	r2,r5,16
    2380:	1002bc1e 	bne	r2,zero,2e74 <___vfprintf_internal_r+0x15b4>
    2384:	d9814c17 	ldw	r6,1328(sp)
    2388:	3080100c 	andi	r2,r6,64
    238c:	1002b926 	beq	r2,zero,2e74 <___vfprintf_internal_r+0x15b4>
    2390:	3c00000b 	ldhu	r16,0(r7)
    2394:	0009883a 	mov	r4,zero
    2398:	39c00104 	addi	r7,r7,4
    239c:	0023883a 	mov	r17,zero
    23a0:	d9c14015 	stw	r7,1280(sp)
    23a4:	d8000405 	stb	zero,16(sp)
    23a8:	003fd306 	br	22f8 <___vfprintf_internal_r+0xa38>
    23ac:	d9014c17 	ldw	r4,1328(sp)
    23b0:	21000414 	ori	r4,r4,16
    23b4:	d9014c15 	stw	r4,1328(sp)
    23b8:	d9414c17 	ldw	r5,1328(sp)
    23bc:	2880080c 	andi	r2,r5,32
    23c0:	1001081e 	bne	r2,zero,27e4 <___vfprintf_internal_r+0xf24>
    23c4:	d8c14c17 	ldw	r3,1328(sp)
    23c8:	1880040c 	andi	r2,r3,16
    23cc:	1002b61e 	bne	r2,zero,2ea8 <___vfprintf_internal_r+0x15e8>
    23d0:	d9014c17 	ldw	r4,1328(sp)
    23d4:	2080100c 	andi	r2,r4,64
    23d8:	1002b326 	beq	r2,zero,2ea8 <___vfprintf_internal_r+0x15e8>
    23dc:	3c00000b 	ldhu	r16,0(r7)
    23e0:	01000044 	movi	r4,1
    23e4:	39c00104 	addi	r7,r7,4
    23e8:	0023883a 	mov	r17,zero
    23ec:	d9c14015 	stw	r7,1280(sp)
    23f0:	d8000405 	stb	zero,16(sp)
    23f4:	003fc006 	br	22f8 <___vfprintf_internal_r+0xa38>
    23f8:	d9014f17 	ldw	r4,1340(sp)
    23fc:	b00b883a 	mov	r5,r22
    2400:	d9800c04 	addi	r6,sp,48
    2404:	00018680 	call	1868 <__sprint_r>
    2408:	103ee51e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    240c:	dc800e17 	ldw	r18,56(sp)
    2410:	d8c01904 	addi	r3,sp,100
    2414:	d9814c17 	ldw	r6,1328(sp)
    2418:	3080004c 	andi	r2,r6,1
    241c:	1005003a 	cmpeq	r2,r2,zero
    2420:	103ea51e 	bne	r2,zero,1eb8 <___vfprintf_internal_r+0x5f8>
    2424:	00800044 	movi	r2,1
    2428:	dc400d17 	ldw	r17,52(sp)
    242c:	18800115 	stw	r2,4(r3)
    2430:	d8814917 	ldw	r2,1316(sp)
    2434:	94800044 	addi	r18,r18,1
    2438:	8c400044 	addi	r17,r17,1
    243c:	18800015 	stw	r2,0(r3)
    2440:	008001c4 	movi	r2,7
    2444:	dc800e15 	stw	r18,56(sp)
    2448:	dc400d15 	stw	r17,52(sp)
    244c:	1442240e 	bge	r2,r17,2ce0 <___vfprintf_internal_r+0x1420>
    2450:	d9014f17 	ldw	r4,1340(sp)
    2454:	b00b883a 	mov	r5,r22
    2458:	d9800c04 	addi	r6,sp,48
    245c:	00018680 	call	1868 <__sprint_r>
    2460:	103ecf1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2464:	dc800e17 	ldw	r18,56(sp)
    2468:	d8c01904 	addi	r3,sp,100
    246c:	003e9206 	br	1eb8 <___vfprintf_internal_r+0x5f8>
    2470:	d9014f17 	ldw	r4,1340(sp)
    2474:	b00b883a 	mov	r5,r22
    2478:	d9800c04 	addi	r6,sp,48
    247c:	00018680 	call	1868 <__sprint_r>
    2480:	103ec026 	beq	r2,zero,1f84 <___vfprintf_internal_r+0x6c4>
    2484:	003ec606 	br	1fa0 <___vfprintf_internal_r+0x6e0>
    2488:	d9014f17 	ldw	r4,1340(sp)
    248c:	b00b883a 	mov	r5,r22
    2490:	d9800c04 	addi	r6,sp,48
    2494:	d9c15115 	stw	r7,1348(sp)
    2498:	00018680 	call	1868 <__sprint_r>
    249c:	d9c15117 	ldw	r7,1348(sp)
    24a0:	103ebf1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    24a4:	dc800e17 	ldw	r18,56(sp)
    24a8:	dc400d17 	ldw	r17,52(sp)
    24ac:	dd401904 	addi	r21,sp,100
    24b0:	003e7406 	br	1e84 <___vfprintf_internal_r+0x5c4>
    24b4:	d9014f17 	ldw	r4,1340(sp)
    24b8:	b00b883a 	mov	r5,r22
    24bc:	d9800c04 	addi	r6,sp,48
    24c0:	d9c15115 	stw	r7,1348(sp)
    24c4:	00018680 	call	1868 <__sprint_r>
    24c8:	d9c15117 	ldw	r7,1348(sp)
    24cc:	103eb41e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    24d0:	dd401904 	addi	r21,sp,100
    24d4:	003d6d06 	br	1a8c <___vfprintf_internal_r+0x1cc>
    24d8:	d9014f17 	ldw	r4,1340(sp)
    24dc:	b00b883a 	mov	r5,r22
    24e0:	d9800c04 	addi	r6,sp,48
    24e4:	d9c15115 	stw	r7,1348(sp)
    24e8:	00018680 	call	1868 <__sprint_r>
    24ec:	d9c15117 	ldw	r7,1348(sp)
    24f0:	103eab1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    24f4:	dc800e17 	ldw	r18,56(sp)
    24f8:	dc400d17 	ldw	r17,52(sp)
    24fc:	dd401904 	addi	r21,sp,100
    2500:	003e3406 	br	1dd4 <___vfprintf_internal_r+0x514>
    2504:	d9014f17 	ldw	r4,1340(sp)
    2508:	b00b883a 	mov	r5,r22
    250c:	d9800c04 	addi	r6,sp,48
    2510:	d9c15115 	stw	r7,1348(sp)
    2514:	00018680 	call	1868 <__sprint_r>
    2518:	d9c15117 	ldw	r7,1348(sp)
    251c:	103ea01e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2520:	dc800e17 	ldw	r18,56(sp)
    2524:	dc400d17 	ldw	r17,52(sp)
    2528:	dd401904 	addi	r21,sp,100
    252c:	003e1c06 	br	1da0 <___vfprintf_internal_r+0x4e0>
    2530:	d9014f17 	ldw	r4,1340(sp)
    2534:	b00b883a 	mov	r5,r22
    2538:	d9800c04 	addi	r6,sp,48
    253c:	d9c15115 	stw	r7,1348(sp)
    2540:	00018680 	call	1868 <__sprint_r>
    2544:	d9c15117 	ldw	r7,1348(sp)
    2548:	103e951e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    254c:	dc800e17 	ldw	r18,56(sp)
    2550:	dc400d17 	ldw	r17,52(sp)
    2554:	dd401904 	addi	r21,sp,100
    2558:	003e0406 	br	1d6c <___vfprintf_internal_r+0x4ac>
    255c:	d9000517 	ldw	r4,20(sp)
    2560:	0102580e 	bge	zero,r4,2ec4 <___vfprintf_internal_r+0x1604>
    2564:	d9814717 	ldw	r6,1308(sp)
    2568:	21807a16 	blt	r4,r6,2754 <___vfprintf_internal_r+0xe94>
    256c:	d8814117 	ldw	r2,1284(sp)
    2570:	91a5883a 	add	r18,r18,r6
    2574:	8c400044 	addi	r17,r17,1
    2578:	a8800015 	stw	r2,0(r21)
    257c:	008001c4 	movi	r2,7
    2580:	a9800115 	stw	r6,4(r21)
    2584:	dc800e15 	stw	r18,56(sp)
    2588:	dc400d15 	stw	r17,52(sp)
    258c:	1442fc16 	blt	r2,r17,3180 <___vfprintf_internal_r+0x18c0>
    2590:	a8c00204 	addi	r3,r21,8
    2594:	d9414717 	ldw	r5,1308(sp)
    2598:	2161c83a 	sub	r16,r4,r5
    259c:	043f9d0e 	bge	zero,r16,2414 <___vfprintf_internal_r+0xb54>
    25a0:	00800404 	movi	r2,16
    25a4:	1402190e 	bge	r2,r16,2e0c <___vfprintf_internal_r+0x154c>
    25a8:	dc400d17 	ldw	r17,52(sp)
    25ac:	1027883a 	mov	r19,r2
    25b0:	07000074 	movhi	fp,1
    25b4:	e7365d84 	addi	fp,fp,-9866
    25b8:	050001c4 	movi	r20,7
    25bc:	00000306 	br	25cc <___vfprintf_internal_r+0xd0c>
    25c0:	18c00204 	addi	r3,r3,8
    25c4:	843ffc04 	addi	r16,r16,-16
    25c8:	9c02130e 	bge	r19,r16,2e18 <___vfprintf_internal_r+0x1558>
    25cc:	94800404 	addi	r18,r18,16
    25d0:	8c400044 	addi	r17,r17,1
    25d4:	1f000015 	stw	fp,0(r3)
    25d8:	1cc00115 	stw	r19,4(r3)
    25dc:	dc800e15 	stw	r18,56(sp)
    25e0:	dc400d15 	stw	r17,52(sp)
    25e4:	a47ff60e 	bge	r20,r17,25c0 <___vfprintf_internal_r+0xd00>
    25e8:	d9014f17 	ldw	r4,1340(sp)
    25ec:	b00b883a 	mov	r5,r22
    25f0:	d9800c04 	addi	r6,sp,48
    25f4:	00018680 	call	1868 <__sprint_r>
    25f8:	103e691e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    25fc:	dc800e17 	ldw	r18,56(sp)
    2600:	dc400d17 	ldw	r17,52(sp)
    2604:	d8c01904 	addi	r3,sp,100
    2608:	003fee06 	br	25c4 <___vfprintf_internal_r+0xd04>
    260c:	d8814717 	ldw	r2,1308(sp)
    2610:	143fffc4 	addi	r16,r2,-1
    2614:	043e970e 	bge	zero,r16,2074 <___vfprintf_internal_r+0x7b4>
    2618:	00800404 	movi	r2,16
    261c:	1400180e 	bge	r2,r16,2680 <___vfprintf_internal_r+0xdc0>
    2620:	1029883a 	mov	r20,r2
    2624:	07000074 	movhi	fp,1
    2628:	e7365d84 	addi	fp,fp,-9866
    262c:	054001c4 	movi	r21,7
    2630:	00000306 	br	2640 <___vfprintf_internal_r+0xd80>
    2634:	9cc00204 	addi	r19,r19,8
    2638:	843ffc04 	addi	r16,r16,-16
    263c:	a400120e 	bge	r20,r16,2688 <___vfprintf_internal_r+0xdc8>
    2640:	94800404 	addi	r18,r18,16
    2644:	8c400044 	addi	r17,r17,1
    2648:	9f000015 	stw	fp,0(r19)
    264c:	9d000115 	stw	r20,4(r19)
    2650:	dc800e15 	stw	r18,56(sp)
    2654:	dc400d15 	stw	r17,52(sp)
    2658:	ac7ff60e 	bge	r21,r17,2634 <___vfprintf_internal_r+0xd74>
    265c:	d9014f17 	ldw	r4,1340(sp)
    2660:	b00b883a 	mov	r5,r22
    2664:	d9800c04 	addi	r6,sp,48
    2668:	00018680 	call	1868 <__sprint_r>
    266c:	103e4c1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2670:	dc800e17 	ldw	r18,56(sp)
    2674:	dc400d17 	ldw	r17,52(sp)
    2678:	dcc01904 	addi	r19,sp,100
    267c:	003fee06 	br	2638 <___vfprintf_internal_r+0xd78>
    2680:	07000074 	movhi	fp,1
    2684:	e7365d84 	addi	fp,fp,-9866
    2688:	9425883a 	add	r18,r18,r16
    268c:	8c400044 	addi	r17,r17,1
    2690:	008001c4 	movi	r2,7
    2694:	9f000015 	stw	fp,0(r19)
    2698:	9c000115 	stw	r16,4(r19)
    269c:	dc800e15 	stw	r18,56(sp)
    26a0:	dc400d15 	stw	r17,52(sp)
    26a4:	147e720e 	bge	r2,r17,2070 <___vfprintf_internal_r+0x7b0>
    26a8:	d9014f17 	ldw	r4,1340(sp)
    26ac:	b00b883a 	mov	r5,r22
    26b0:	d9800c04 	addi	r6,sp,48
    26b4:	00018680 	call	1868 <__sprint_r>
    26b8:	103e391e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    26bc:	dc800e17 	ldw	r18,56(sp)
    26c0:	dc400d17 	ldw	r17,52(sp)
    26c4:	dcc01904 	addi	r19,sp,100
    26c8:	003e6a06 	br	2074 <___vfprintf_internal_r+0x7b4>
    26cc:	d9014f17 	ldw	r4,1340(sp)
    26d0:	b00b883a 	mov	r5,r22
    26d4:	d9800c04 	addi	r6,sp,48
    26d8:	d9c15115 	stw	r7,1348(sp)
    26dc:	00018680 	call	1868 <__sprint_r>
    26e0:	d9c15117 	ldw	r7,1348(sp)
    26e4:	103e2e1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    26e8:	dc800e17 	ldw	r18,56(sp)
    26ec:	dc400d17 	ldw	r17,52(sp)
    26f0:	dd401904 	addi	r21,sp,100
    26f4:	003dba06 	br	1de0 <___vfprintf_internal_r+0x520>
    26f8:	d9014f17 	ldw	r4,1340(sp)
    26fc:	b00b883a 	mov	r5,r22
    2700:	d9800c04 	addi	r6,sp,48
    2704:	00018680 	call	1868 <__sprint_r>
    2708:	103e251e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    270c:	dc800e17 	ldw	r18,56(sp)
    2710:	dc400d17 	ldw	r17,52(sp)
    2714:	dcc01904 	addi	r19,sp,100
    2718:	003e4206 	br	2024 <___vfprintf_internal_r+0x764>
    271c:	d9014f17 	ldw	r4,1340(sp)
    2720:	b00b883a 	mov	r5,r22
    2724:	d9800c04 	addi	r6,sp,48
    2728:	00018680 	call	1868 <__sprint_r>
    272c:	103e1c1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2730:	dc800e17 	ldw	r18,56(sp)
    2734:	dc400d17 	ldw	r17,52(sp)
    2738:	d8c01904 	addi	r3,sp,100
    273c:	003e2e06 	br	1ff8 <___vfprintf_internal_r+0x738>
    2740:	d9414c17 	ldw	r5,1328(sp)
    2744:	2880004c 	andi	r2,r5,1
    2748:	1005003a 	cmpeq	r2,r2,zero
    274c:	103dda1e 	bne	r2,zero,1eb8 <___vfprintf_internal_r+0x5f8>
    2750:	003e9f06 	br	21d0 <___vfprintf_internal_r+0x910>
    2754:	d8c14117 	ldw	r3,1284(sp)
    2758:	9125883a 	add	r18,r18,r4
    275c:	8c400044 	addi	r17,r17,1
    2760:	008001c4 	movi	r2,7
    2764:	a8c00015 	stw	r3,0(r21)
    2768:	a9000115 	stw	r4,4(r21)
    276c:	dc800e15 	stw	r18,56(sp)
    2770:	dc400d15 	stw	r17,52(sp)
    2774:	14426c16 	blt	r2,r17,3128 <___vfprintf_internal_r+0x1868>
    2778:	a8c00204 	addi	r3,r21,8
    277c:	d9414917 	ldw	r5,1316(sp)
    2780:	00800044 	movi	r2,1
    2784:	94800044 	addi	r18,r18,1
    2788:	8c400044 	addi	r17,r17,1
    278c:	18800115 	stw	r2,4(r3)
    2790:	008001c4 	movi	r2,7
    2794:	19400015 	stw	r5,0(r3)
    2798:	dc800e15 	stw	r18,56(sp)
    279c:	dc400d15 	stw	r17,52(sp)
    27a0:	2021883a 	mov	r16,r4
    27a4:	14425616 	blt	r2,r17,3100 <___vfprintf_internal_r+0x1840>
    27a8:	19400204 	addi	r5,r3,8
    27ac:	d9814717 	ldw	r6,1308(sp)
    27b0:	8c400044 	addi	r17,r17,1
    27b4:	dc400d15 	stw	r17,52(sp)
    27b8:	3107c83a 	sub	r3,r6,r4
    27bc:	d9014117 	ldw	r4,1284(sp)
    27c0:	90e5883a 	add	r18,r18,r3
    27c4:	28c00115 	stw	r3,4(r5)
    27c8:	8105883a 	add	r2,r16,r4
    27cc:	28800015 	stw	r2,0(r5)
    27d0:	008001c4 	movi	r2,7
    27d4:	dc800e15 	stw	r18,56(sp)
    27d8:	147f1d16 	blt	r2,r17,2450 <___vfprintf_internal_r+0xb90>
    27dc:	28c00204 	addi	r3,r5,8
    27e0:	003db506 	br	1eb8 <___vfprintf_internal_r+0x5f8>
    27e4:	3c000017 	ldw	r16,0(r7)
    27e8:	3c400117 	ldw	r17,4(r7)
    27ec:	39800204 	addi	r6,r7,8
    27f0:	01000044 	movi	r4,1
    27f4:	d9814015 	stw	r6,1280(sp)
    27f8:	d8000405 	stb	zero,16(sp)
    27fc:	003ebe06 	br	22f8 <___vfprintf_internal_r+0xa38>
    2800:	3c000017 	ldw	r16,0(r7)
    2804:	3c400117 	ldw	r17,4(r7)
    2808:	38800204 	addi	r2,r7,8
    280c:	d8814015 	stw	r2,1280(sp)
    2810:	003eb706 	br	22f0 <___vfprintf_internal_r+0xa30>
    2814:	3c000017 	ldw	r16,0(r7)
    2818:	3c400117 	ldw	r17,4(r7)
    281c:	39000204 	addi	r4,r7,8
    2820:	d9014015 	stw	r4,1280(sp)
    2824:	0009883a 	mov	r4,zero
    2828:	d8000405 	stb	zero,16(sp)
    282c:	003eb206 	br	22f8 <___vfprintf_internal_r+0xa38>
    2830:	38c00017 	ldw	r3,0(r7)
    2834:	39c00104 	addi	r7,r7,4
    2838:	d8c14a15 	stw	r3,1320(sp)
    283c:	1800d70e 	bge	r3,zero,2b9c <___vfprintf_internal_r+0x12dc>
    2840:	00c7c83a 	sub	r3,zero,r3
    2844:	d8c14a15 	stw	r3,1320(sp)
    2848:	d9014c17 	ldw	r4,1328(sp)
    284c:	b8c00007 	ldb	r3,0(r23)
    2850:	21000114 	ori	r4,r4,4
    2854:	d9014c15 	stw	r4,1328(sp)
    2858:	003c9806 	br	1abc <___vfprintf_internal_r+0x1fc>
    285c:	d9814c17 	ldw	r6,1328(sp)
    2860:	3080080c 	andi	r2,r6,32
    2864:	1001f626 	beq	r2,zero,3040 <___vfprintf_internal_r+0x1780>
    2868:	d9014b17 	ldw	r4,1324(sp)
    286c:	38800017 	ldw	r2,0(r7)
    2870:	39c00104 	addi	r7,r7,4
    2874:	d9c14015 	stw	r7,1280(sp)
    2878:	2007d7fa 	srai	r3,r4,31
    287c:	d9c14017 	ldw	r7,1280(sp)
    2880:	11000015 	stw	r4,0(r2)
    2884:	10c00115 	stw	r3,4(r2)
    2888:	003c6906 	br	1a30 <___vfprintf_internal_r+0x170>
    288c:	b8c00007 	ldb	r3,0(r23)
    2890:	00801b04 	movi	r2,108
    2894:	18825526 	beq	r3,r2,31ec <___vfprintf_internal_r+0x192c>
    2898:	d9414c17 	ldw	r5,1328(sp)
    289c:	29400414 	ori	r5,r5,16
    28a0:	d9414c15 	stw	r5,1328(sp)
    28a4:	003c8506 	br	1abc <___vfprintf_internal_r+0x1fc>
    28a8:	d9814c17 	ldw	r6,1328(sp)
    28ac:	b8c00007 	ldb	r3,0(r23)
    28b0:	31800814 	ori	r6,r6,32
    28b4:	d9814c15 	stw	r6,1328(sp)
    28b8:	003c8006 	br	1abc <___vfprintf_internal_r+0x1fc>
    28bc:	d8814c17 	ldw	r2,1328(sp)
    28c0:	3c000017 	ldw	r16,0(r7)
    28c4:	00c01e04 	movi	r3,120
    28c8:	10800094 	ori	r2,r2,2
    28cc:	d8814c15 	stw	r2,1328(sp)
    28d0:	39c00104 	addi	r7,r7,4
    28d4:	01400074 	movhi	r5,1
    28d8:	29764604 	addi	r5,r5,-9960
    28dc:	00800c04 	movi	r2,48
    28e0:	0023883a 	mov	r17,zero
    28e4:	01000084 	movi	r4,2
    28e8:	d9c14015 	stw	r7,1280(sp)
    28ec:	d8c14d15 	stw	r3,1332(sp)
    28f0:	d9414415 	stw	r5,1296(sp)
    28f4:	d8800445 	stb	r2,17(sp)
    28f8:	d8c00485 	stb	r3,18(sp)
    28fc:	d8000405 	stb	zero,16(sp)
    2900:	003e7d06 	br	22f8 <___vfprintf_internal_r+0xa38>
    2904:	d8814c17 	ldw	r2,1328(sp)
    2908:	b8c00007 	ldb	r3,0(r23)
    290c:	10801014 	ori	r2,r2,64
    2910:	d8814c15 	stw	r2,1328(sp)
    2914:	003c6906 	br	1abc <___vfprintf_internal_r+0x1fc>
    2918:	d9414c17 	ldw	r5,1328(sp)
    291c:	2880020c 	andi	r2,r5,8
    2920:	1001e526 	beq	r2,zero,30b8 <___vfprintf_internal_r+0x17f8>
    2924:	39800017 	ldw	r6,0(r7)
    2928:	38800204 	addi	r2,r7,8
    292c:	d8814015 	stw	r2,1280(sp)
    2930:	d9814215 	stw	r6,1288(sp)
    2934:	39c00117 	ldw	r7,4(r7)
    2938:	d9c14315 	stw	r7,1292(sp)
    293c:	d9014217 	ldw	r4,1288(sp)
    2940:	d9414317 	ldw	r5,1292(sp)
    2944:	0007fd00 	call	7fd0 <__isinfd>
    2948:	10021d26 	beq	r2,zero,31c0 <___vfprintf_internal_r+0x1900>
    294c:	d9014217 	ldw	r4,1288(sp)
    2950:	d9414317 	ldw	r5,1292(sp)
    2954:	000d883a 	mov	r6,zero
    2958:	000f883a 	mov	r7,zero
    295c:	000a2480 	call	a248 <__ltdf2>
    2960:	1002d016 	blt	r2,zero,34a4 <___vfprintf_internal_r+0x1be4>
    2964:	d9414d17 	ldw	r5,1332(sp)
    2968:	008011c4 	movi	r2,71
    296c:	11421016 	blt	r2,r5,31b0 <___vfprintf_internal_r+0x18f0>
    2970:	01800074 	movhi	r6,1
    2974:	31b64b04 	addi	r6,r6,-9940
    2978:	d9814115 	stw	r6,1284(sp)
    297c:	d9014c17 	ldw	r4,1328(sp)
    2980:	00c000c4 	movi	r3,3
    2984:	00bfdfc4 	movi	r2,-129
    2988:	2088703a 	and	r4,r4,r2
    298c:	180f883a 	mov	r7,r3
    2990:	d8c14515 	stw	r3,1300(sp)
    2994:	d9014c15 	stw	r4,1328(sp)
    2998:	d8014615 	stw	zero,1304(sp)
    299c:	003e6a06 	br	2348 <___vfprintf_internal_r+0xa88>
    29a0:	38800017 	ldw	r2,0(r7)
    29a4:	00c00044 	movi	r3,1
    29a8:	39c00104 	addi	r7,r7,4
    29ac:	d9c14015 	stw	r7,1280(sp)
    29b0:	d9000f04 	addi	r4,sp,60
    29b4:	180f883a 	mov	r7,r3
    29b8:	d8c14515 	stw	r3,1300(sp)
    29bc:	d9014115 	stw	r4,1284(sp)
    29c0:	d8800f05 	stb	r2,60(sp)
    29c4:	d8000405 	stb	zero,16(sp)
    29c8:	003cac06 	br	1c7c <___vfprintf_internal_r+0x3bc>
    29cc:	01400074 	movhi	r5,1
    29d0:	29765104 	addi	r5,r5,-9916
    29d4:	d9414415 	stw	r5,1296(sp)
    29d8:	d9814c17 	ldw	r6,1328(sp)
    29dc:	3080080c 	andi	r2,r6,32
    29e0:	1000ff26 	beq	r2,zero,2de0 <___vfprintf_internal_r+0x1520>
    29e4:	3c000017 	ldw	r16,0(r7)
    29e8:	3c400117 	ldw	r17,4(r7)
    29ec:	38800204 	addi	r2,r7,8
    29f0:	d8814015 	stw	r2,1280(sp)
    29f4:	d9414c17 	ldw	r5,1328(sp)
    29f8:	2880004c 	andi	r2,r5,1
    29fc:	1005003a 	cmpeq	r2,r2,zero
    2a00:	1000b91e 	bne	r2,zero,2ce8 <___vfprintf_internal_r+0x1428>
    2a04:	8444b03a 	or	r2,r16,r17
    2a08:	1000b726 	beq	r2,zero,2ce8 <___vfprintf_internal_r+0x1428>
    2a0c:	d9814d17 	ldw	r6,1332(sp)
    2a10:	29400094 	ori	r5,r5,2
    2a14:	00800c04 	movi	r2,48
    2a18:	01000084 	movi	r4,2
    2a1c:	d9414c15 	stw	r5,1328(sp)
    2a20:	d8800445 	stb	r2,17(sp)
    2a24:	d9800485 	stb	r6,18(sp)
    2a28:	d8000405 	stb	zero,16(sp)
    2a2c:	003e3206 	br	22f8 <___vfprintf_internal_r+0xa38>
    2a30:	01800074 	movhi	r6,1
    2a34:	31b64604 	addi	r6,r6,-9960
    2a38:	d9814415 	stw	r6,1296(sp)
    2a3c:	003fe606 	br	29d8 <___vfprintf_internal_r+0x1118>
    2a40:	00800ac4 	movi	r2,43
    2a44:	d8800405 	stb	r2,16(sp)
    2a48:	b8c00007 	ldb	r3,0(r23)
    2a4c:	003c1b06 	br	1abc <___vfprintf_internal_r+0x1fc>
    2a50:	d8814c17 	ldw	r2,1328(sp)
    2a54:	b8c00007 	ldb	r3,0(r23)
    2a58:	10800054 	ori	r2,r2,1
    2a5c:	d8814c15 	stw	r2,1328(sp)
    2a60:	003c1606 	br	1abc <___vfprintf_internal_r+0x1fc>
    2a64:	d8800407 	ldb	r2,16(sp)
    2a68:	10004c1e 	bne	r2,zero,2b9c <___vfprintf_internal_r+0x12dc>
    2a6c:	00800804 	movi	r2,32
    2a70:	d8800405 	stb	r2,16(sp)
    2a74:	b8c00007 	ldb	r3,0(r23)
    2a78:	003c1006 	br	1abc <___vfprintf_internal_r+0x1fc>
    2a7c:	d9814c17 	ldw	r6,1328(sp)
    2a80:	b8c00007 	ldb	r3,0(r23)
    2a84:	31800214 	ori	r6,r6,8
    2a88:	d9814c15 	stw	r6,1328(sp)
    2a8c:	003c0b06 	br	1abc <___vfprintf_internal_r+0x1fc>
    2a90:	0009883a 	mov	r4,zero
    2a94:	04000244 	movi	r16,9
    2a98:	01400284 	movi	r5,10
    2a9c:	d9c15115 	stw	r7,1348(sp)
    2aa0:	000a7800 	call	a780 <__mulsi3>
    2aa4:	b9000007 	ldb	r4,0(r23)
    2aa8:	d8c14d17 	ldw	r3,1332(sp)
    2aac:	bdc00044 	addi	r23,r23,1
    2ab0:	d9014d15 	stw	r4,1332(sp)
    2ab4:	d9414d17 	ldw	r5,1332(sp)
    2ab8:	1885883a 	add	r2,r3,r2
    2abc:	113ff404 	addi	r4,r2,-48
    2ac0:	28bff404 	addi	r2,r5,-48
    2ac4:	d9c15117 	ldw	r7,1348(sp)
    2ac8:	80bff32e 	bgeu	r16,r2,2a98 <___vfprintf_internal_r+0x11d8>
    2acc:	d9014a15 	stw	r4,1320(sp)
    2ad0:	003bfc06 	br	1ac4 <___vfprintf_internal_r+0x204>
    2ad4:	d8814c17 	ldw	r2,1328(sp)
    2ad8:	b8c00007 	ldb	r3,0(r23)
    2adc:	10802014 	ori	r2,r2,128
    2ae0:	d8814c15 	stw	r2,1328(sp)
    2ae4:	003bf506 	br	1abc <___vfprintf_internal_r+0x1fc>
    2ae8:	b8c00007 	ldb	r3,0(r23)
    2aec:	00800a84 	movi	r2,42
    2af0:	bdc00044 	addi	r23,r23,1
    2af4:	18831826 	beq	r3,r2,3758 <___vfprintf_internal_r+0x1e98>
    2af8:	d8c14d15 	stw	r3,1332(sp)
    2afc:	18bff404 	addi	r2,r3,-48
    2b00:	00c00244 	movi	r3,9
    2b04:	18827b36 	bltu	r3,r2,34f4 <___vfprintf_internal_r+0x1c34>
    2b08:	1821883a 	mov	r16,r3
    2b0c:	0009883a 	mov	r4,zero
    2b10:	01400284 	movi	r5,10
    2b14:	d9c15115 	stw	r7,1348(sp)
    2b18:	000a7800 	call	a780 <__mulsi3>
    2b1c:	d9414d17 	ldw	r5,1332(sp)
    2b20:	b9800007 	ldb	r6,0(r23)
    2b24:	d9c15117 	ldw	r7,1348(sp)
    2b28:	1145883a 	add	r2,r2,r5
    2b2c:	113ff404 	addi	r4,r2,-48
    2b30:	30bff404 	addi	r2,r6,-48
    2b34:	d9814d15 	stw	r6,1332(sp)
    2b38:	bdc00044 	addi	r23,r23,1
    2b3c:	80bff42e 	bgeu	r16,r2,2b10 <___vfprintf_internal_r+0x1250>
    2b40:	2027883a 	mov	r19,r4
    2b44:	203bdf0e 	bge	r4,zero,1ac4 <___vfprintf_internal_r+0x204>
    2b48:	04ffffc4 	movi	r19,-1
    2b4c:	003bdd06 	br	1ac4 <___vfprintf_internal_r+0x204>
    2b50:	d8000405 	stb	zero,16(sp)
    2b54:	39800017 	ldw	r6,0(r7)
    2b58:	39c00104 	addi	r7,r7,4
    2b5c:	d9c14015 	stw	r7,1280(sp)
    2b60:	d9814115 	stw	r6,1284(sp)
    2b64:	3001c926 	beq	r6,zero,328c <___vfprintf_internal_r+0x19cc>
    2b68:	98000e16 	blt	r19,zero,2ba4 <___vfprintf_internal_r+0x12e4>
    2b6c:	d9014117 	ldw	r4,1284(sp)
    2b70:	000b883a 	mov	r5,zero
    2b74:	980d883a 	mov	r6,r19
    2b78:	00064680 	call	6468 <memchr>
    2b7c:	10025926 	beq	r2,zero,34e4 <___vfprintf_internal_r+0x1c24>
    2b80:	d8c14117 	ldw	r3,1284(sp)
    2b84:	10cfc83a 	sub	r7,r2,r3
    2b88:	99c19e16 	blt	r19,r7,3204 <___vfprintf_internal_r+0x1944>
    2b8c:	d9c14515 	stw	r7,1300(sp)
    2b90:	38000916 	blt	r7,zero,2bb8 <___vfprintf_internal_r+0x12f8>
    2b94:	d8014615 	stw	zero,1304(sp)
    2b98:	003deb06 	br	2348 <___vfprintf_internal_r+0xa88>
    2b9c:	b8c00007 	ldb	r3,0(r23)
    2ba0:	003bc606 	br	1abc <___vfprintf_internal_r+0x1fc>
    2ba4:	d9014117 	ldw	r4,1284(sp)
    2ba8:	00017f40 	call	17f4 <strlen>
    2bac:	d8814515 	stw	r2,1300(sp)
    2bb0:	100f883a 	mov	r7,r2
    2bb4:	103ff70e 	bge	r2,zero,2b94 <___vfprintf_internal_r+0x12d4>
    2bb8:	d8014515 	stw	zero,1300(sp)
    2bbc:	d8014615 	stw	zero,1304(sp)
    2bc0:	003de106 	br	2348 <___vfprintf_internal_r+0xa88>
    2bc4:	20c03fcc 	andi	r3,r4,255
    2bc8:	00800044 	movi	r2,1
    2bcc:	18802d26 	beq	r3,r2,2c84 <___vfprintf_internal_r+0x13c4>
    2bd0:	18800e36 	bltu	r3,r2,2c0c <___vfprintf_internal_r+0x134c>
    2bd4:	00800084 	movi	r2,2
    2bd8:	1880fa26 	beq	r3,r2,2fc4 <___vfprintf_internal_r+0x1704>
    2bdc:	01000074 	movhi	r4,1
    2be0:	21365604 	addi	r4,r4,-9896
    2be4:	00017f40 	call	17f4 <strlen>
    2be8:	100f883a 	mov	r7,r2
    2bec:	dcc14515 	stw	r19,1300(sp)
    2bf0:	9880010e 	bge	r19,r2,2bf8 <___vfprintf_internal_r+0x1338>
    2bf4:	d8814515 	stw	r2,1300(sp)
    2bf8:	00800074 	movhi	r2,1
    2bfc:	10b65604 	addi	r2,r2,-9896
    2c00:	dcc14615 	stw	r19,1304(sp)
    2c04:	d8814115 	stw	r2,1284(sp)
    2c08:	003dcf06 	br	2348 <___vfprintf_internal_r+0xa88>
    2c0c:	d9401904 	addi	r5,sp,100
    2c10:	dd000f04 	addi	r20,sp,60
    2c14:	d9414115 	stw	r5,1284(sp)
    2c18:	880a977a 	slli	r5,r17,29
    2c1c:	d9814117 	ldw	r6,1284(sp)
    2c20:	8004d0fa 	srli	r2,r16,3
    2c24:	8806d0fa 	srli	r3,r17,3
    2c28:	810001cc 	andi	r4,r16,7
    2c2c:	2884b03a 	or	r2,r5,r2
    2c30:	31bfffc4 	addi	r6,r6,-1
    2c34:	21000c04 	addi	r4,r4,48
    2c38:	d9814115 	stw	r6,1284(sp)
    2c3c:	10cab03a 	or	r5,r2,r3
    2c40:	31000005 	stb	r4,0(r6)
    2c44:	1021883a 	mov	r16,r2
    2c48:	1823883a 	mov	r17,r3
    2c4c:	283ff21e 	bne	r5,zero,2c18 <___vfprintf_internal_r+0x1358>
    2c50:	d8c14c17 	ldw	r3,1328(sp)
    2c54:	1880004c 	andi	r2,r3,1
    2c58:	1005003a 	cmpeq	r2,r2,zero
    2c5c:	103db31e 	bne	r2,zero,232c <___vfprintf_internal_r+0xa6c>
    2c60:	20803fcc 	andi	r2,r4,255
    2c64:	1080201c 	xori	r2,r2,128
    2c68:	10bfe004 	addi	r2,r2,-128
    2c6c:	00c00c04 	movi	r3,48
    2c70:	10fdae26 	beq	r2,r3,232c <___vfprintf_internal_r+0xa6c>
    2c74:	31bfffc4 	addi	r6,r6,-1
    2c78:	d9814115 	stw	r6,1284(sp)
    2c7c:	30c00005 	stb	r3,0(r6)
    2c80:	003daa06 	br	232c <___vfprintf_internal_r+0xa6c>
    2c84:	88800068 	cmpgeui	r2,r17,1
    2c88:	10002c1e 	bne	r2,zero,2d3c <___vfprintf_internal_r+0x147c>
    2c8c:	8800021e 	bne	r17,zero,2c98 <___vfprintf_internal_r+0x13d8>
    2c90:	00800244 	movi	r2,9
    2c94:	14002936 	bltu	r2,r16,2d3c <___vfprintf_internal_r+0x147c>
    2c98:	d90018c4 	addi	r4,sp,99
    2c9c:	dd000f04 	addi	r20,sp,60
    2ca0:	d9014115 	stw	r4,1284(sp)
    2ca4:	d9014117 	ldw	r4,1284(sp)
    2ca8:	80800c04 	addi	r2,r16,48
    2cac:	20800005 	stb	r2,0(r4)
    2cb0:	003d9e06 	br	232c <___vfprintf_internal_r+0xa6c>
    2cb4:	dc400d17 	ldw	r17,52(sp)
    2cb8:	07000074 	movhi	fp,1
    2cbc:	e7365d84 	addi	fp,fp,-9866
    2cc0:	9425883a 	add	r18,r18,r16
    2cc4:	8c400044 	addi	r17,r17,1
    2cc8:	008001c4 	movi	r2,7
    2ccc:	1f000015 	stw	fp,0(r3)
    2cd0:	1c000115 	stw	r16,4(r3)
    2cd4:	dc800e15 	stw	r18,56(sp)
    2cd8:	dc400d15 	stw	r17,52(sp)
    2cdc:	147ddc16 	blt	r2,r17,2450 <___vfprintf_internal_r+0xb90>
    2ce0:	18c00204 	addi	r3,r3,8
    2ce4:	003c7406 	br	1eb8 <___vfprintf_internal_r+0x5f8>
    2ce8:	01000084 	movi	r4,2
    2cec:	d8000405 	stb	zero,16(sp)
    2cf0:	003d8106 	br	22f8 <___vfprintf_internal_r+0xa38>
    2cf4:	d9814c17 	ldw	r6,1328(sp)
    2cf8:	30c4703a 	and	r2,r6,r3
    2cfc:	1005003a 	cmpeq	r2,r2,zero
    2d00:	103cb326 	beq	r2,zero,1fd0 <___vfprintf_internal_r+0x710>
    2d04:	d9014117 	ldw	r4,1284(sp)
    2d08:	94800044 	addi	r18,r18,1
    2d0c:	8c400044 	addi	r17,r17,1
    2d10:	008001c4 	movi	r2,7
    2d14:	a9000015 	stw	r4,0(r21)
    2d18:	a8c00115 	stw	r3,4(r21)
    2d1c:	dc800e15 	stw	r18,56(sp)
    2d20:	dc400d15 	stw	r17,52(sp)
    2d24:	147e6016 	blt	r2,r17,26a8 <___vfprintf_internal_r+0xde8>
    2d28:	acc00204 	addi	r19,r21,8
    2d2c:	003cd106 	br	2074 <___vfprintf_internal_r+0x7b4>
    2d30:	07000074 	movhi	fp,1
    2d34:	e7365d84 	addi	fp,fp,-9866
    2d38:	003c4906 	br	1e60 <___vfprintf_internal_r+0x5a0>
    2d3c:	dd000f04 	addi	r20,sp,60
    2d40:	dc801904 	addi	r18,sp,100
    2d44:	8009883a 	mov	r4,r16
    2d48:	880b883a 	mov	r5,r17
    2d4c:	01800284 	movi	r6,10
    2d50:	000f883a 	mov	r7,zero
    2d54:	0008ea80 	call	8ea8 <__umoddi3>
    2d58:	12000c04 	addi	r8,r2,48
    2d5c:	94bfffc4 	addi	r18,r18,-1
    2d60:	8009883a 	mov	r4,r16
    2d64:	880b883a 	mov	r5,r17
    2d68:	01800284 	movi	r6,10
    2d6c:	000f883a 	mov	r7,zero
    2d70:	92000005 	stb	r8,0(r18)
    2d74:	000883c0 	call	883c <__udivdi3>
    2d78:	1009883a 	mov	r4,r2
    2d7c:	1021883a 	mov	r16,r2
    2d80:	18800068 	cmpgeui	r2,r3,1
    2d84:	1823883a 	mov	r17,r3
    2d88:	103fee1e 	bne	r2,zero,2d44 <___vfprintf_internal_r+0x1484>
    2d8c:	1800021e 	bne	r3,zero,2d98 <___vfprintf_internal_r+0x14d8>
    2d90:	00800244 	movi	r2,9
    2d94:	113feb36 	bltu	r2,r4,2d44 <___vfprintf_internal_r+0x1484>
    2d98:	94bfffc4 	addi	r18,r18,-1
    2d9c:	dc814115 	stw	r18,1284(sp)
    2da0:	003fc006 	br	2ca4 <___vfprintf_internal_r+0x13e4>
    2da4:	d9014c17 	ldw	r4,1328(sp)
    2da8:	2080004c 	andi	r2,r4,1
    2dac:	10009a1e 	bne	r2,zero,3018 <___vfprintf_internal_r+0x1758>
    2db0:	d9401904 	addi	r5,sp,100
    2db4:	dd000f04 	addi	r20,sp,60
    2db8:	d9414115 	stw	r5,1284(sp)
    2dbc:	003d5b06 	br	232c <___vfprintf_internal_r+0xa6c>
    2dc0:	d9014f17 	ldw	r4,1340(sp)
    2dc4:	b00b883a 	mov	r5,r22
    2dc8:	d9800c04 	addi	r6,sp,48
    2dcc:	00018680 	call	1868 <__sprint_r>
    2dd0:	103c731e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2dd4:	dc800e17 	ldw	r18,56(sp)
    2dd8:	d8c01904 	addi	r3,sp,100
    2ddc:	003cf906 	br	21c4 <___vfprintf_internal_r+0x904>
    2de0:	d8c14c17 	ldw	r3,1328(sp)
    2de4:	1880040c 	andi	r2,r3,16
    2de8:	1000711e 	bne	r2,zero,2fb0 <___vfprintf_internal_r+0x16f0>
    2dec:	d9014c17 	ldw	r4,1328(sp)
    2df0:	2080100c 	andi	r2,r4,64
    2df4:	10006e26 	beq	r2,zero,2fb0 <___vfprintf_internal_r+0x16f0>
    2df8:	3c00000b 	ldhu	r16,0(r7)
    2dfc:	0023883a 	mov	r17,zero
    2e00:	39c00104 	addi	r7,r7,4
    2e04:	d9c14015 	stw	r7,1280(sp)
    2e08:	003efa06 	br	29f4 <___vfprintf_internal_r+0x1134>
    2e0c:	dc400d17 	ldw	r17,52(sp)
    2e10:	07000074 	movhi	fp,1
    2e14:	e7365d84 	addi	fp,fp,-9866
    2e18:	9425883a 	add	r18,r18,r16
    2e1c:	8c400044 	addi	r17,r17,1
    2e20:	008001c4 	movi	r2,7
    2e24:	1f000015 	stw	fp,0(r3)
    2e28:	1c000115 	stw	r16,4(r3)
    2e2c:	dc800e15 	stw	r18,56(sp)
    2e30:	dc400d15 	stw	r17,52(sp)
    2e34:	147d7016 	blt	r2,r17,23f8 <___vfprintf_internal_r+0xb38>
    2e38:	18c00204 	addi	r3,r3,8
    2e3c:	003d7506 	br	2414 <___vfprintf_internal_r+0xb54>
    2e40:	dc800e17 	ldw	r18,56(sp)
    2e44:	dc400d17 	ldw	r17,52(sp)
    2e48:	07000074 	movhi	fp,1
    2e4c:	e7366184 	addi	fp,fp,-9850
    2e50:	003bba06 	br	1d3c <___vfprintf_internal_r+0x47c>
    2e54:	d9014f17 	ldw	r4,1340(sp)
    2e58:	b00b883a 	mov	r5,r22
    2e5c:	d9800c04 	addi	r6,sp,48
    2e60:	00018680 	call	1868 <__sprint_r>
    2e64:	103c4e1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2e68:	dc800e17 	ldw	r18,56(sp)
    2e6c:	d8c01904 	addi	r3,sp,100
    2e70:	003ce306 	br	2200 <___vfprintf_internal_r+0x940>
    2e74:	3c000017 	ldw	r16,0(r7)
    2e78:	0009883a 	mov	r4,zero
    2e7c:	39c00104 	addi	r7,r7,4
    2e80:	0023883a 	mov	r17,zero
    2e84:	d9c14015 	stw	r7,1280(sp)
    2e88:	d8000405 	stb	zero,16(sp)
    2e8c:	003d1a06 	br	22f8 <___vfprintf_internal_r+0xa38>
    2e90:	38800017 	ldw	r2,0(r7)
    2e94:	39c00104 	addi	r7,r7,4
    2e98:	d9c14015 	stw	r7,1280(sp)
    2e9c:	1023d7fa 	srai	r17,r2,31
    2ea0:	1021883a 	mov	r16,r2
    2ea4:	003d1206 	br	22f0 <___vfprintf_internal_r+0xa30>
    2ea8:	3c000017 	ldw	r16,0(r7)
    2eac:	01000044 	movi	r4,1
    2eb0:	39c00104 	addi	r7,r7,4
    2eb4:	0023883a 	mov	r17,zero
    2eb8:	d9c14015 	stw	r7,1280(sp)
    2ebc:	d8000405 	stb	zero,16(sp)
    2ec0:	003d0d06 	br	22f8 <___vfprintf_internal_r+0xa38>
    2ec4:	00800074 	movhi	r2,1
    2ec8:	10b65d04 	addi	r2,r2,-9868
    2ecc:	94800044 	addi	r18,r18,1
    2ed0:	8c400044 	addi	r17,r17,1
    2ed4:	a8800015 	stw	r2,0(r21)
    2ed8:	00c00044 	movi	r3,1
    2edc:	008001c4 	movi	r2,7
    2ee0:	a8c00115 	stw	r3,4(r21)
    2ee4:	dc800e15 	stw	r18,56(sp)
    2ee8:	dc400d15 	stw	r17,52(sp)
    2eec:	1440ca16 	blt	r2,r17,3218 <___vfprintf_internal_r+0x1958>
    2ef0:	a8c00204 	addi	r3,r21,8
    2ef4:	2000061e 	bne	r4,zero,2f10 <___vfprintf_internal_r+0x1650>
    2ef8:	d9414717 	ldw	r5,1308(sp)
    2efc:	2800041e 	bne	r5,zero,2f10 <___vfprintf_internal_r+0x1650>
    2f00:	d9814c17 	ldw	r6,1328(sp)
    2f04:	3080004c 	andi	r2,r6,1
    2f08:	1005003a 	cmpeq	r2,r2,zero
    2f0c:	103bea1e 	bne	r2,zero,1eb8 <___vfprintf_internal_r+0x5f8>
    2f10:	00800044 	movi	r2,1
    2f14:	dc400d17 	ldw	r17,52(sp)
    2f18:	18800115 	stw	r2,4(r3)
    2f1c:	d8814917 	ldw	r2,1316(sp)
    2f20:	94800044 	addi	r18,r18,1
    2f24:	8c400044 	addi	r17,r17,1
    2f28:	18800015 	stw	r2,0(r3)
    2f2c:	008001c4 	movi	r2,7
    2f30:	dc800e15 	stw	r18,56(sp)
    2f34:	dc400d15 	stw	r17,52(sp)
    2f38:	1440ca16 	blt	r2,r17,3264 <___vfprintf_internal_r+0x19a4>
    2f3c:	18c00204 	addi	r3,r3,8
    2f40:	0121c83a 	sub	r16,zero,r4
    2f44:	0400500e 	bge	zero,r16,3088 <___vfprintf_internal_r+0x17c8>
    2f48:	00800404 	movi	r2,16
    2f4c:	1400800e 	bge	r2,r16,3150 <___vfprintf_internal_r+0x1890>
    2f50:	1027883a 	mov	r19,r2
    2f54:	07000074 	movhi	fp,1
    2f58:	e7365d84 	addi	fp,fp,-9866
    2f5c:	050001c4 	movi	r20,7
    2f60:	00000306 	br	2f70 <___vfprintf_internal_r+0x16b0>
    2f64:	18c00204 	addi	r3,r3,8
    2f68:	843ffc04 	addi	r16,r16,-16
    2f6c:	9c007a0e 	bge	r19,r16,3158 <___vfprintf_internal_r+0x1898>
    2f70:	94800404 	addi	r18,r18,16
    2f74:	8c400044 	addi	r17,r17,1
    2f78:	1f000015 	stw	fp,0(r3)
    2f7c:	1cc00115 	stw	r19,4(r3)
    2f80:	dc800e15 	stw	r18,56(sp)
    2f84:	dc400d15 	stw	r17,52(sp)
    2f88:	a47ff60e 	bge	r20,r17,2f64 <___vfprintf_internal_r+0x16a4>
    2f8c:	d9014f17 	ldw	r4,1340(sp)
    2f90:	b00b883a 	mov	r5,r22
    2f94:	d9800c04 	addi	r6,sp,48
    2f98:	00018680 	call	1868 <__sprint_r>
    2f9c:	103c001e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    2fa0:	dc800e17 	ldw	r18,56(sp)
    2fa4:	dc400d17 	ldw	r17,52(sp)
    2fa8:	d8c01904 	addi	r3,sp,100
    2fac:	003fee06 	br	2f68 <___vfprintf_internal_r+0x16a8>
    2fb0:	3c000017 	ldw	r16,0(r7)
    2fb4:	0023883a 	mov	r17,zero
    2fb8:	39c00104 	addi	r7,r7,4
    2fbc:	d9c14015 	stw	r7,1280(sp)
    2fc0:	003e8c06 	br	29f4 <___vfprintf_internal_r+0x1134>
    2fc4:	d9401904 	addi	r5,sp,100
    2fc8:	dd000f04 	addi	r20,sp,60
    2fcc:	d9414115 	stw	r5,1284(sp)
    2fd0:	d9814417 	ldw	r6,1296(sp)
    2fd4:	880a973a 	slli	r5,r17,28
    2fd8:	8004d13a 	srli	r2,r16,4
    2fdc:	810003cc 	andi	r4,r16,15
    2fe0:	3109883a 	add	r4,r6,r4
    2fe4:	2884b03a 	or	r2,r5,r2
    2fe8:	21400003 	ldbu	r5,0(r4)
    2fec:	d9014117 	ldw	r4,1284(sp)
    2ff0:	8806d13a 	srli	r3,r17,4
    2ff4:	1021883a 	mov	r16,r2
    2ff8:	213fffc4 	addi	r4,r4,-1
    2ffc:	d9014115 	stw	r4,1284(sp)
    3000:	d9814117 	ldw	r6,1284(sp)
    3004:	10c8b03a 	or	r4,r2,r3
    3008:	1823883a 	mov	r17,r3
    300c:	31400005 	stb	r5,0(r6)
    3010:	203fef1e 	bne	r4,zero,2fd0 <___vfprintf_internal_r+0x1710>
    3014:	003cc506 	br	232c <___vfprintf_internal_r+0xa6c>
    3018:	00800c04 	movi	r2,48
    301c:	d98018c4 	addi	r6,sp,99
    3020:	dd000f04 	addi	r20,sp,60
    3024:	d88018c5 	stb	r2,99(sp)
    3028:	d9814115 	stw	r6,1284(sp)
    302c:	003cbf06 	br	232c <___vfprintf_internal_r+0xa6c>
    3030:	dc400d17 	ldw	r17,52(sp)
    3034:	07000074 	movhi	fp,1
    3038:	e7366184 	addi	fp,fp,-9850
    303c:	003bc106 	br	1f44 <___vfprintf_internal_r+0x684>
    3040:	d9414c17 	ldw	r5,1328(sp)
    3044:	2880040c 	andi	r2,r5,16
    3048:	10007c26 	beq	r2,zero,323c <___vfprintf_internal_r+0x197c>
    304c:	38800017 	ldw	r2,0(r7)
    3050:	39c00104 	addi	r7,r7,4
    3054:	d9c14015 	stw	r7,1280(sp)
    3058:	d9814b17 	ldw	r6,1324(sp)
    305c:	d9c14017 	ldw	r7,1280(sp)
    3060:	11800015 	stw	r6,0(r2)
    3064:	003a7206 	br	1a30 <___vfprintf_internal_r+0x170>
    3068:	d9014f17 	ldw	r4,1340(sp)
    306c:	b00b883a 	mov	r5,r22
    3070:	d9800c04 	addi	r6,sp,48
    3074:	00018680 	call	1868 <__sprint_r>
    3078:	103bc91e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    307c:	dc800e17 	ldw	r18,56(sp)
    3080:	dc400d17 	ldw	r17,52(sp)
    3084:	d8c01904 	addi	r3,sp,100
    3088:	d9014717 	ldw	r4,1308(sp)
    308c:	d9414117 	ldw	r5,1284(sp)
    3090:	8c400044 	addi	r17,r17,1
    3094:	9125883a 	add	r18,r18,r4
    3098:	008001c4 	movi	r2,7
    309c:	19400015 	stw	r5,0(r3)
    30a0:	19000115 	stw	r4,4(r3)
    30a4:	dc800e15 	stw	r18,56(sp)
    30a8:	dc400d15 	stw	r17,52(sp)
    30ac:	147ce816 	blt	r2,r17,2450 <___vfprintf_internal_r+0xb90>
    30b0:	18c00204 	addi	r3,r3,8
    30b4:	003b8006 	br	1eb8 <___vfprintf_internal_r+0x5f8>
    30b8:	38c00017 	ldw	r3,0(r7)
    30bc:	39000204 	addi	r4,r7,8
    30c0:	d9014015 	stw	r4,1280(sp)
    30c4:	d8c14215 	stw	r3,1288(sp)
    30c8:	39c00117 	ldw	r7,4(r7)
    30cc:	d9c14315 	stw	r7,1292(sp)
    30d0:	003e1a06 	br	293c <___vfprintf_internal_r+0x107c>
    30d4:	0005883a 	mov	r2,zero
    30d8:	1409c83a 	sub	r4,r2,r16
    30dc:	1105803a 	cmpltu	r2,r2,r4
    30e0:	044bc83a 	sub	r5,zero,r17
    30e4:	2885c83a 	sub	r2,r5,r2
    30e8:	2021883a 	mov	r16,r4
    30ec:	1023883a 	mov	r17,r2
    30f0:	01000044 	movi	r4,1
    30f4:	00800b44 	movi	r2,45
    30f8:	d8800405 	stb	r2,16(sp)
    30fc:	003c7e06 	br	22f8 <___vfprintf_internal_r+0xa38>
    3100:	d9014f17 	ldw	r4,1340(sp)
    3104:	b00b883a 	mov	r5,r22
    3108:	d9800c04 	addi	r6,sp,48
    310c:	00018680 	call	1868 <__sprint_r>
    3110:	103ba31e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    3114:	dc800e17 	ldw	r18,56(sp)
    3118:	dc400d17 	ldw	r17,52(sp)
    311c:	d9000517 	ldw	r4,20(sp)
    3120:	d9401904 	addi	r5,sp,100
    3124:	003da106 	br	27ac <___vfprintf_internal_r+0xeec>
    3128:	d9014f17 	ldw	r4,1340(sp)
    312c:	b00b883a 	mov	r5,r22
    3130:	d9800c04 	addi	r6,sp,48
    3134:	00018680 	call	1868 <__sprint_r>
    3138:	103b991e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    313c:	dc800e17 	ldw	r18,56(sp)
    3140:	dc400d17 	ldw	r17,52(sp)
    3144:	d9000517 	ldw	r4,20(sp)
    3148:	d8c01904 	addi	r3,sp,100
    314c:	003d8b06 	br	277c <___vfprintf_internal_r+0xebc>
    3150:	07000074 	movhi	fp,1
    3154:	e7365d84 	addi	fp,fp,-9866
    3158:	9425883a 	add	r18,r18,r16
    315c:	8c400044 	addi	r17,r17,1
    3160:	008001c4 	movi	r2,7
    3164:	1f000015 	stw	fp,0(r3)
    3168:	1c000115 	stw	r16,4(r3)
    316c:	dc800e15 	stw	r18,56(sp)
    3170:	dc400d15 	stw	r17,52(sp)
    3174:	147fbc16 	blt	r2,r17,3068 <___vfprintf_internal_r+0x17a8>
    3178:	18c00204 	addi	r3,r3,8
    317c:	003fc206 	br	3088 <___vfprintf_internal_r+0x17c8>
    3180:	d9014f17 	ldw	r4,1340(sp)
    3184:	b00b883a 	mov	r5,r22
    3188:	d9800c04 	addi	r6,sp,48
    318c:	00018680 	call	1868 <__sprint_r>
    3190:	103b831e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    3194:	dc800e17 	ldw	r18,56(sp)
    3198:	d9000517 	ldw	r4,20(sp)
    319c:	d8c01904 	addi	r3,sp,100
    31a0:	003cfc06 	br	2594 <___vfprintf_internal_r+0xcd4>
    31a4:	07000074 	movhi	fp,1
    31a8:	e7365d84 	addi	fp,fp,-9866
    31ac:	003bde06 	br	2128 <___vfprintf_internal_r+0x868>
    31b0:	00800074 	movhi	r2,1
    31b4:	10b64c04 	addi	r2,r2,-9936
    31b8:	d8814115 	stw	r2,1284(sp)
    31bc:	003def06 	br	297c <___vfprintf_internal_r+0x10bc>
    31c0:	d9014217 	ldw	r4,1288(sp)
    31c4:	d9414317 	ldw	r5,1292(sp)
    31c8:	00080100 	call	8010 <__isnand>
    31cc:	10003926 	beq	r2,zero,32b4 <___vfprintf_internal_r+0x19f4>
    31d0:	d9414d17 	ldw	r5,1332(sp)
    31d4:	008011c4 	movi	r2,71
    31d8:	1140ce16 	blt	r2,r5,3514 <___vfprintf_internal_r+0x1c54>
    31dc:	01800074 	movhi	r6,1
    31e0:	31b64d04 	addi	r6,r6,-9932
    31e4:	d9814115 	stw	r6,1284(sp)
    31e8:	003de406 	br	297c <___vfprintf_internal_r+0x10bc>
    31ec:	d9014c17 	ldw	r4,1328(sp)
    31f0:	bdc00044 	addi	r23,r23,1
    31f4:	b8c00007 	ldb	r3,0(r23)
    31f8:	21000814 	ori	r4,r4,32
    31fc:	d9014c15 	stw	r4,1328(sp)
    3200:	003a2e06 	br	1abc <___vfprintf_internal_r+0x1fc>
    3204:	dcc14515 	stw	r19,1300(sp)
    3208:	98011016 	blt	r19,zero,364c <___vfprintf_internal_r+0x1d8c>
    320c:	980f883a 	mov	r7,r19
    3210:	d8014615 	stw	zero,1304(sp)
    3214:	003c4c06 	br	2348 <___vfprintf_internal_r+0xa88>
    3218:	d9014f17 	ldw	r4,1340(sp)
    321c:	b00b883a 	mov	r5,r22
    3220:	d9800c04 	addi	r6,sp,48
    3224:	00018680 	call	1868 <__sprint_r>
    3228:	103b5d1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    322c:	dc800e17 	ldw	r18,56(sp)
    3230:	d9000517 	ldw	r4,20(sp)
    3234:	d8c01904 	addi	r3,sp,100
    3238:	003f2e06 	br	2ef4 <___vfprintf_internal_r+0x1634>
    323c:	d8c14c17 	ldw	r3,1328(sp)
    3240:	1880100c 	andi	r2,r3,64
    3244:	1000a026 	beq	r2,zero,34c8 <___vfprintf_internal_r+0x1c08>
    3248:	38800017 	ldw	r2,0(r7)
    324c:	39c00104 	addi	r7,r7,4
    3250:	d9c14015 	stw	r7,1280(sp)
    3254:	d9014b17 	ldw	r4,1324(sp)
    3258:	d9c14017 	ldw	r7,1280(sp)
    325c:	1100000d 	sth	r4,0(r2)
    3260:	0039f306 	br	1a30 <___vfprintf_internal_r+0x170>
    3264:	d9014f17 	ldw	r4,1340(sp)
    3268:	b00b883a 	mov	r5,r22
    326c:	d9800c04 	addi	r6,sp,48
    3270:	00018680 	call	1868 <__sprint_r>
    3274:	103b4a1e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    3278:	dc800e17 	ldw	r18,56(sp)
    327c:	dc400d17 	ldw	r17,52(sp)
    3280:	d9000517 	ldw	r4,20(sp)
    3284:	d8c01904 	addi	r3,sp,100
    3288:	003f2d06 	br	2f40 <___vfprintf_internal_r+0x1680>
    328c:	00800184 	movi	r2,6
    3290:	14c09a36 	bltu	r2,r19,34fc <___vfprintf_internal_r+0x1c3c>
    3294:	dcc14515 	stw	r19,1300(sp)
    3298:	9800010e 	bge	r19,zero,32a0 <___vfprintf_internal_r+0x19e0>
    329c:	d8014515 	stw	zero,1300(sp)
    32a0:	00800074 	movhi	r2,1
    32a4:	10b64f04 	addi	r2,r2,-9924
    32a8:	980f883a 	mov	r7,r19
    32ac:	d8814115 	stw	r2,1284(sp)
    32b0:	003a7206 	br	1c7c <___vfprintf_internal_r+0x3bc>
    32b4:	00bfffc4 	movi	r2,-1
    32b8:	9880e226 	beq	r19,r2,3644 <___vfprintf_internal_r+0x1d84>
    32bc:	d9414d17 	ldw	r5,1332(sp)
    32c0:	008019c4 	movi	r2,103
    32c4:	2880dc26 	beq	r5,r2,3638 <___vfprintf_internal_r+0x1d78>
    32c8:	008011c4 	movi	r2,71
    32cc:	2880da26 	beq	r5,r2,3638 <___vfprintf_internal_r+0x1d78>
    32d0:	d9414c17 	ldw	r5,1328(sp)
    32d4:	d9014317 	ldw	r4,1292(sp)
    32d8:	d9814217 	ldw	r6,1288(sp)
    32dc:	29404014 	ori	r5,r5,256
    32e0:	d9414c15 	stw	r5,1328(sp)
    32e4:	2000cc16 	blt	r4,zero,3618 <___vfprintf_internal_r+0x1d58>
    32e8:	3021883a 	mov	r16,r6
    32ec:	2023883a 	mov	r17,r4
    32f0:	0039883a 	mov	fp,zero
    32f4:	d9414d17 	ldw	r5,1332(sp)
    32f8:	00801984 	movi	r2,102
    32fc:	2880b726 	beq	r5,r2,35dc <___vfprintf_internal_r+0x1d1c>
    3300:	00801184 	movi	r2,70
    3304:	2880b526 	beq	r5,r2,35dc <___vfprintf_internal_r+0x1d1c>
    3308:	00801944 	movi	r2,101
    330c:	2880c826 	beq	r5,r2,3630 <___vfprintf_internal_r+0x1d70>
    3310:	00801144 	movi	r2,69
    3314:	2880c626 	beq	r5,r2,3630 <___vfprintf_internal_r+0x1d70>
    3318:	9829883a 	mov	r20,r19
    331c:	d9014f17 	ldw	r4,1340(sp)
    3320:	d8800504 	addi	r2,sp,20
    3324:	880d883a 	mov	r6,r17
    3328:	d8800115 	stw	r2,4(sp)
    332c:	d8c00604 	addi	r3,sp,24
    3330:	d8800704 	addi	r2,sp,28
    3334:	800b883a 	mov	r5,r16
    3338:	01c00084 	movi	r7,2
    333c:	d8c00215 	stw	r3,8(sp)
    3340:	d8800315 	stw	r2,12(sp)
    3344:	dd000015 	stw	r20,0(sp)
    3348:	0003cdc0 	call	3cdc <_dtoa_r>
    334c:	d9814d17 	ldw	r6,1332(sp)
    3350:	d8814115 	stw	r2,1284(sp)
    3354:	008019c4 	movi	r2,103
    3358:	30809526 	beq	r6,r2,35b0 <___vfprintf_internal_r+0x1cf0>
    335c:	d8c14d17 	ldw	r3,1332(sp)
    3360:	008011c4 	movi	r2,71
    3364:	18809226 	beq	r3,r2,35b0 <___vfprintf_internal_r+0x1cf0>
    3368:	d9414117 	ldw	r5,1284(sp)
    336c:	d9814d17 	ldw	r6,1332(sp)
    3370:	00801984 	movi	r2,102
    3374:	2d25883a 	add	r18,r5,r20
    3378:	30808626 	beq	r6,r2,3594 <___vfprintf_internal_r+0x1cd4>
    337c:	00801184 	movi	r2,70
    3380:	30808426 	beq	r6,r2,3594 <___vfprintf_internal_r+0x1cd4>
    3384:	000d883a 	mov	r6,zero
    3388:	000f883a 	mov	r7,zero
    338c:	880b883a 	mov	r5,r17
    3390:	8009883a 	mov	r4,r16
    3394:	000a0280 	call	a028 <__eqdf2>
    3398:	1000751e 	bne	r2,zero,3570 <___vfprintf_internal_r+0x1cb0>
    339c:	9005883a 	mov	r2,r18
    33a0:	dc800715 	stw	r18,28(sp)
    33a4:	d9014117 	ldw	r4,1284(sp)
    33a8:	d9414d17 	ldw	r5,1332(sp)
    33ac:	00c019c4 	movi	r3,103
    33b0:	1125c83a 	sub	r18,r2,r4
    33b4:	28c06826 	beq	r5,r3,3558 <___vfprintf_internal_r+0x1c98>
    33b8:	008011c4 	movi	r2,71
    33bc:	28806626 	beq	r5,r2,3558 <___vfprintf_internal_r+0x1c98>
    33c0:	d9000517 	ldw	r4,20(sp)
    33c4:	d8c14d17 	ldw	r3,1332(sp)
    33c8:	00801944 	movi	r2,101
    33cc:	10c05516 	blt	r2,r3,3524 <___vfprintf_internal_r+0x1c64>
    33d0:	213fffc4 	addi	r4,r4,-1
    33d4:	d9000515 	stw	r4,20(sp)
    33d8:	d8c00805 	stb	r3,32(sp)
    33dc:	2021883a 	mov	r16,r4
    33e0:	2000c116 	blt	r4,zero,36e8 <___vfprintf_internal_r+0x1e28>
    33e4:	00800ac4 	movi	r2,43
    33e8:	d8800845 	stb	r2,33(sp)
    33ec:	00800244 	movi	r2,9
    33f0:	1400af0e 	bge	r2,r16,36b0 <___vfprintf_internal_r+0x1df0>
    33f4:	1027883a 	mov	r19,r2
    33f8:	dc400b84 	addi	r17,sp,46
    33fc:	8009883a 	mov	r4,r16
    3400:	01400284 	movi	r5,10
    3404:	000a7100 	call	a710 <__modsi3>
    3408:	10800c04 	addi	r2,r2,48
    340c:	8c7fffc4 	addi	r17,r17,-1
    3410:	8009883a 	mov	r4,r16
    3414:	01400284 	movi	r5,10
    3418:	88800005 	stb	r2,0(r17)
    341c:	000a6b00 	call	a6b0 <__divsi3>
    3420:	1021883a 	mov	r16,r2
    3424:	98bff516 	blt	r19,r2,33fc <___vfprintf_internal_r+0x1b3c>
    3428:	10c00c04 	addi	r3,r2,48
    342c:	d88009c4 	addi	r2,sp,39
    3430:	108001c4 	addi	r2,r2,7
    3434:	897fffc4 	addi	r5,r17,-1
    3438:	88ffffc5 	stb	r3,-1(r17)
    343c:	2880a72e 	bgeu	r5,r2,36dc <___vfprintf_internal_r+0x1e1c>
    3440:	1009883a 	mov	r4,r2
    3444:	d9800804 	addi	r6,sp,32
    3448:	d8c00884 	addi	r3,sp,34
    344c:	28800003 	ldbu	r2,0(r5)
    3450:	29400044 	addi	r5,r5,1
    3454:	18800005 	stb	r2,0(r3)
    3458:	18c00044 	addi	r3,r3,1
    345c:	293ffb36 	bltu	r5,r4,344c <___vfprintf_internal_r+0x1b8c>
    3460:	1987c83a 	sub	r3,r3,r6
    3464:	00800044 	movi	r2,1
    3468:	d8c14815 	stw	r3,1312(sp)
    346c:	90cf883a 	add	r7,r18,r3
    3470:	1480960e 	bge	r2,r18,36cc <___vfprintf_internal_r+0x1e0c>
    3474:	39c00044 	addi	r7,r7,1
    3478:	d9c14515 	stw	r7,1300(sp)
    347c:	38003416 	blt	r7,zero,3550 <___vfprintf_internal_r+0x1c90>
    3480:	e0803fcc 	andi	r2,fp,255
    3484:	1080201c 	xori	r2,r2,128
    3488:	10bfe004 	addi	r2,r2,-128
    348c:	10004e26 	beq	r2,zero,35c8 <___vfprintf_internal_r+0x1d08>
    3490:	00800b44 	movi	r2,45
    3494:	dc814715 	stw	r18,1308(sp)
    3498:	d8014615 	stw	zero,1304(sp)
    349c:	d8800405 	stb	r2,16(sp)
    34a0:	003bab06 	br	2350 <___vfprintf_internal_r+0xa90>
    34a4:	00800b44 	movi	r2,45
    34a8:	d8800405 	stb	r2,16(sp)
    34ac:	003d2d06 	br	2964 <___vfprintf_internal_r+0x10a4>
    34b0:	d9014f17 	ldw	r4,1340(sp)
    34b4:	b00b883a 	mov	r5,r22
    34b8:	d9800c04 	addi	r6,sp,48
    34bc:	00018680 	call	1868 <__sprint_r>
    34c0:	103ab71e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x6e0>
    34c4:	003ab506 	br	1f9c <___vfprintf_internal_r+0x6dc>
    34c8:	38800017 	ldw	r2,0(r7)
    34cc:	39c00104 	addi	r7,r7,4
    34d0:	d9c14015 	stw	r7,1280(sp)
    34d4:	d9414b17 	ldw	r5,1324(sp)
    34d8:	d9c14017 	ldw	r7,1280(sp)
    34dc:	11400015 	stw	r5,0(r2)
    34e0:	00395306 	br	1a30 <___vfprintf_internal_r+0x170>
    34e4:	980f883a 	mov	r7,r19
    34e8:	dcc14515 	stw	r19,1300(sp)
    34ec:	d8014615 	stw	zero,1304(sp)
    34f0:	003b9506 	br	2348 <___vfprintf_internal_r+0xa88>
    34f4:	0027883a 	mov	r19,zero
    34f8:	00397206 	br	1ac4 <___vfprintf_internal_r+0x204>
    34fc:	00c00074 	movhi	r3,1
    3500:	18f64f04 	addi	r3,r3,-9924
    3504:	100f883a 	mov	r7,r2
    3508:	d8814515 	stw	r2,1300(sp)
    350c:	d8c14115 	stw	r3,1284(sp)
    3510:	0039da06 	br	1c7c <___vfprintf_internal_r+0x3bc>
    3514:	00800074 	movhi	r2,1
    3518:	10b64e04 	addi	r2,r2,-9928
    351c:	d8814115 	stw	r2,1284(sp)
    3520:	003d1606 	br	297c <___vfprintf_internal_r+0x10bc>
    3524:	d9414d17 	ldw	r5,1332(sp)
    3528:	00801984 	movi	r2,102
    352c:	28804926 	beq	r5,r2,3654 <___vfprintf_internal_r+0x1d94>
    3530:	200f883a 	mov	r7,r4
    3534:	24805716 	blt	r4,r18,3694 <___vfprintf_internal_r+0x1dd4>
    3538:	d9414c17 	ldw	r5,1328(sp)
    353c:	2880004c 	andi	r2,r5,1
    3540:	10000126 	beq	r2,zero,3548 <___vfprintf_internal_r+0x1c88>
    3544:	21c00044 	addi	r7,r4,1
    3548:	d9c14515 	stw	r7,1300(sp)
    354c:	383fcc0e 	bge	r7,zero,3480 <___vfprintf_internal_r+0x1bc0>
    3550:	d8014515 	stw	zero,1300(sp)
    3554:	003fca06 	br	3480 <___vfprintf_internal_r+0x1bc0>
    3558:	d9000517 	ldw	r4,20(sp)
    355c:	00bfff04 	movi	r2,-4
    3560:	1100480e 	bge	r2,r4,3684 <___vfprintf_internal_r+0x1dc4>
    3564:	99004716 	blt	r19,r4,3684 <___vfprintf_internal_r+0x1dc4>
    3568:	d8c14d15 	stw	r3,1332(sp)
    356c:	003ff006 	br	3530 <___vfprintf_internal_r+0x1c70>
    3570:	d8800717 	ldw	r2,28(sp)
    3574:	14bf8b2e 	bgeu	r2,r18,33a4 <___vfprintf_internal_r+0x1ae4>
    3578:	9007883a 	mov	r3,r18
    357c:	01000c04 	movi	r4,48
    3580:	11000005 	stb	r4,0(r2)
    3584:	10800044 	addi	r2,r2,1
    3588:	d8800715 	stw	r2,28(sp)
    358c:	18bffc1e 	bne	r3,r2,3580 <___vfprintf_internal_r+0x1cc0>
    3590:	003f8406 	br	33a4 <___vfprintf_internal_r+0x1ae4>
    3594:	d8814117 	ldw	r2,1284(sp)
    3598:	10c00007 	ldb	r3,0(r2)
    359c:	00800c04 	movi	r2,48
    35a0:	18805b26 	beq	r3,r2,3710 <___vfprintf_internal_r+0x1e50>
    35a4:	d9000517 	ldw	r4,20(sp)
    35a8:	9125883a 	add	r18,r18,r4
    35ac:	003f7506 	br	3384 <___vfprintf_internal_r+0x1ac4>
    35b0:	d9014c17 	ldw	r4,1328(sp)
    35b4:	2080004c 	andi	r2,r4,1
    35b8:	1005003a 	cmpeq	r2,r2,zero
    35bc:	103f6a26 	beq	r2,zero,3368 <___vfprintf_internal_r+0x1aa8>
    35c0:	d8800717 	ldw	r2,28(sp)
    35c4:	003f7706 	br	33a4 <___vfprintf_internal_r+0x1ae4>
    35c8:	d9c14515 	stw	r7,1300(sp)
    35cc:	38004d16 	blt	r7,zero,3704 <___vfprintf_internal_r+0x1e44>
    35d0:	dc814715 	stw	r18,1308(sp)
    35d4:	d8014615 	stw	zero,1304(sp)
    35d8:	003b5b06 	br	2348 <___vfprintf_internal_r+0xa88>
    35dc:	d9014f17 	ldw	r4,1340(sp)
    35e0:	d8800504 	addi	r2,sp,20
    35e4:	d8800115 	stw	r2,4(sp)
    35e8:	d8c00604 	addi	r3,sp,24
    35ec:	d8800704 	addi	r2,sp,28
    35f0:	800b883a 	mov	r5,r16
    35f4:	880d883a 	mov	r6,r17
    35f8:	01c000c4 	movi	r7,3
    35fc:	d8c00215 	stw	r3,8(sp)
    3600:	d8800315 	stw	r2,12(sp)
    3604:	dcc00015 	stw	r19,0(sp)
    3608:	9829883a 	mov	r20,r19
    360c:	0003cdc0 	call	3cdc <_dtoa_r>
    3610:	d8814115 	stw	r2,1284(sp)
    3614:	003f5106 	br	335c <___vfprintf_internal_r+0x1a9c>
    3618:	d8c14217 	ldw	r3,1288(sp)
    361c:	d9014317 	ldw	r4,1292(sp)
    3620:	07000b44 	movi	fp,45
    3624:	1821883a 	mov	r16,r3
    3628:	2460003c 	xorhi	r17,r4,32768
    362c:	003f3106 	br	32f4 <___vfprintf_internal_r+0x1a34>
    3630:	9d000044 	addi	r20,r19,1
    3634:	003f3906 	br	331c <___vfprintf_internal_r+0x1a5c>
    3638:	983f251e 	bne	r19,zero,32d0 <___vfprintf_internal_r+0x1a10>
    363c:	04c00044 	movi	r19,1
    3640:	003f2306 	br	32d0 <___vfprintf_internal_r+0x1a10>
    3644:	04c00184 	movi	r19,6
    3648:	003f2106 	br	32d0 <___vfprintf_internal_r+0x1a10>
    364c:	d8014515 	stw	zero,1300(sp)
    3650:	003eee06 	br	320c <___vfprintf_internal_r+0x194c>
    3654:	200f883a 	mov	r7,r4
    3658:	0100370e 	bge	zero,r4,3738 <___vfprintf_internal_r+0x1e78>
    365c:	9800031e 	bne	r19,zero,366c <___vfprintf_internal_r+0x1dac>
    3660:	d9814c17 	ldw	r6,1328(sp)
    3664:	3080004c 	andi	r2,r6,1
    3668:	103fb726 	beq	r2,zero,3548 <___vfprintf_internal_r+0x1c88>
    366c:	20800044 	addi	r2,r4,1
    3670:	98a7883a 	add	r19,r19,r2
    3674:	dcc14515 	stw	r19,1300(sp)
    3678:	980f883a 	mov	r7,r19
    367c:	983f800e 	bge	r19,zero,3480 <___vfprintf_internal_r+0x1bc0>
    3680:	003fb306 	br	3550 <___vfprintf_internal_r+0x1c90>
    3684:	d9814d17 	ldw	r6,1332(sp)
    3688:	31bfff84 	addi	r6,r6,-2
    368c:	d9814d15 	stw	r6,1332(sp)
    3690:	003f4c06 	br	33c4 <___vfprintf_internal_r+0x1b04>
    3694:	0100180e 	bge	zero,r4,36f8 <___vfprintf_internal_r+0x1e38>
    3698:	00800044 	movi	r2,1
    369c:	1485883a 	add	r2,r2,r18
    36a0:	d8814515 	stw	r2,1300(sp)
    36a4:	100f883a 	mov	r7,r2
    36a8:	103f750e 	bge	r2,zero,3480 <___vfprintf_internal_r+0x1bc0>
    36ac:	003fa806 	br	3550 <___vfprintf_internal_r+0x1c90>
    36b0:	80c00c04 	addi	r3,r16,48
    36b4:	00800c04 	movi	r2,48
    36b8:	d8c008c5 	stb	r3,35(sp)
    36bc:	d9800804 	addi	r6,sp,32
    36c0:	d8c00904 	addi	r3,sp,36
    36c4:	d8800885 	stb	r2,34(sp)
    36c8:	003f6506 	br	3460 <___vfprintf_internal_r+0x1ba0>
    36cc:	d9014c17 	ldw	r4,1328(sp)
    36d0:	2084703a 	and	r2,r4,r2
    36d4:	103f9c26 	beq	r2,zero,3548 <___vfprintf_internal_r+0x1c88>
    36d8:	003f6606 	br	3474 <___vfprintf_internal_r+0x1bb4>
    36dc:	d9800804 	addi	r6,sp,32
    36e0:	d8c00884 	addi	r3,sp,34
    36e4:	003f5e06 	br	3460 <___vfprintf_internal_r+0x1ba0>
    36e8:	00800b44 	movi	r2,45
    36ec:	0121c83a 	sub	r16,zero,r4
    36f0:	d8800845 	stb	r2,33(sp)
    36f4:	003f3d06 	br	33ec <___vfprintf_internal_r+0x1b2c>
    36f8:	00800084 	movi	r2,2
    36fc:	1105c83a 	sub	r2,r2,r4
    3700:	003fe606 	br	369c <___vfprintf_internal_r+0x1ddc>
    3704:	d8014515 	stw	zero,1300(sp)
    3708:	dc814715 	stw	r18,1308(sp)
    370c:	003fb106 	br	35d4 <___vfprintf_internal_r+0x1d14>
    3710:	000d883a 	mov	r6,zero
    3714:	000f883a 	mov	r7,zero
    3718:	8009883a 	mov	r4,r16
    371c:	880b883a 	mov	r5,r17
    3720:	000a0b00 	call	a0b0 <__nedf2>
    3724:	103f9f26 	beq	r2,zero,35a4 <___vfprintf_internal_r+0x1ce4>
    3728:	00800044 	movi	r2,1
    372c:	1509c83a 	sub	r4,r2,r20
    3730:	d9000515 	stw	r4,20(sp)
    3734:	003f9b06 	br	35a4 <___vfprintf_internal_r+0x1ce4>
    3738:	98000d1e 	bne	r19,zero,3770 <___vfprintf_internal_r+0x1eb0>
    373c:	d8c14c17 	ldw	r3,1328(sp)
    3740:	1880004c 	andi	r2,r3,1
    3744:	10000a1e 	bne	r2,zero,3770 <___vfprintf_internal_r+0x1eb0>
    3748:	01000044 	movi	r4,1
    374c:	200f883a 	mov	r7,r4
    3750:	d9014515 	stw	r4,1300(sp)
    3754:	003f4a06 	br	3480 <___vfprintf_internal_r+0x1bc0>
    3758:	3cc00017 	ldw	r19,0(r7)
    375c:	39c00104 	addi	r7,r7,4
    3760:	983d0e0e 	bge	r19,zero,2b9c <___vfprintf_internal_r+0x12dc>
    3764:	b8c00007 	ldb	r3,0(r23)
    3768:	04ffffc4 	movi	r19,-1
    376c:	0038d306 	br	1abc <___vfprintf_internal_r+0x1fc>
    3770:	9cc00084 	addi	r19,r19,2
    3774:	dcc14515 	stw	r19,1300(sp)
    3778:	980f883a 	mov	r7,r19
    377c:	983f400e 	bge	r19,zero,3480 <___vfprintf_internal_r+0x1bc0>
    3780:	003f7306 	br	3550 <___vfprintf_internal_r+0x1c90>

00003784 <__vfprintf_internal>:
    3784:	00800074 	movhi	r2,1
    3788:	10bd9a04 	addi	r2,r2,-2456
    378c:	2013883a 	mov	r9,r4
    3790:	11000017 	ldw	r4,0(r2)
    3794:	2805883a 	mov	r2,r5
    3798:	300f883a 	mov	r7,r6
    379c:	480b883a 	mov	r5,r9
    37a0:	100d883a 	mov	r6,r2
    37a4:	00018c01 	jmpi	18c0 <___vfprintf_internal_r>

000037a8 <__swsetup_r>:
    37a8:	00800074 	movhi	r2,1
    37ac:	10bd9a04 	addi	r2,r2,-2456
    37b0:	10c00017 	ldw	r3,0(r2)
    37b4:	defffd04 	addi	sp,sp,-12
    37b8:	dc400115 	stw	r17,4(sp)
    37bc:	dc000015 	stw	r16,0(sp)
    37c0:	dfc00215 	stw	ra,8(sp)
    37c4:	2023883a 	mov	r17,r4
    37c8:	2821883a 	mov	r16,r5
    37cc:	18000226 	beq	r3,zero,37d8 <__swsetup_r+0x30>
    37d0:	18800e17 	ldw	r2,56(r3)
    37d4:	10001f26 	beq	r2,zero,3854 <__swsetup_r+0xac>
    37d8:	8100030b 	ldhu	r4,12(r16)
    37dc:	2080020c 	andi	r2,r4,8
    37e0:	10002826 	beq	r2,zero,3884 <__swsetup_r+0xdc>
    37e4:	81400417 	ldw	r5,16(r16)
    37e8:	28001d26 	beq	r5,zero,3860 <__swsetup_r+0xb8>
    37ec:	2080004c 	andi	r2,r4,1
    37f0:	1005003a 	cmpeq	r2,r2,zero
    37f4:	10000b26 	beq	r2,zero,3824 <__swsetup_r+0x7c>
    37f8:	2080008c 	andi	r2,r4,2
    37fc:	10001226 	beq	r2,zero,3848 <__swsetup_r+0xa0>
    3800:	0005883a 	mov	r2,zero
    3804:	80800215 	stw	r2,8(r16)
    3808:	28000b26 	beq	r5,zero,3838 <__swsetup_r+0x90>
    380c:	0005883a 	mov	r2,zero
    3810:	dfc00217 	ldw	ra,8(sp)
    3814:	dc400117 	ldw	r17,4(sp)
    3818:	dc000017 	ldw	r16,0(sp)
    381c:	dec00304 	addi	sp,sp,12
    3820:	f800283a 	ret
    3824:	80800517 	ldw	r2,20(r16)
    3828:	80000215 	stw	zero,8(r16)
    382c:	0085c83a 	sub	r2,zero,r2
    3830:	80800615 	stw	r2,24(r16)
    3834:	283ff51e 	bne	r5,zero,380c <__swsetup_r+0x64>
    3838:	2080200c 	andi	r2,r4,128
    383c:	103ff326 	beq	r2,zero,380c <__swsetup_r+0x64>
    3840:	00bfffc4 	movi	r2,-1
    3844:	003ff206 	br	3810 <__swsetup_r+0x68>
    3848:	80800517 	ldw	r2,20(r16)
    384c:	80800215 	stw	r2,8(r16)
    3850:	003fed06 	br	3808 <__swsetup_r+0x60>
    3854:	1809883a 	mov	r4,r3
    3858:	00055280 	call	5528 <__sinit>
    385c:	003fde06 	br	37d8 <__swsetup_r+0x30>
    3860:	20c0a00c 	andi	r3,r4,640
    3864:	00808004 	movi	r2,512
    3868:	18bfe026 	beq	r3,r2,37ec <__swsetup_r+0x44>
    386c:	8809883a 	mov	r4,r17
    3870:	800b883a 	mov	r5,r16
    3874:	00062d40 	call	62d4 <__smakebuf_r>
    3878:	8100030b 	ldhu	r4,12(r16)
    387c:	81400417 	ldw	r5,16(r16)
    3880:	003fda06 	br	37ec <__swsetup_r+0x44>
    3884:	2080040c 	andi	r2,r4,16
    3888:	103fed26 	beq	r2,zero,3840 <__swsetup_r+0x98>
    388c:	2080010c 	andi	r2,r4,4
    3890:	10001226 	beq	r2,zero,38dc <__swsetup_r+0x134>
    3894:	81400c17 	ldw	r5,48(r16)
    3898:	28000526 	beq	r5,zero,38b0 <__swsetup_r+0x108>
    389c:	80801004 	addi	r2,r16,64
    38a0:	28800226 	beq	r5,r2,38ac <__swsetup_r+0x104>
    38a4:	8809883a 	mov	r4,r17
    38a8:	00058e00 	call	58e0 <_free_r>
    38ac:	80000c15 	stw	zero,48(r16)
    38b0:	8080030b 	ldhu	r2,12(r16)
    38b4:	81400417 	ldw	r5,16(r16)
    38b8:	80000115 	stw	zero,4(r16)
    38bc:	10bff6cc 	andi	r2,r2,65499
    38c0:	8080030d 	sth	r2,12(r16)
    38c4:	81400015 	stw	r5,0(r16)
    38c8:	8080030b 	ldhu	r2,12(r16)
    38cc:	10800214 	ori	r2,r2,8
    38d0:	113fffcc 	andi	r4,r2,65535
    38d4:	8080030d 	sth	r2,12(r16)
    38d8:	003fc306 	br	37e8 <__swsetup_r+0x40>
    38dc:	81400417 	ldw	r5,16(r16)
    38e0:	003ff906 	br	38c8 <__swsetup_r+0x120>

000038e4 <register_fini>:
    38e4:	f800283a 	ret

000038e8 <__call_exitprocs>:
    38e8:	00800074 	movhi	r2,1
    38ec:	10bd9b04 	addi	r2,r2,-2452
    38f0:	10800017 	ldw	r2,0(r2)
    38f4:	defff304 	addi	sp,sp,-52
    38f8:	df000b15 	stw	fp,44(sp)
    38fc:	d8800115 	stw	r2,4(sp)
    3900:	00800034 	movhi	r2,0
    3904:	1083b304 	addi	r2,r2,3788
    3908:	1005003a 	cmpeq	r2,r2,zero
    390c:	d8800215 	stw	r2,8(sp)
    3910:	d8800117 	ldw	r2,4(sp)
    3914:	dd400815 	stw	r21,32(sp)
    3918:	dd000715 	stw	r20,28(sp)
    391c:	10805204 	addi	r2,r2,328
    3920:	dfc00c15 	stw	ra,48(sp)
    3924:	ddc00a15 	stw	r23,40(sp)
    3928:	dd800915 	stw	r22,36(sp)
    392c:	dcc00615 	stw	r19,24(sp)
    3930:	dc800515 	stw	r18,20(sp)
    3934:	dc400415 	stw	r17,16(sp)
    3938:	dc000315 	stw	r16,12(sp)
    393c:	282b883a 	mov	r21,r5
    3940:	2039883a 	mov	fp,r4
    3944:	d8800015 	stw	r2,0(sp)
    3948:	2829003a 	cmpeq	r20,r5,zero
    394c:	d8800117 	ldw	r2,4(sp)
    3950:	14405217 	ldw	r17,328(r2)
    3954:	88001026 	beq	r17,zero,3998 <__call_exitprocs+0xb0>
    3958:	ddc00017 	ldw	r23,0(sp)
    395c:	88800117 	ldw	r2,4(r17)
    3960:	8c802204 	addi	r18,r17,136
    3964:	143fffc4 	addi	r16,r2,-1
    3968:	80000916 	blt	r16,zero,3990 <__call_exitprocs+0xa8>
    396c:	05bfffc4 	movi	r22,-1
    3970:	a000151e 	bne	r20,zero,39c8 <__call_exitprocs+0xe0>
    3974:	8409883a 	add	r4,r16,r16
    3978:	2105883a 	add	r2,r4,r4
    397c:	1485883a 	add	r2,r2,r18
    3980:	10c02017 	ldw	r3,128(r2)
    3984:	a8c01126 	beq	r21,r3,39cc <__call_exitprocs+0xe4>
    3988:	843fffc4 	addi	r16,r16,-1
    398c:	85bff81e 	bne	r16,r22,3970 <__call_exitprocs+0x88>
    3990:	d8800217 	ldw	r2,8(sp)
    3994:	10003126 	beq	r2,zero,3a5c <__call_exitprocs+0x174>
    3998:	dfc00c17 	ldw	ra,48(sp)
    399c:	df000b17 	ldw	fp,44(sp)
    39a0:	ddc00a17 	ldw	r23,40(sp)
    39a4:	dd800917 	ldw	r22,36(sp)
    39a8:	dd400817 	ldw	r21,32(sp)
    39ac:	dd000717 	ldw	r20,28(sp)
    39b0:	dcc00617 	ldw	r19,24(sp)
    39b4:	dc800517 	ldw	r18,20(sp)
    39b8:	dc400417 	ldw	r17,16(sp)
    39bc:	dc000317 	ldw	r16,12(sp)
    39c0:	dec00d04 	addi	sp,sp,52
    39c4:	f800283a 	ret
    39c8:	8409883a 	add	r4,r16,r16
    39cc:	88c00117 	ldw	r3,4(r17)
    39d0:	2105883a 	add	r2,r4,r4
    39d4:	1445883a 	add	r2,r2,r17
    39d8:	18ffffc4 	addi	r3,r3,-1
    39dc:	11800217 	ldw	r6,8(r2)
    39e0:	1c001526 	beq	r3,r16,3a38 <__call_exitprocs+0x150>
    39e4:	10000215 	stw	zero,8(r2)
    39e8:	303fe726 	beq	r6,zero,3988 <__call_exitprocs+0xa0>
    39ec:	00c00044 	movi	r3,1
    39f0:	1c06983a 	sll	r3,r3,r16
    39f4:	90804017 	ldw	r2,256(r18)
    39f8:	8cc00117 	ldw	r19,4(r17)
    39fc:	1884703a 	and	r2,r3,r2
    3a00:	10001426 	beq	r2,zero,3a54 <__call_exitprocs+0x16c>
    3a04:	90804117 	ldw	r2,260(r18)
    3a08:	1884703a 	and	r2,r3,r2
    3a0c:	10000c1e 	bne	r2,zero,3a40 <__call_exitprocs+0x158>
    3a10:	2105883a 	add	r2,r4,r4
    3a14:	1485883a 	add	r2,r2,r18
    3a18:	11400017 	ldw	r5,0(r2)
    3a1c:	e009883a 	mov	r4,fp
    3a20:	303ee83a 	callr	r6
    3a24:	88800117 	ldw	r2,4(r17)
    3a28:	98bfc81e 	bne	r19,r2,394c <__call_exitprocs+0x64>
    3a2c:	b8800017 	ldw	r2,0(r23)
    3a30:	147fd526 	beq	r2,r17,3988 <__call_exitprocs+0xa0>
    3a34:	003fc506 	br	394c <__call_exitprocs+0x64>
    3a38:	8c000115 	stw	r16,4(r17)
    3a3c:	003fea06 	br	39e8 <__call_exitprocs+0x100>
    3a40:	2105883a 	add	r2,r4,r4
    3a44:	1485883a 	add	r2,r2,r18
    3a48:	11000017 	ldw	r4,0(r2)
    3a4c:	303ee83a 	callr	r6
    3a50:	003ff406 	br	3a24 <__call_exitprocs+0x13c>
    3a54:	303ee83a 	callr	r6
    3a58:	003ff206 	br	3a24 <__call_exitprocs+0x13c>
    3a5c:	88800117 	ldw	r2,4(r17)
    3a60:	1000081e 	bne	r2,zero,3a84 <__call_exitprocs+0x19c>
    3a64:	89000017 	ldw	r4,0(r17)
    3a68:	20000726 	beq	r4,zero,3a88 <__call_exitprocs+0x1a0>
    3a6c:	b9000015 	stw	r4,0(r23)
    3a70:	8809883a 	mov	r4,r17
    3a74:	0000ecc0 	call	ecc <free>
    3a78:	bc400017 	ldw	r17,0(r23)
    3a7c:	883fb71e 	bne	r17,zero,395c <__call_exitprocs+0x74>
    3a80:	003fc506 	br	3998 <__call_exitprocs+0xb0>
    3a84:	89000017 	ldw	r4,0(r17)
    3a88:	882f883a 	mov	r23,r17
    3a8c:	2023883a 	mov	r17,r4
    3a90:	883fb21e 	bne	r17,zero,395c <__call_exitprocs+0x74>
    3a94:	003fc006 	br	3998 <__call_exitprocs+0xb0>

00003a98 <quorem>:
    3a98:	28c00417 	ldw	r3,16(r5)
    3a9c:	20800417 	ldw	r2,16(r4)
    3aa0:	defff104 	addi	sp,sp,-60
    3aa4:	dfc00e15 	stw	ra,56(sp)
    3aa8:	df000d15 	stw	fp,52(sp)
    3aac:	ddc00c15 	stw	r23,48(sp)
    3ab0:	dd800b15 	stw	r22,44(sp)
    3ab4:	dd400a15 	stw	r21,40(sp)
    3ab8:	dd000915 	stw	r20,36(sp)
    3abc:	dcc00815 	stw	r19,32(sp)
    3ac0:	dc800715 	stw	r18,28(sp)
    3ac4:	dc400615 	stw	r17,24(sp)
    3ac8:	dc000515 	stw	r16,20(sp)
    3acc:	d9000315 	stw	r4,12(sp)
    3ad0:	d9400415 	stw	r5,16(sp)
    3ad4:	10c07f16 	blt	r2,r3,3cd4 <quorem+0x23c>
    3ad8:	1d3fffc4 	addi	r20,r3,-1
    3adc:	d8c00417 	ldw	r3,16(sp)
    3ae0:	d9000317 	ldw	r4,12(sp)
    3ae4:	a505883a 	add	r2,r20,r20
    3ae8:	1085883a 	add	r2,r2,r2
    3aec:	1cc00504 	addi	r19,r3,20
    3af0:	25c00504 	addi	r23,r4,20
    3af4:	98ad883a 	add	r22,r19,r2
    3af8:	15c7883a 	add	r3,r2,r23
    3afc:	b1400017 	ldw	r5,0(r22)
    3b00:	19000017 	ldw	r4,0(r3)
    3b04:	d8c00015 	stw	r3,0(sp)
    3b08:	29400044 	addi	r5,r5,1
    3b0c:	d9000215 	stw	r4,8(sp)
    3b10:	000a7700 	call	a770 <__udivsi3>
    3b14:	1039883a 	mov	fp,r2
    3b18:	10003d1e 	bne	r2,zero,3c10 <quorem+0x178>
    3b1c:	d9400417 	ldw	r5,16(sp)
    3b20:	d9000317 	ldw	r4,12(sp)
    3b24:	00068c00 	call	68c0 <__mcmp>
    3b28:	10002c16 	blt	r2,zero,3bdc <quorem+0x144>
    3b2c:	e7000044 	addi	fp,fp,1
    3b30:	b80f883a 	mov	r7,r23
    3b34:	0011883a 	mov	r8,zero
    3b38:	0009883a 	mov	r4,zero
    3b3c:	99400017 	ldw	r5,0(r19)
    3b40:	38c00017 	ldw	r3,0(r7)
    3b44:	9cc00104 	addi	r19,r19,4
    3b48:	28bfffcc 	andi	r2,r5,65535
    3b4c:	2085883a 	add	r2,r4,r2
    3b50:	11bfffcc 	andi	r6,r2,65535
    3b54:	193fffcc 	andi	r4,r3,65535
    3b58:	1004d43a 	srli	r2,r2,16
    3b5c:	280ad43a 	srli	r5,r5,16
    3b60:	2189c83a 	sub	r4,r4,r6
    3b64:	2209883a 	add	r4,r4,r8
    3b68:	1806d43a 	srli	r3,r3,16
    3b6c:	288b883a 	add	r5,r5,r2
    3b70:	200dd43a 	srai	r6,r4,16
    3b74:	28bfffcc 	andi	r2,r5,65535
    3b78:	1887c83a 	sub	r3,r3,r2
    3b7c:	1987883a 	add	r3,r3,r6
    3b80:	3900000d 	sth	r4,0(r7)
    3b84:	38c0008d 	sth	r3,2(r7)
    3b88:	2808d43a 	srli	r4,r5,16
    3b8c:	39c00104 	addi	r7,r7,4
    3b90:	1811d43a 	srai	r8,r3,16
    3b94:	b4ffe92e 	bgeu	r22,r19,3b3c <quorem+0xa4>
    3b98:	a505883a 	add	r2,r20,r20
    3b9c:	1085883a 	add	r2,r2,r2
    3ba0:	b885883a 	add	r2,r23,r2
    3ba4:	10c00017 	ldw	r3,0(r2)
    3ba8:	18000c1e 	bne	r3,zero,3bdc <quorem+0x144>
    3bac:	113fff04 	addi	r4,r2,-4
    3bb0:	b900082e 	bgeu	r23,r4,3bd4 <quorem+0x13c>
    3bb4:	10bfff17 	ldw	r2,-4(r2)
    3bb8:	10000326 	beq	r2,zero,3bc8 <quorem+0x130>
    3bbc:	00000506 	br	3bd4 <quorem+0x13c>
    3bc0:	20800017 	ldw	r2,0(r4)
    3bc4:	1000031e 	bne	r2,zero,3bd4 <quorem+0x13c>
    3bc8:	213fff04 	addi	r4,r4,-4
    3bcc:	a53fffc4 	addi	r20,r20,-1
    3bd0:	b93ffb36 	bltu	r23,r4,3bc0 <quorem+0x128>
    3bd4:	d9000317 	ldw	r4,12(sp)
    3bd8:	25000415 	stw	r20,16(r4)
    3bdc:	e005883a 	mov	r2,fp
    3be0:	dfc00e17 	ldw	ra,56(sp)
    3be4:	df000d17 	ldw	fp,52(sp)
    3be8:	ddc00c17 	ldw	r23,48(sp)
    3bec:	dd800b17 	ldw	r22,44(sp)
    3bf0:	dd400a17 	ldw	r21,40(sp)
    3bf4:	dd000917 	ldw	r20,36(sp)
    3bf8:	dcc00817 	ldw	r19,32(sp)
    3bfc:	dc800717 	ldw	r18,28(sp)
    3c00:	dc400617 	ldw	r17,24(sp)
    3c04:	dc000517 	ldw	r16,20(sp)
    3c08:	dec00f04 	addi	sp,sp,60
    3c0c:	f800283a 	ret
    3c10:	b823883a 	mov	r17,r23
    3c14:	9825883a 	mov	r18,r19
    3c18:	d8000115 	stw	zero,4(sp)
    3c1c:	002b883a 	mov	r21,zero
    3c20:	94000017 	ldw	r16,0(r18)
    3c24:	e009883a 	mov	r4,fp
    3c28:	94800104 	addi	r18,r18,4
    3c2c:	817fffcc 	andi	r5,r16,65535
    3c30:	000a7800 	call	a780 <__mulsi3>
    3c34:	800ad43a 	srli	r5,r16,16
    3c38:	e009883a 	mov	r4,fp
    3c3c:	a8a1883a 	add	r16,r21,r2
    3c40:	000a7800 	call	a780 <__mulsi3>
    3c44:	89000017 	ldw	r4,0(r17)
    3c48:	80ffffcc 	andi	r3,r16,65535
    3c4c:	8020d43a 	srli	r16,r16,16
    3c50:	217fffcc 	andi	r5,r4,65535
    3c54:	28cbc83a 	sub	r5,r5,r3
    3c58:	d8c00117 	ldw	r3,4(sp)
    3c5c:	2008d43a 	srli	r4,r4,16
    3c60:	1405883a 	add	r2,r2,r16
    3c64:	28cb883a 	add	r5,r5,r3
    3c68:	280dd43a 	srai	r6,r5,16
    3c6c:	10ffffcc 	andi	r3,r2,65535
    3c70:	20c9c83a 	sub	r4,r4,r3
    3c74:	2189883a 	add	r4,r4,r6
    3c78:	8900008d 	sth	r4,2(r17)
    3c7c:	2009d43a 	srai	r4,r4,16
    3c80:	8940000d 	sth	r5,0(r17)
    3c84:	102ad43a 	srli	r21,r2,16
    3c88:	8c400104 	addi	r17,r17,4
    3c8c:	d9000115 	stw	r4,4(sp)
    3c90:	b4bfe32e 	bgeu	r22,r18,3c20 <quorem+0x188>
    3c94:	d9000217 	ldw	r4,8(sp)
    3c98:	203fa01e 	bne	r4,zero,3b1c <quorem+0x84>
    3c9c:	d8800017 	ldw	r2,0(sp)
    3ca0:	10ffff04 	addi	r3,r2,-4
    3ca4:	b8c0082e 	bgeu	r23,r3,3cc8 <quorem+0x230>
    3ca8:	10bfff17 	ldw	r2,-4(r2)
    3cac:	10000326 	beq	r2,zero,3cbc <quorem+0x224>
    3cb0:	00000506 	br	3cc8 <quorem+0x230>
    3cb4:	18800017 	ldw	r2,0(r3)
    3cb8:	1000031e 	bne	r2,zero,3cc8 <quorem+0x230>
    3cbc:	18ffff04 	addi	r3,r3,-4
    3cc0:	a53fffc4 	addi	r20,r20,-1
    3cc4:	b8fffb36 	bltu	r23,r3,3cb4 <quorem+0x21c>
    3cc8:	d8c00317 	ldw	r3,12(sp)
    3ccc:	1d000415 	stw	r20,16(r3)
    3cd0:	003f9206 	br	3b1c <quorem+0x84>
    3cd4:	0005883a 	mov	r2,zero
    3cd8:	003fc106 	br	3be0 <quorem+0x148>

00003cdc <_dtoa_r>:
    3cdc:	22001017 	ldw	r8,64(r4)
    3ce0:	deffda04 	addi	sp,sp,-152
    3ce4:	dd402115 	stw	r21,132(sp)
    3ce8:	dd002015 	stw	r20,128(sp)
    3cec:	dc801e15 	stw	r18,120(sp)
    3cf0:	dc401d15 	stw	r17,116(sp)
    3cf4:	dfc02515 	stw	ra,148(sp)
    3cf8:	df002415 	stw	fp,144(sp)
    3cfc:	ddc02315 	stw	r23,140(sp)
    3d00:	dd802215 	stw	r22,136(sp)
    3d04:	dcc01f15 	stw	r19,124(sp)
    3d08:	dc001c15 	stw	r16,112(sp)
    3d0c:	d9001615 	stw	r4,88(sp)
    3d10:	3023883a 	mov	r17,r6
    3d14:	2829883a 	mov	r20,r5
    3d18:	d9c01715 	stw	r7,92(sp)
    3d1c:	dc802817 	ldw	r18,160(sp)
    3d20:	302b883a 	mov	r21,r6
    3d24:	40000a26 	beq	r8,zero,3d50 <_dtoa_r+0x74>
    3d28:	20801117 	ldw	r2,68(r4)
    3d2c:	400b883a 	mov	r5,r8
    3d30:	40800115 	stw	r2,4(r8)
    3d34:	20c01117 	ldw	r3,68(r4)
    3d38:	00800044 	movi	r2,1
    3d3c:	10c4983a 	sll	r2,r2,r3
    3d40:	40800215 	stw	r2,8(r8)
    3d44:	00067640 	call	6764 <_Bfree>
    3d48:	d8c01617 	ldw	r3,88(sp)
    3d4c:	18001015 	stw	zero,64(r3)
    3d50:	8800a316 	blt	r17,zero,3fe0 <_dtoa_r+0x304>
    3d54:	90000015 	stw	zero,0(r18)
    3d58:	a8dffc2c 	andhi	r3,r21,32752
    3d5c:	009ffc34 	movhi	r2,32752
    3d60:	18809126 	beq	r3,r2,3fa8 <_dtoa_r+0x2cc>
    3d64:	000d883a 	mov	r6,zero
    3d68:	000f883a 	mov	r7,zero
    3d6c:	a009883a 	mov	r4,r20
    3d70:	a80b883a 	mov	r5,r21
    3d74:	dd001215 	stw	r20,72(sp)
    3d78:	dd401315 	stw	r21,76(sp)
    3d7c:	000a0b00 	call	a0b0 <__nedf2>
    3d80:	1000171e 	bne	r2,zero,3de0 <_dtoa_r+0x104>
    3d84:	d9802717 	ldw	r6,156(sp)
    3d88:	00800044 	movi	r2,1
    3d8c:	30800015 	stw	r2,0(r6)
    3d90:	d8802917 	ldw	r2,164(sp)
    3d94:	10029b26 	beq	r2,zero,4804 <_dtoa_r+0xb28>
    3d98:	d9002917 	ldw	r4,164(sp)
    3d9c:	00800074 	movhi	r2,1
    3da0:	10b65d44 	addi	r2,r2,-9867
    3da4:	10ffffc4 	addi	r3,r2,-1
    3da8:	20800015 	stw	r2,0(r4)
    3dac:	1805883a 	mov	r2,r3
    3db0:	dfc02517 	ldw	ra,148(sp)
    3db4:	df002417 	ldw	fp,144(sp)
    3db8:	ddc02317 	ldw	r23,140(sp)
    3dbc:	dd802217 	ldw	r22,136(sp)
    3dc0:	dd402117 	ldw	r21,132(sp)
    3dc4:	dd002017 	ldw	r20,128(sp)
    3dc8:	dcc01f17 	ldw	r19,124(sp)
    3dcc:	dc801e17 	ldw	r18,120(sp)
    3dd0:	dc401d17 	ldw	r17,116(sp)
    3dd4:	dc001c17 	ldw	r16,112(sp)
    3dd8:	dec02604 	addi	sp,sp,152
    3ddc:	f800283a 	ret
    3de0:	d9001617 	ldw	r4,88(sp)
    3de4:	d9401217 	ldw	r5,72(sp)
    3de8:	d8800104 	addi	r2,sp,4
    3dec:	a80d883a 	mov	r6,r21
    3df0:	d9c00204 	addi	r7,sp,8
    3df4:	d8800015 	stw	r2,0(sp)
    3df8:	0006da00 	call	6da0 <__d2b>
    3dfc:	d8800715 	stw	r2,28(sp)
    3e00:	a804d53a 	srli	r2,r21,20
    3e04:	1101ffcc 	andi	r4,r2,2047
    3e08:	20008626 	beq	r4,zero,4024 <_dtoa_r+0x348>
    3e0c:	d8c01217 	ldw	r3,72(sp)
    3e10:	00800434 	movhi	r2,16
    3e14:	10bfffc4 	addi	r2,r2,-1
    3e18:	ddc00117 	ldw	r23,4(sp)
    3e1c:	a884703a 	and	r2,r21,r2
    3e20:	1811883a 	mov	r8,r3
    3e24:	124ffc34 	orhi	r9,r2,16368
    3e28:	25bf0044 	addi	r22,r4,-1023
    3e2c:	d8000815 	stw	zero,32(sp)
    3e30:	0005883a 	mov	r2,zero
    3e34:	00cffe34 	movhi	r3,16376
    3e38:	480b883a 	mov	r5,r9
    3e3c:	4009883a 	mov	r4,r8
    3e40:	180f883a 	mov	r7,r3
    3e44:	100d883a 	mov	r6,r2
    3e48:	00099180 	call	9918 <__subdf3>
    3e4c:	0218dbf4 	movhi	r8,25455
    3e50:	4210d844 	addi	r8,r8,17249
    3e54:	024ff4f4 	movhi	r9,16339
    3e58:	4a61e9c4 	addi	r9,r9,-30809
    3e5c:	480f883a 	mov	r7,r9
    3e60:	400d883a 	mov	r6,r8
    3e64:	180b883a 	mov	r5,r3
    3e68:	1009883a 	mov	r4,r2
    3e6c:	0009a0c0 	call	9a0c <__muldf3>
    3e70:	0222d874 	movhi	r8,35681
    3e74:	42322cc4 	addi	r8,r8,-14157
    3e78:	024ff1f4 	movhi	r9,16327
    3e7c:	4a628a04 	addi	r9,r9,-30168
    3e80:	480f883a 	mov	r7,r9
    3e84:	400d883a 	mov	r6,r8
    3e88:	180b883a 	mov	r5,r3
    3e8c:	1009883a 	mov	r4,r2
    3e90:	00099980 	call	9998 <__adddf3>
    3e94:	b009883a 	mov	r4,r22
    3e98:	1021883a 	mov	r16,r2
    3e9c:	1823883a 	mov	r17,r3
    3ea0:	000a2d00 	call	a2d0 <__floatsidf>
    3ea4:	021427f4 	movhi	r8,20639
    3ea8:	421e7ec4 	addi	r8,r8,31227
    3eac:	024ff4f4 	movhi	r9,16339
    3eb0:	4a5104c4 	addi	r9,r9,17427
    3eb4:	480f883a 	mov	r7,r9
    3eb8:	400d883a 	mov	r6,r8
    3ebc:	180b883a 	mov	r5,r3
    3ec0:	1009883a 	mov	r4,r2
    3ec4:	0009a0c0 	call	9a0c <__muldf3>
    3ec8:	180f883a 	mov	r7,r3
    3ecc:	880b883a 	mov	r5,r17
    3ed0:	100d883a 	mov	r6,r2
    3ed4:	8009883a 	mov	r4,r16
    3ed8:	00099980 	call	9998 <__adddf3>
    3edc:	1009883a 	mov	r4,r2
    3ee0:	180b883a 	mov	r5,r3
    3ee4:	1021883a 	mov	r16,r2
    3ee8:	1823883a 	mov	r17,r3
    3eec:	000a3c80 	call	a3c8 <__fixdfsi>
    3ef0:	000d883a 	mov	r6,zero
    3ef4:	000f883a 	mov	r7,zero
    3ef8:	8009883a 	mov	r4,r16
    3efc:	880b883a 	mov	r5,r17
    3f00:	d8800d15 	stw	r2,52(sp)
    3f04:	000a2480 	call	a248 <__ltdf2>
    3f08:	10031716 	blt	r2,zero,4b68 <_dtoa_r+0xe8c>
    3f0c:	d8c00d17 	ldw	r3,52(sp)
    3f10:	00800584 	movi	r2,22
    3f14:	10c1482e 	bgeu	r2,r3,4438 <_dtoa_r+0x75c>
    3f18:	01000044 	movi	r4,1
    3f1c:	d9000c15 	stw	r4,48(sp)
    3f20:	bd85c83a 	sub	r2,r23,r22
    3f24:	11bfffc4 	addi	r6,r2,-1
    3f28:	30030b16 	blt	r6,zero,4b58 <_dtoa_r+0xe7c>
    3f2c:	d9800a15 	stw	r6,40(sp)
    3f30:	d8001115 	stw	zero,68(sp)
    3f34:	d8c00d17 	ldw	r3,52(sp)
    3f38:	1802ff16 	blt	r3,zero,4b38 <_dtoa_r+0xe5c>
    3f3c:	d9000a17 	ldw	r4,40(sp)
    3f40:	d8c00915 	stw	r3,36(sp)
    3f44:	d8001015 	stw	zero,64(sp)
    3f48:	20c9883a 	add	r4,r4,r3
    3f4c:	d9000a15 	stw	r4,40(sp)
    3f50:	d9001717 	ldw	r4,92(sp)
    3f54:	00800244 	movi	r2,9
    3f58:	11004636 	bltu	r2,r4,4074 <_dtoa_r+0x398>
    3f5c:	00800144 	movi	r2,5
    3f60:	11020416 	blt	r2,r4,4774 <_dtoa_r+0xa98>
    3f64:	04400044 	movi	r17,1
    3f68:	d8c01717 	ldw	r3,92(sp)
    3f6c:	00800144 	movi	r2,5
    3f70:	10c1ed36 	bltu	r2,r3,4728 <_dtoa_r+0xa4c>
    3f74:	18c5883a 	add	r2,r3,r3
    3f78:	1085883a 	add	r2,r2,r2
    3f7c:	00c00034 	movhi	r3,0
    3f80:	18cfe404 	addi	r3,r3,16272
    3f84:	10c5883a 	add	r2,r2,r3
    3f88:	11000017 	ldw	r4,0(r2)
    3f8c:	2000683a 	jmp	r4
    3f90:	0000407c 	xorhi	zero,zero,257
    3f94:	0000407c 	xorhi	zero,zero,257
    3f98:	00004a7c 	xorhi	zero,zero,297
    3f9c:	00004a54 	movui	zero,297
    3fa0:	00004a98 	cmpnei	zero,zero,298
    3fa4:	00004aa4 	muli	zero,zero,298
    3fa8:	d9002717 	ldw	r4,156(sp)
    3fac:	0089c3c4 	movi	r2,9999
    3fb0:	20800015 	stw	r2,0(r4)
    3fb4:	a0001026 	beq	r20,zero,3ff8 <_dtoa_r+0x31c>
    3fb8:	00c00074 	movhi	r3,1
    3fbc:	18f66904 	addi	r3,r3,-9820
    3fc0:	d9802917 	ldw	r6,164(sp)
    3fc4:	303f7926 	beq	r6,zero,3dac <_dtoa_r+0xd0>
    3fc8:	188000c7 	ldb	r2,3(r3)
    3fcc:	190000c4 	addi	r4,r3,3
    3fd0:	1000101e 	bne	r2,zero,4014 <_dtoa_r+0x338>
    3fd4:	d8802917 	ldw	r2,164(sp)
    3fd8:	11000015 	stw	r4,0(r2)
    3fdc:	003f7306 	br	3dac <_dtoa_r+0xd0>
    3fe0:	00a00034 	movhi	r2,32768
    3fe4:	10bfffc4 	addi	r2,r2,-1
    3fe8:	00c00044 	movi	r3,1
    3fec:	88aa703a 	and	r21,r17,r2
    3ff0:	90c00015 	stw	r3,0(r18)
    3ff4:	003f5806 	br	3d58 <_dtoa_r+0x7c>
    3ff8:	00800434 	movhi	r2,16
    3ffc:	10bfffc4 	addi	r2,r2,-1
    4000:	a884703a 	and	r2,r21,r2
    4004:	103fec1e 	bne	r2,zero,3fb8 <_dtoa_r+0x2dc>
    4008:	00c00074 	movhi	r3,1
    400c:	18f66604 	addi	r3,r3,-9832
    4010:	003feb06 	br	3fc0 <_dtoa_r+0x2e4>
    4014:	d8802917 	ldw	r2,164(sp)
    4018:	19000204 	addi	r4,r3,8
    401c:	11000015 	stw	r4,0(r2)
    4020:	003f6206 	br	3dac <_dtoa_r+0xd0>
    4024:	ddc00117 	ldw	r23,4(sp)
    4028:	d8800217 	ldw	r2,8(sp)
    402c:	01000804 	movi	r4,32
    4030:	b8c10c84 	addi	r3,r23,1074
    4034:	18a3883a 	add	r17,r3,r2
    4038:	2441b80e 	bge	r4,r17,471c <_dtoa_r+0xa40>
    403c:	00c01004 	movi	r3,64
    4040:	1c47c83a 	sub	r3,r3,r17
    4044:	88bff804 	addi	r2,r17,-32
    4048:	a8c6983a 	sll	r3,r21,r3
    404c:	a084d83a 	srl	r2,r20,r2
    4050:	1888b03a 	or	r4,r3,r2
    4054:	000a4a00 	call	a4a0 <__floatunsidf>
    4058:	1011883a 	mov	r8,r2
    405c:	00bf8434 	movhi	r2,65040
    4060:	01000044 	movi	r4,1
    4064:	10d3883a 	add	r9,r2,r3
    4068:	8dbef344 	addi	r22,r17,-1075
    406c:	d9000815 	stw	r4,32(sp)
    4070:	003f6f06 	br	3e30 <_dtoa_r+0x154>
    4074:	d8001715 	stw	zero,92(sp)
    4078:	04400044 	movi	r17,1
    407c:	00bfffc4 	movi	r2,-1
    4080:	00c00044 	movi	r3,1
    4084:	d8800e15 	stw	r2,56(sp)
    4088:	d8002615 	stw	zero,152(sp)
    408c:	d8800f15 	stw	r2,60(sp)
    4090:	d8c00b15 	stw	r3,44(sp)
    4094:	1021883a 	mov	r16,r2
    4098:	d8801617 	ldw	r2,88(sp)
    409c:	10001115 	stw	zero,68(r2)
    40a0:	d8801617 	ldw	r2,88(sp)
    40a4:	11401117 	ldw	r5,68(r2)
    40a8:	1009883a 	mov	r4,r2
    40ac:	0006ce40 	call	6ce4 <_Balloc>
    40b0:	d8c01617 	ldw	r3,88(sp)
    40b4:	d8800515 	stw	r2,20(sp)
    40b8:	18801015 	stw	r2,64(r3)
    40bc:	00800384 	movi	r2,14
    40c0:	14006836 	bltu	r2,r16,4264 <_dtoa_r+0x588>
    40c4:	8805003a 	cmpeq	r2,r17,zero
    40c8:	1000661e 	bne	r2,zero,4264 <_dtoa_r+0x588>
    40cc:	d9000d17 	ldw	r4,52(sp)
    40d0:	0102300e 	bge	zero,r4,4994 <_dtoa_r+0xcb8>
    40d4:	208003cc 	andi	r2,r4,15
    40d8:	100490fa 	slli	r2,r2,3
    40dc:	2025d13a 	srai	r18,r4,4
    40e0:	00c00074 	movhi	r3,1
    40e4:	18f67a04 	addi	r3,r3,-9752
    40e8:	10c5883a 	add	r2,r2,r3
    40ec:	90c0040c 	andi	r3,r18,16
    40f0:	14000017 	ldw	r16,0(r2)
    40f4:	14400117 	ldw	r17,4(r2)
    40f8:	18036a1e 	bne	r3,zero,4ea4 <_dtoa_r+0x11c8>
    40fc:	05800084 	movi	r22,2
    4100:	90001026 	beq	r18,zero,4144 <_dtoa_r+0x468>
    4104:	04c00074 	movhi	r19,1
    4108:	9cf6ac04 	addi	r19,r19,-9552
    410c:	9080004c 	andi	r2,r18,1
    4110:	1005003a 	cmpeq	r2,r2,zero
    4114:	1000081e 	bne	r2,zero,4138 <_dtoa_r+0x45c>
    4118:	99800017 	ldw	r6,0(r19)
    411c:	99c00117 	ldw	r7,4(r19)
    4120:	880b883a 	mov	r5,r17
    4124:	8009883a 	mov	r4,r16
    4128:	0009a0c0 	call	9a0c <__muldf3>
    412c:	1021883a 	mov	r16,r2
    4130:	b5800044 	addi	r22,r22,1
    4134:	1823883a 	mov	r17,r3
    4138:	9025d07a 	srai	r18,r18,1
    413c:	9cc00204 	addi	r19,r19,8
    4140:	903ff21e 	bne	r18,zero,410c <_dtoa_r+0x430>
    4144:	a80b883a 	mov	r5,r21
    4148:	a009883a 	mov	r4,r20
    414c:	880f883a 	mov	r7,r17
    4150:	800d883a 	mov	r6,r16
    4154:	0009dd00 	call	9dd0 <__divdf3>
    4158:	1029883a 	mov	r20,r2
    415c:	182b883a 	mov	r21,r3
    4160:	d8c00c17 	ldw	r3,48(sp)
    4164:	1805003a 	cmpeq	r2,r3,zero
    4168:	1000081e 	bne	r2,zero,418c <_dtoa_r+0x4b0>
    416c:	0005883a 	mov	r2,zero
    4170:	00cffc34 	movhi	r3,16368
    4174:	180f883a 	mov	r7,r3
    4178:	a009883a 	mov	r4,r20
    417c:	a80b883a 	mov	r5,r21
    4180:	100d883a 	mov	r6,r2
    4184:	000a2480 	call	a248 <__ltdf2>
    4188:	1003fe16 	blt	r2,zero,5184 <_dtoa_r+0x14a8>
    418c:	b009883a 	mov	r4,r22
    4190:	000a2d00 	call	a2d0 <__floatsidf>
    4194:	180b883a 	mov	r5,r3
    4198:	1009883a 	mov	r4,r2
    419c:	a00d883a 	mov	r6,r20
    41a0:	a80f883a 	mov	r7,r21
    41a4:	0009a0c0 	call	9a0c <__muldf3>
    41a8:	0011883a 	mov	r8,zero
    41ac:	02500734 	movhi	r9,16412
    41b0:	1009883a 	mov	r4,r2
    41b4:	180b883a 	mov	r5,r3
    41b8:	480f883a 	mov	r7,r9
    41bc:	400d883a 	mov	r6,r8
    41c0:	00099980 	call	9998 <__adddf3>
    41c4:	d9000f17 	ldw	r4,60(sp)
    41c8:	102d883a 	mov	r22,r2
    41cc:	00bf3034 	movhi	r2,64704
    41d0:	18b9883a 	add	fp,r3,r2
    41d4:	e02f883a 	mov	r23,fp
    41d8:	20028f1e 	bne	r4,zero,4c18 <_dtoa_r+0xf3c>
    41dc:	0005883a 	mov	r2,zero
    41e0:	00d00534 	movhi	r3,16404
    41e4:	a009883a 	mov	r4,r20
    41e8:	a80b883a 	mov	r5,r21
    41ec:	180f883a 	mov	r7,r3
    41f0:	100d883a 	mov	r6,r2
    41f4:	00099180 	call	9918 <__subdf3>
    41f8:	1009883a 	mov	r4,r2
    41fc:	e00f883a 	mov	r7,fp
    4200:	180b883a 	mov	r5,r3
    4204:	b00d883a 	mov	r6,r22
    4208:	1025883a 	mov	r18,r2
    420c:	1827883a 	mov	r19,r3
    4210:	000a1380 	call	a138 <__gtdf2>
    4214:	00834f16 	blt	zero,r2,4f54 <_dtoa_r+0x1278>
    4218:	e0e0003c 	xorhi	r3,fp,32768
    421c:	9009883a 	mov	r4,r18
    4220:	980b883a 	mov	r5,r19
    4224:	180f883a 	mov	r7,r3
    4228:	b00d883a 	mov	r6,r22
    422c:	000a2480 	call	a248 <__ltdf2>
    4230:	1000080e 	bge	r2,zero,4254 <_dtoa_r+0x578>
    4234:	0027883a 	mov	r19,zero
    4238:	0025883a 	mov	r18,zero
    423c:	d8802617 	ldw	r2,152(sp)
    4240:	df000517 	ldw	fp,20(sp)
    4244:	d8000615 	stw	zero,24(sp)
    4248:	0084303a 	nor	r2,zero,r2
    424c:	d8800d15 	stw	r2,52(sp)
    4250:	00019b06 	br	48c0 <_dtoa_r+0xbe4>
    4254:	d9801217 	ldw	r6,72(sp)
    4258:	d8801317 	ldw	r2,76(sp)
    425c:	3029883a 	mov	r20,r6
    4260:	102b883a 	mov	r21,r2
    4264:	d8c00217 	ldw	r3,8(sp)
    4268:	18008516 	blt	r3,zero,4480 <_dtoa_r+0x7a4>
    426c:	d9000d17 	ldw	r4,52(sp)
    4270:	00800384 	movi	r2,14
    4274:	11008216 	blt	r2,r4,4480 <_dtoa_r+0x7a4>
    4278:	200490fa 	slli	r2,r4,3
    427c:	d9802617 	ldw	r6,152(sp)
    4280:	00c00074 	movhi	r3,1
    4284:	18f67a04 	addi	r3,r3,-9752
    4288:	10c5883a 	add	r2,r2,r3
    428c:	14800017 	ldw	r18,0(r2)
    4290:	14c00117 	ldw	r19,4(r2)
    4294:	30031e16 	blt	r6,zero,4f10 <_dtoa_r+0x1234>
    4298:	d9000517 	ldw	r4,20(sp)
    429c:	d8c00f17 	ldw	r3,60(sp)
    42a0:	a823883a 	mov	r17,r21
    42a4:	a021883a 	mov	r16,r20
    42a8:	192b883a 	add	r21,r3,r4
    42ac:	2039883a 	mov	fp,r4
    42b0:	00000f06 	br	42f0 <_dtoa_r+0x614>
    42b4:	0005883a 	mov	r2,zero
    42b8:	00d00934 	movhi	r3,16420
    42bc:	5009883a 	mov	r4,r10
    42c0:	580b883a 	mov	r5,r11
    42c4:	180f883a 	mov	r7,r3
    42c8:	100d883a 	mov	r6,r2
    42cc:	0009a0c0 	call	9a0c <__muldf3>
    42d0:	180b883a 	mov	r5,r3
    42d4:	000d883a 	mov	r6,zero
    42d8:	000f883a 	mov	r7,zero
    42dc:	1009883a 	mov	r4,r2
    42e0:	1021883a 	mov	r16,r2
    42e4:	1823883a 	mov	r17,r3
    42e8:	000a0b00 	call	a0b0 <__nedf2>
    42ec:	10004526 	beq	r2,zero,4404 <_dtoa_r+0x728>
    42f0:	900d883a 	mov	r6,r18
    42f4:	980f883a 	mov	r7,r19
    42f8:	8009883a 	mov	r4,r16
    42fc:	880b883a 	mov	r5,r17
    4300:	0009dd00 	call	9dd0 <__divdf3>
    4304:	180b883a 	mov	r5,r3
    4308:	1009883a 	mov	r4,r2
    430c:	000a3c80 	call	a3c8 <__fixdfsi>
    4310:	1009883a 	mov	r4,r2
    4314:	1029883a 	mov	r20,r2
    4318:	000a2d00 	call	a2d0 <__floatsidf>
    431c:	180f883a 	mov	r7,r3
    4320:	9009883a 	mov	r4,r18
    4324:	980b883a 	mov	r5,r19
    4328:	100d883a 	mov	r6,r2
    432c:	0009a0c0 	call	9a0c <__muldf3>
    4330:	180f883a 	mov	r7,r3
    4334:	880b883a 	mov	r5,r17
    4338:	8009883a 	mov	r4,r16
    433c:	100d883a 	mov	r6,r2
    4340:	00099180 	call	9918 <__subdf3>
    4344:	1015883a 	mov	r10,r2
    4348:	a0800c04 	addi	r2,r20,48
    434c:	e0800005 	stb	r2,0(fp)
    4350:	e7000044 	addi	fp,fp,1
    4354:	1817883a 	mov	r11,r3
    4358:	e57fd61e 	bne	fp,r21,42b4 <_dtoa_r+0x5d8>
    435c:	500d883a 	mov	r6,r10
    4360:	180f883a 	mov	r7,r3
    4364:	5009883a 	mov	r4,r10
    4368:	180b883a 	mov	r5,r3
    436c:	00099980 	call	9998 <__adddf3>
    4370:	100d883a 	mov	r6,r2
    4374:	9009883a 	mov	r4,r18
    4378:	980b883a 	mov	r5,r19
    437c:	180f883a 	mov	r7,r3
    4380:	1021883a 	mov	r16,r2
    4384:	1823883a 	mov	r17,r3
    4388:	000a2480 	call	a248 <__ltdf2>
    438c:	10000816 	blt	r2,zero,43b0 <_dtoa_r+0x6d4>
    4390:	980b883a 	mov	r5,r19
    4394:	800d883a 	mov	r6,r16
    4398:	880f883a 	mov	r7,r17
    439c:	9009883a 	mov	r4,r18
    43a0:	000a0280 	call	a028 <__eqdf2>
    43a4:	1000171e 	bne	r2,zero,4404 <_dtoa_r+0x728>
    43a8:	a080004c 	andi	r2,r20,1
    43ac:	10001526 	beq	r2,zero,4404 <_dtoa_r+0x728>
    43b0:	d8800d17 	ldw	r2,52(sp)
    43b4:	d8800415 	stw	r2,16(sp)
    43b8:	e009883a 	mov	r4,fp
    43bc:	213fffc4 	addi	r4,r4,-1
    43c0:	20c00007 	ldb	r3,0(r4)
    43c4:	00800e44 	movi	r2,57
    43c8:	1880081e 	bne	r3,r2,43ec <_dtoa_r+0x710>
    43cc:	d8800517 	ldw	r2,20(sp)
    43d0:	113ffa1e 	bne	r2,r4,43bc <_dtoa_r+0x6e0>
    43d4:	d8c00417 	ldw	r3,16(sp)
    43d8:	d9800517 	ldw	r6,20(sp)
    43dc:	00800c04 	movi	r2,48
    43e0:	18c00044 	addi	r3,r3,1
    43e4:	d8c00415 	stw	r3,16(sp)
    43e8:	30800005 	stb	r2,0(r6)
    43ec:	20800003 	ldbu	r2,0(r4)
    43f0:	d8c00417 	ldw	r3,16(sp)
    43f4:	27000044 	addi	fp,r4,1
    43f8:	10800044 	addi	r2,r2,1
    43fc:	d8c00d15 	stw	r3,52(sp)
    4400:	20800005 	stb	r2,0(r4)
    4404:	d9001617 	ldw	r4,88(sp)
    4408:	d9400717 	ldw	r5,28(sp)
    440c:	00067640 	call	6764 <_Bfree>
    4410:	e0000005 	stb	zero,0(fp)
    4414:	d9800d17 	ldw	r6,52(sp)
    4418:	d8c02717 	ldw	r3,156(sp)
    441c:	d9002917 	ldw	r4,164(sp)
    4420:	30800044 	addi	r2,r6,1
    4424:	18800015 	stw	r2,0(r3)
    4428:	20029c26 	beq	r4,zero,4e9c <_dtoa_r+0x11c0>
    442c:	d8c00517 	ldw	r3,20(sp)
    4430:	27000015 	stw	fp,0(r4)
    4434:	003e5d06 	br	3dac <_dtoa_r+0xd0>
    4438:	d9800d17 	ldw	r6,52(sp)
    443c:	00c00074 	movhi	r3,1
    4440:	18f67a04 	addi	r3,r3,-9752
    4444:	d9001217 	ldw	r4,72(sp)
    4448:	300490fa 	slli	r2,r6,3
    444c:	d9401317 	ldw	r5,76(sp)
    4450:	10c5883a 	add	r2,r2,r3
    4454:	12000017 	ldw	r8,0(r2)
    4458:	12400117 	ldw	r9,4(r2)
    445c:	400d883a 	mov	r6,r8
    4460:	480f883a 	mov	r7,r9
    4464:	000a2480 	call	a248 <__ltdf2>
    4468:	1000030e 	bge	r2,zero,4478 <_dtoa_r+0x79c>
    446c:	d8800d17 	ldw	r2,52(sp)
    4470:	10bfffc4 	addi	r2,r2,-1
    4474:	d8800d15 	stw	r2,52(sp)
    4478:	d8000c15 	stw	zero,48(sp)
    447c:	003ea806 	br	3f20 <_dtoa_r+0x244>
    4480:	d9000b17 	ldw	r4,44(sp)
    4484:	202cc03a 	cmpne	r22,r4,zero
    4488:	b000c71e 	bne	r22,zero,47a8 <_dtoa_r+0xacc>
    448c:	dc001117 	ldw	r16,68(sp)
    4490:	dc801017 	ldw	r18,64(sp)
    4494:	0027883a 	mov	r19,zero
    4498:	04000b0e 	bge	zero,r16,44c8 <_dtoa_r+0x7ec>
    449c:	d8c00a17 	ldw	r3,40(sp)
    44a0:	00c0090e 	bge	zero,r3,44c8 <_dtoa_r+0x7ec>
    44a4:	8005883a 	mov	r2,r16
    44a8:	1c011316 	blt	r3,r16,48f8 <_dtoa_r+0xc1c>
    44ac:	d9000a17 	ldw	r4,40(sp)
    44b0:	d9801117 	ldw	r6,68(sp)
    44b4:	80a1c83a 	sub	r16,r16,r2
    44b8:	2089c83a 	sub	r4,r4,r2
    44bc:	308dc83a 	sub	r6,r6,r2
    44c0:	d9000a15 	stw	r4,40(sp)
    44c4:	d9801115 	stw	r6,68(sp)
    44c8:	d8801017 	ldw	r2,64(sp)
    44cc:	0080150e 	bge	zero,r2,4524 <_dtoa_r+0x848>
    44d0:	d8c00b17 	ldw	r3,44(sp)
    44d4:	1805003a 	cmpeq	r2,r3,zero
    44d8:	1001c91e 	bne	r2,zero,4c00 <_dtoa_r+0xf24>
    44dc:	04800e0e 	bge	zero,r18,4518 <_dtoa_r+0x83c>
    44e0:	d9001617 	ldw	r4,88(sp)
    44e4:	980b883a 	mov	r5,r19
    44e8:	900d883a 	mov	r6,r18
    44ec:	00075b00 	call	75b0 <__pow5mult>
    44f0:	d9001617 	ldw	r4,88(sp)
    44f4:	d9800717 	ldw	r6,28(sp)
    44f8:	100b883a 	mov	r5,r2
    44fc:	1027883a 	mov	r19,r2
    4500:	00071f40 	call	71f4 <__multiply>
    4504:	d9001617 	ldw	r4,88(sp)
    4508:	d9400717 	ldw	r5,28(sp)
    450c:	1023883a 	mov	r17,r2
    4510:	00067640 	call	6764 <_Bfree>
    4514:	dc400715 	stw	r17,28(sp)
    4518:	d9001017 	ldw	r4,64(sp)
    451c:	248dc83a 	sub	r6,r4,r18
    4520:	30010e1e 	bne	r6,zero,495c <_dtoa_r+0xc80>
    4524:	d9001617 	ldw	r4,88(sp)
    4528:	04400044 	movi	r17,1
    452c:	880b883a 	mov	r5,r17
    4530:	00074480 	call	7448 <__i2b>
    4534:	d9800917 	ldw	r6,36(sp)
    4538:	1025883a 	mov	r18,r2
    453c:	0180040e 	bge	zero,r6,4550 <_dtoa_r+0x874>
    4540:	d9001617 	ldw	r4,88(sp)
    4544:	100b883a 	mov	r5,r2
    4548:	00075b00 	call	75b0 <__pow5mult>
    454c:	1025883a 	mov	r18,r2
    4550:	d8801717 	ldw	r2,92(sp)
    4554:	8880f30e 	bge	r17,r2,4924 <_dtoa_r+0xc48>
    4558:	0023883a 	mov	r17,zero
    455c:	d9800917 	ldw	r6,36(sp)
    4560:	30019e1e 	bne	r6,zero,4bdc <_dtoa_r+0xf00>
    4564:	00c00044 	movi	r3,1
    4568:	d9000a17 	ldw	r4,40(sp)
    456c:	20c5883a 	add	r2,r4,r3
    4570:	10c007cc 	andi	r3,r2,31
    4574:	1800841e 	bne	r3,zero,4788 <_dtoa_r+0xaac>
    4578:	00800704 	movi	r2,28
    457c:	d9000a17 	ldw	r4,40(sp)
    4580:	d9801117 	ldw	r6,68(sp)
    4584:	80a1883a 	add	r16,r16,r2
    4588:	2089883a 	add	r4,r4,r2
    458c:	308d883a 	add	r6,r6,r2
    4590:	d9000a15 	stw	r4,40(sp)
    4594:	d9801115 	stw	r6,68(sp)
    4598:	d8801117 	ldw	r2,68(sp)
    459c:	0080050e 	bge	zero,r2,45b4 <_dtoa_r+0x8d8>
    45a0:	d9400717 	ldw	r5,28(sp)
    45a4:	d9001617 	ldw	r4,88(sp)
    45a8:	100d883a 	mov	r6,r2
    45ac:	00070a80 	call	70a8 <__lshift>
    45b0:	d8800715 	stw	r2,28(sp)
    45b4:	d8c00a17 	ldw	r3,40(sp)
    45b8:	00c0050e 	bge	zero,r3,45d0 <_dtoa_r+0x8f4>
    45bc:	d9001617 	ldw	r4,88(sp)
    45c0:	900b883a 	mov	r5,r18
    45c4:	180d883a 	mov	r6,r3
    45c8:	00070a80 	call	70a8 <__lshift>
    45cc:	1025883a 	mov	r18,r2
    45d0:	d9000c17 	ldw	r4,48(sp)
    45d4:	2005003a 	cmpeq	r2,r4,zero
    45d8:	10016f26 	beq	r2,zero,4b98 <_dtoa_r+0xebc>
    45dc:	d9000f17 	ldw	r4,60(sp)
    45e0:	0102170e 	bge	zero,r4,4e40 <_dtoa_r+0x1164>
    45e4:	d9800b17 	ldw	r6,44(sp)
    45e8:	3005003a 	cmpeq	r2,r6,zero
    45ec:	1000881e 	bne	r2,zero,4810 <_dtoa_r+0xb34>
    45f0:	0400050e 	bge	zero,r16,4608 <_dtoa_r+0x92c>
    45f4:	d9001617 	ldw	r4,88(sp)
    45f8:	980b883a 	mov	r5,r19
    45fc:	800d883a 	mov	r6,r16
    4600:	00070a80 	call	70a8 <__lshift>
    4604:	1027883a 	mov	r19,r2
    4608:	8804c03a 	cmpne	r2,r17,zero
    460c:	1002541e 	bne	r2,zero,4f60 <_dtoa_r+0x1284>
    4610:	980b883a 	mov	r5,r19
    4614:	dd800517 	ldw	r22,20(sp)
    4618:	dcc00615 	stw	r19,24(sp)
    461c:	a700004c 	andi	fp,r20,1
    4620:	2827883a 	mov	r19,r5
    4624:	d9000717 	ldw	r4,28(sp)
    4628:	900b883a 	mov	r5,r18
    462c:	0003a980 	call	3a98 <quorem>
    4630:	d9000717 	ldw	r4,28(sp)
    4634:	d9400617 	ldw	r5,24(sp)
    4638:	1023883a 	mov	r17,r2
    463c:	8dc00c04 	addi	r23,r17,48
    4640:	00068c00 	call	68c0 <__mcmp>
    4644:	d9001617 	ldw	r4,88(sp)
    4648:	900b883a 	mov	r5,r18
    464c:	980d883a 	mov	r6,r19
    4650:	1029883a 	mov	r20,r2
    4654:	0006f1c0 	call	6f1c <__mdiff>
    4658:	102b883a 	mov	r21,r2
    465c:	10800317 	ldw	r2,12(r2)
    4660:	1001281e 	bne	r2,zero,4b04 <_dtoa_r+0xe28>
    4664:	d9000717 	ldw	r4,28(sp)
    4668:	a80b883a 	mov	r5,r21
    466c:	00068c00 	call	68c0 <__mcmp>
    4670:	d9001617 	ldw	r4,88(sp)
    4674:	1021883a 	mov	r16,r2
    4678:	a80b883a 	mov	r5,r21
    467c:	00067640 	call	6764 <_Bfree>
    4680:	8000041e 	bne	r16,zero,4694 <_dtoa_r+0x9b8>
    4684:	d8801717 	ldw	r2,92(sp)
    4688:	1000021e 	bne	r2,zero,4694 <_dtoa_r+0x9b8>
    468c:	e004c03a 	cmpne	r2,fp,zero
    4690:	10011726 	beq	r2,zero,4af0 <_dtoa_r+0xe14>
    4694:	a0010616 	blt	r20,zero,4ab0 <_dtoa_r+0xdd4>
    4698:	a000041e 	bne	r20,zero,46ac <_dtoa_r+0x9d0>
    469c:	d8c01717 	ldw	r3,92(sp)
    46a0:	1800021e 	bne	r3,zero,46ac <_dtoa_r+0x9d0>
    46a4:	e004c03a 	cmpne	r2,fp,zero
    46a8:	10010126 	beq	r2,zero,4ab0 <_dtoa_r+0xdd4>
    46ac:	04023d16 	blt	zero,r16,4fa4 <_dtoa_r+0x12c8>
    46b0:	b5c00005 	stb	r23,0(r22)
    46b4:	d9800517 	ldw	r6,20(sp)
    46b8:	d9000f17 	ldw	r4,60(sp)
    46bc:	b5800044 	addi	r22,r22,1
    46c0:	3105883a 	add	r2,r6,r4
    46c4:	b0806526 	beq	r22,r2,485c <_dtoa_r+0xb80>
    46c8:	d9400717 	ldw	r5,28(sp)
    46cc:	d9001617 	ldw	r4,88(sp)
    46d0:	01800284 	movi	r6,10
    46d4:	000f883a 	mov	r7,zero
    46d8:	00074840 	call	7484 <__multadd>
    46dc:	d8800715 	stw	r2,28(sp)
    46e0:	d8800617 	ldw	r2,24(sp)
    46e4:	14c10c26 	beq	r2,r19,4b18 <_dtoa_r+0xe3c>
    46e8:	d9400617 	ldw	r5,24(sp)
    46ec:	d9001617 	ldw	r4,88(sp)
    46f0:	01800284 	movi	r6,10
    46f4:	000f883a 	mov	r7,zero
    46f8:	00074840 	call	7484 <__multadd>
    46fc:	d9001617 	ldw	r4,88(sp)
    4700:	980b883a 	mov	r5,r19
    4704:	01800284 	movi	r6,10
    4708:	000f883a 	mov	r7,zero
    470c:	d8800615 	stw	r2,24(sp)
    4710:	00074840 	call	7484 <__multadd>
    4714:	1027883a 	mov	r19,r2
    4718:	003fc206 	br	4624 <_dtoa_r+0x948>
    471c:	2445c83a 	sub	r2,r4,r17
    4720:	a088983a 	sll	r4,r20,r2
    4724:	003e4b06 	br	4054 <_dtoa_r+0x378>
    4728:	01bfffc4 	movi	r6,-1
    472c:	00800044 	movi	r2,1
    4730:	d9800e15 	stw	r6,56(sp)
    4734:	d9800f15 	stw	r6,60(sp)
    4738:	d8800b15 	stw	r2,44(sp)
    473c:	d8c01617 	ldw	r3,88(sp)
    4740:	008005c4 	movi	r2,23
    4744:	18001115 	stw	zero,68(r3)
    4748:	1580082e 	bgeu	r2,r22,476c <_dtoa_r+0xa90>
    474c:	00c00104 	movi	r3,4
    4750:	0009883a 	mov	r4,zero
    4754:	18c7883a 	add	r3,r3,r3
    4758:	18800504 	addi	r2,r3,20
    475c:	21000044 	addi	r4,r4,1
    4760:	b0bffc2e 	bgeu	r22,r2,4754 <_dtoa_r+0xa78>
    4764:	d9801617 	ldw	r6,88(sp)
    4768:	31001115 	stw	r4,68(r6)
    476c:	dc000f17 	ldw	r16,60(sp)
    4770:	003e4b06 	br	40a0 <_dtoa_r+0x3c4>
    4774:	d9801717 	ldw	r6,92(sp)
    4778:	0023883a 	mov	r17,zero
    477c:	31bfff04 	addi	r6,r6,-4
    4780:	d9801715 	stw	r6,92(sp)
    4784:	003df806 	br	3f68 <_dtoa_r+0x28c>
    4788:	00800804 	movi	r2,32
    478c:	10c9c83a 	sub	r4,r2,r3
    4790:	00c00104 	movi	r3,4
    4794:	19005a16 	blt	r3,r4,4900 <_dtoa_r+0xc24>
    4798:	008000c4 	movi	r2,3
    479c:	113f7e16 	blt	r2,r4,4598 <_dtoa_r+0x8bc>
    47a0:	20800704 	addi	r2,r4,28
    47a4:	003f7506 	br	457c <_dtoa_r+0x8a0>
    47a8:	d9801717 	ldw	r6,92(sp)
    47ac:	00800044 	movi	r2,1
    47b0:	1180a10e 	bge	r2,r6,4a38 <_dtoa_r+0xd5c>
    47b4:	d9800f17 	ldw	r6,60(sp)
    47b8:	d8c01017 	ldw	r3,64(sp)
    47bc:	30bfffc4 	addi	r2,r6,-1
    47c0:	1881c616 	blt	r3,r2,4edc <_dtoa_r+0x1200>
    47c4:	18a5c83a 	sub	r18,r3,r2
    47c8:	d8800f17 	ldw	r2,60(sp)
    47cc:	10026216 	blt	r2,zero,5158 <_dtoa_r+0x147c>
    47d0:	dc001117 	ldw	r16,68(sp)
    47d4:	1007883a 	mov	r3,r2
    47d8:	d9800a17 	ldw	r6,40(sp)
    47dc:	d8801117 	ldw	r2,68(sp)
    47e0:	d9001617 	ldw	r4,88(sp)
    47e4:	30cd883a 	add	r6,r6,r3
    47e8:	10c5883a 	add	r2,r2,r3
    47ec:	01400044 	movi	r5,1
    47f0:	d9800a15 	stw	r6,40(sp)
    47f4:	d8801115 	stw	r2,68(sp)
    47f8:	00074480 	call	7448 <__i2b>
    47fc:	1027883a 	mov	r19,r2
    4800:	003f2506 	br	4498 <_dtoa_r+0x7bc>
    4804:	00c00074 	movhi	r3,1
    4808:	18f65d04 	addi	r3,r3,-9868
    480c:	003d6706 	br	3dac <_dtoa_r+0xd0>
    4810:	dd800517 	ldw	r22,20(sp)
    4814:	04000044 	movi	r16,1
    4818:	00000706 	br	4838 <_dtoa_r+0xb5c>
    481c:	d9400717 	ldw	r5,28(sp)
    4820:	d9001617 	ldw	r4,88(sp)
    4824:	01800284 	movi	r6,10
    4828:	000f883a 	mov	r7,zero
    482c:	00074840 	call	7484 <__multadd>
    4830:	d8800715 	stw	r2,28(sp)
    4834:	84000044 	addi	r16,r16,1
    4838:	d9000717 	ldw	r4,28(sp)
    483c:	900b883a 	mov	r5,r18
    4840:	0003a980 	call	3a98 <quorem>
    4844:	15c00c04 	addi	r23,r2,48
    4848:	b5c00005 	stb	r23,0(r22)
    484c:	d8c00f17 	ldw	r3,60(sp)
    4850:	b5800044 	addi	r22,r22,1
    4854:	80fff116 	blt	r16,r3,481c <_dtoa_r+0xb40>
    4858:	d8000615 	stw	zero,24(sp)
    485c:	d9400717 	ldw	r5,28(sp)
    4860:	d9001617 	ldw	r4,88(sp)
    4864:	01800044 	movi	r6,1
    4868:	00070a80 	call	70a8 <__lshift>
    486c:	1009883a 	mov	r4,r2
    4870:	900b883a 	mov	r5,r18
    4874:	d8800715 	stw	r2,28(sp)
    4878:	00068c00 	call	68c0 <__mcmp>
    487c:	00803c0e 	bge	zero,r2,4970 <_dtoa_r+0xc94>
    4880:	b009883a 	mov	r4,r22
    4884:	213fffc4 	addi	r4,r4,-1
    4888:	21400003 	ldbu	r5,0(r4)
    488c:	00800e44 	movi	r2,57
    4890:	28c03fcc 	andi	r3,r5,255
    4894:	18c0201c 	xori	r3,r3,128
    4898:	18ffe004 	addi	r3,r3,-128
    489c:	1881981e 	bne	r3,r2,4f00 <_dtoa_r+0x1224>
    48a0:	d9800517 	ldw	r6,20(sp)
    48a4:	21bff71e 	bne	r4,r6,4884 <_dtoa_r+0xba8>
    48a8:	d8800d17 	ldw	r2,52(sp)
    48ac:	37000044 	addi	fp,r6,1
    48b0:	10800044 	addi	r2,r2,1
    48b4:	d8800d15 	stw	r2,52(sp)
    48b8:	00800c44 	movi	r2,49
    48bc:	30800005 	stb	r2,0(r6)
    48c0:	d9001617 	ldw	r4,88(sp)
    48c4:	900b883a 	mov	r5,r18
    48c8:	00067640 	call	6764 <_Bfree>
    48cc:	983ecd26 	beq	r19,zero,4404 <_dtoa_r+0x728>
    48d0:	d8c00617 	ldw	r3,24(sp)
    48d4:	18000426 	beq	r3,zero,48e8 <_dtoa_r+0xc0c>
    48d8:	1cc00326 	beq	r3,r19,48e8 <_dtoa_r+0xc0c>
    48dc:	d9001617 	ldw	r4,88(sp)
    48e0:	180b883a 	mov	r5,r3
    48e4:	00067640 	call	6764 <_Bfree>
    48e8:	d9001617 	ldw	r4,88(sp)
    48ec:	980b883a 	mov	r5,r19
    48f0:	00067640 	call	6764 <_Bfree>
    48f4:	003ec306 	br	4404 <_dtoa_r+0x728>
    48f8:	1805883a 	mov	r2,r3
    48fc:	003eeb06 	br	44ac <_dtoa_r+0x7d0>
    4900:	d9800a17 	ldw	r6,40(sp)
    4904:	d8c01117 	ldw	r3,68(sp)
    4908:	20bfff04 	addi	r2,r4,-4
    490c:	308d883a 	add	r6,r6,r2
    4910:	1887883a 	add	r3,r3,r2
    4914:	80a1883a 	add	r16,r16,r2
    4918:	d9800a15 	stw	r6,40(sp)
    491c:	d8c01115 	stw	r3,68(sp)
    4920:	003f1d06 	br	4598 <_dtoa_r+0x8bc>
    4924:	a03f0c1e 	bne	r20,zero,4558 <_dtoa_r+0x87c>
    4928:	00800434 	movhi	r2,16
    492c:	10bfffc4 	addi	r2,r2,-1
    4930:	a884703a 	and	r2,r21,r2
    4934:	103f081e 	bne	r2,zero,4558 <_dtoa_r+0x87c>
    4938:	a89ffc2c 	andhi	r2,r21,32752
    493c:	103f0626 	beq	r2,zero,4558 <_dtoa_r+0x87c>
    4940:	d8c01117 	ldw	r3,68(sp)
    4944:	d9000a17 	ldw	r4,40(sp)
    4948:	18c00044 	addi	r3,r3,1
    494c:	21000044 	addi	r4,r4,1
    4950:	d8c01115 	stw	r3,68(sp)
    4954:	d9000a15 	stw	r4,40(sp)
    4958:	003f0006 	br	455c <_dtoa_r+0x880>
    495c:	d9400717 	ldw	r5,28(sp)
    4960:	d9001617 	ldw	r4,88(sp)
    4964:	00075b00 	call	75b0 <__pow5mult>
    4968:	d8800715 	stw	r2,28(sp)
    496c:	003eed06 	br	4524 <_dtoa_r+0x848>
    4970:	1000021e 	bne	r2,zero,497c <_dtoa_r+0xca0>
    4974:	b880004c 	andi	r2,r23,1
    4978:	103fc11e 	bne	r2,zero,4880 <_dtoa_r+0xba4>
    497c:	b5bfffc4 	addi	r22,r22,-1
    4980:	b0c00007 	ldb	r3,0(r22)
    4984:	00800c04 	movi	r2,48
    4988:	18bffc26 	beq	r3,r2,497c <_dtoa_r+0xca0>
    498c:	b7000044 	addi	fp,r22,1
    4990:	003fcb06 	br	48c0 <_dtoa_r+0xbe4>
    4994:	d9800d17 	ldw	r6,52(sp)
    4998:	018fc83a 	sub	r7,zero,r6
    499c:	3801f726 	beq	r7,zero,517c <_dtoa_r+0x14a0>
    49a0:	398003cc 	andi	r6,r7,15
    49a4:	300c90fa 	slli	r6,r6,3
    49a8:	01400074 	movhi	r5,1
    49ac:	29767a04 	addi	r5,r5,-9752
    49b0:	d9001217 	ldw	r4,72(sp)
    49b4:	314d883a 	add	r6,r6,r5
    49b8:	30c00117 	ldw	r3,4(r6)
    49bc:	30800017 	ldw	r2,0(r6)
    49c0:	d9401317 	ldw	r5,76(sp)
    49c4:	3821d13a 	srai	r16,r7,4
    49c8:	100d883a 	mov	r6,r2
    49cc:	180f883a 	mov	r7,r3
    49d0:	0009a0c0 	call	9a0c <__muldf3>
    49d4:	1011883a 	mov	r8,r2
    49d8:	1813883a 	mov	r9,r3
    49dc:	1029883a 	mov	r20,r2
    49e0:	182b883a 	mov	r21,r3
    49e4:	8001e526 	beq	r16,zero,517c <_dtoa_r+0x14a0>
    49e8:	05800084 	movi	r22,2
    49ec:	04400074 	movhi	r17,1
    49f0:	8c76ac04 	addi	r17,r17,-9552
    49f4:	8080004c 	andi	r2,r16,1
    49f8:	1005003a 	cmpeq	r2,r2,zero
    49fc:	1000081e 	bne	r2,zero,4a20 <_dtoa_r+0xd44>
    4a00:	89800017 	ldw	r6,0(r17)
    4a04:	89c00117 	ldw	r7,4(r17)
    4a08:	480b883a 	mov	r5,r9
    4a0c:	4009883a 	mov	r4,r8
    4a10:	0009a0c0 	call	9a0c <__muldf3>
    4a14:	1011883a 	mov	r8,r2
    4a18:	b5800044 	addi	r22,r22,1
    4a1c:	1813883a 	mov	r9,r3
    4a20:	8021d07a 	srai	r16,r16,1
    4a24:	8c400204 	addi	r17,r17,8
    4a28:	803ff21e 	bne	r16,zero,49f4 <_dtoa_r+0xd18>
    4a2c:	4029883a 	mov	r20,r8
    4a30:	482b883a 	mov	r21,r9
    4a34:	003dca06 	br	4160 <_dtoa_r+0x484>
    4a38:	d9000817 	ldw	r4,32(sp)
    4a3c:	2005003a 	cmpeq	r2,r4,zero
    4a40:	1001f61e 	bne	r2,zero,521c <_dtoa_r+0x1540>
    4a44:	dc001117 	ldw	r16,68(sp)
    4a48:	dc801017 	ldw	r18,64(sp)
    4a4c:	18c10cc4 	addi	r3,r3,1075
    4a50:	003f6106 	br	47d8 <_dtoa_r+0xafc>
    4a54:	d8000b15 	stw	zero,44(sp)
    4a58:	d9802617 	ldw	r6,152(sp)
    4a5c:	d8c00d17 	ldw	r3,52(sp)
    4a60:	30800044 	addi	r2,r6,1
    4a64:	18ad883a 	add	r22,r3,r2
    4a68:	b13fffc4 	addi	r4,r22,-1
    4a6c:	d9000e15 	stw	r4,56(sp)
    4a70:	0581f60e 	bge	zero,r22,524c <_dtoa_r+0x1570>
    4a74:	dd800f15 	stw	r22,60(sp)
    4a78:	003f3006 	br	473c <_dtoa_r+0xa60>
    4a7c:	d8000b15 	stw	zero,44(sp)
    4a80:	d9002617 	ldw	r4,152(sp)
    4a84:	0101eb0e 	bge	zero,r4,5234 <_dtoa_r+0x1558>
    4a88:	202d883a 	mov	r22,r4
    4a8c:	d9000e15 	stw	r4,56(sp)
    4a90:	d9000f15 	stw	r4,60(sp)
    4a94:	003f2906 	br	473c <_dtoa_r+0xa60>
    4a98:	01800044 	movi	r6,1
    4a9c:	d9800b15 	stw	r6,44(sp)
    4aa0:	003ff706 	br	4a80 <_dtoa_r+0xda4>
    4aa4:	01000044 	movi	r4,1
    4aa8:	d9000b15 	stw	r4,44(sp)
    4aac:	003fea06 	br	4a58 <_dtoa_r+0xd7c>
    4ab0:	04000c0e 	bge	zero,r16,4ae4 <_dtoa_r+0xe08>
    4ab4:	d9400717 	ldw	r5,28(sp)
    4ab8:	d9001617 	ldw	r4,88(sp)
    4abc:	01800044 	movi	r6,1
    4ac0:	00070a80 	call	70a8 <__lshift>
    4ac4:	1009883a 	mov	r4,r2
    4ac8:	900b883a 	mov	r5,r18
    4acc:	d8800715 	stw	r2,28(sp)
    4ad0:	00068c00 	call	68c0 <__mcmp>
    4ad4:	0081e00e 	bge	zero,r2,5258 <_dtoa_r+0x157c>
    4ad8:	bdc00044 	addi	r23,r23,1
    4adc:	00800e84 	movi	r2,58
    4ae0:	b881a226 	beq	r23,r2,516c <_dtoa_r+0x1490>
    4ae4:	b7000044 	addi	fp,r22,1
    4ae8:	b5c00005 	stb	r23,0(r22)
    4aec:	003f7406 	br	48c0 <_dtoa_r+0xbe4>
    4af0:	00800e44 	movi	r2,57
    4af4:	b8819d26 	beq	r23,r2,516c <_dtoa_r+0x1490>
    4af8:	053ffa0e 	bge	zero,r20,4ae4 <_dtoa_r+0xe08>
    4afc:	8dc00c44 	addi	r23,r17,49
    4b00:	003ff806 	br	4ae4 <_dtoa_r+0xe08>
    4b04:	d9001617 	ldw	r4,88(sp)
    4b08:	a80b883a 	mov	r5,r21
    4b0c:	04000044 	movi	r16,1
    4b10:	00067640 	call	6764 <_Bfree>
    4b14:	003edf06 	br	4694 <_dtoa_r+0x9b8>
    4b18:	d9001617 	ldw	r4,88(sp)
    4b1c:	980b883a 	mov	r5,r19
    4b20:	01800284 	movi	r6,10
    4b24:	000f883a 	mov	r7,zero
    4b28:	00074840 	call	7484 <__multadd>
    4b2c:	1027883a 	mov	r19,r2
    4b30:	d8800615 	stw	r2,24(sp)
    4b34:	003ebb06 	br	4624 <_dtoa_r+0x948>
    4b38:	d9801117 	ldw	r6,68(sp)
    4b3c:	d8800d17 	ldw	r2,52(sp)
    4b40:	d8000915 	stw	zero,36(sp)
    4b44:	308dc83a 	sub	r6,r6,r2
    4b48:	0087c83a 	sub	r3,zero,r2
    4b4c:	d9801115 	stw	r6,68(sp)
    4b50:	d8c01015 	stw	r3,64(sp)
    4b54:	003cfe06 	br	3f50 <_dtoa_r+0x274>
    4b58:	018dc83a 	sub	r6,zero,r6
    4b5c:	d9801115 	stw	r6,68(sp)
    4b60:	d8000a15 	stw	zero,40(sp)
    4b64:	003cf306 	br	3f34 <_dtoa_r+0x258>
    4b68:	d9000d17 	ldw	r4,52(sp)
    4b6c:	000a2d00 	call	a2d0 <__floatsidf>
    4b70:	880b883a 	mov	r5,r17
    4b74:	8009883a 	mov	r4,r16
    4b78:	180f883a 	mov	r7,r3
    4b7c:	100d883a 	mov	r6,r2
    4b80:	000a0b00 	call	a0b0 <__nedf2>
    4b84:	103ce126 	beq	r2,zero,3f0c <_dtoa_r+0x230>
    4b88:	d9800d17 	ldw	r6,52(sp)
    4b8c:	31bfffc4 	addi	r6,r6,-1
    4b90:	d9800d15 	stw	r6,52(sp)
    4b94:	003cdd06 	br	3f0c <_dtoa_r+0x230>
    4b98:	d9000717 	ldw	r4,28(sp)
    4b9c:	900b883a 	mov	r5,r18
    4ba0:	00068c00 	call	68c0 <__mcmp>
    4ba4:	103e8d0e 	bge	r2,zero,45dc <_dtoa_r+0x900>
    4ba8:	d9400717 	ldw	r5,28(sp)
    4bac:	d9001617 	ldw	r4,88(sp)
    4bb0:	01800284 	movi	r6,10
    4bb4:	000f883a 	mov	r7,zero
    4bb8:	00074840 	call	7484 <__multadd>
    4bbc:	d9800d17 	ldw	r6,52(sp)
    4bc0:	d8800715 	stw	r2,28(sp)
    4bc4:	31bfffc4 	addi	r6,r6,-1
    4bc8:	d9800d15 	stw	r6,52(sp)
    4bcc:	b001a71e 	bne	r22,zero,526c <_dtoa_r+0x1590>
    4bd0:	d8800e17 	ldw	r2,56(sp)
    4bd4:	d8800f15 	stw	r2,60(sp)
    4bd8:	003e8006 	br	45dc <_dtoa_r+0x900>
    4bdc:	90800417 	ldw	r2,16(r18)
    4be0:	1085883a 	add	r2,r2,r2
    4be4:	1085883a 	add	r2,r2,r2
    4be8:	1485883a 	add	r2,r2,r18
    4bec:	11000417 	ldw	r4,16(r2)
    4bf0:	000678c0 	call	678c <__hi0bits>
    4bf4:	00c00804 	movi	r3,32
    4bf8:	1887c83a 	sub	r3,r3,r2
    4bfc:	003e5a06 	br	4568 <_dtoa_r+0x88c>
    4c00:	d9400717 	ldw	r5,28(sp)
    4c04:	d9801017 	ldw	r6,64(sp)
    4c08:	d9001617 	ldw	r4,88(sp)
    4c0c:	00075b00 	call	75b0 <__pow5mult>
    4c10:	d8800715 	stw	r2,28(sp)
    4c14:	003e4306 	br	4524 <_dtoa_r+0x848>
    4c18:	d9800f17 	ldw	r6,60(sp)
    4c1c:	d8800d17 	ldw	r2,52(sp)
    4c20:	d9800315 	stw	r6,12(sp)
    4c24:	d8800415 	stw	r2,16(sp)
    4c28:	d8c00b17 	ldw	r3,44(sp)
    4c2c:	1805003a 	cmpeq	r2,r3,zero
    4c30:	1000e21e 	bne	r2,zero,4fbc <_dtoa_r+0x12e0>
    4c34:	d9000317 	ldw	r4,12(sp)
    4c38:	0005883a 	mov	r2,zero
    4c3c:	00cff834 	movhi	r3,16352
    4c40:	200c90fa 	slli	r6,r4,3
    4c44:	01000074 	movhi	r4,1
    4c48:	21367a04 	addi	r4,r4,-9752
    4c4c:	180b883a 	mov	r5,r3
    4c50:	310d883a 	add	r6,r6,r4
    4c54:	327fff17 	ldw	r9,-4(r6)
    4c58:	323ffe17 	ldw	r8,-8(r6)
    4c5c:	1009883a 	mov	r4,r2
    4c60:	480f883a 	mov	r7,r9
    4c64:	400d883a 	mov	r6,r8
    4c68:	0009dd00 	call	9dd0 <__divdf3>
    4c6c:	180b883a 	mov	r5,r3
    4c70:	b00d883a 	mov	r6,r22
    4c74:	b80f883a 	mov	r7,r23
    4c78:	1009883a 	mov	r4,r2
    4c7c:	00099180 	call	9918 <__subdf3>
    4c80:	a80b883a 	mov	r5,r21
    4c84:	a009883a 	mov	r4,r20
    4c88:	d8c01915 	stw	r3,100(sp)
    4c8c:	d8801815 	stw	r2,96(sp)
    4c90:	000a3c80 	call	a3c8 <__fixdfsi>
    4c94:	1009883a 	mov	r4,r2
    4c98:	1027883a 	mov	r19,r2
    4c9c:	000a2d00 	call	a2d0 <__floatsidf>
    4ca0:	a80b883a 	mov	r5,r21
    4ca4:	a009883a 	mov	r4,r20
    4ca8:	180f883a 	mov	r7,r3
    4cac:	100d883a 	mov	r6,r2
    4cb0:	00099180 	call	9918 <__subdf3>
    4cb4:	d9801817 	ldw	r6,96(sp)
    4cb8:	1823883a 	mov	r17,r3
    4cbc:	d8801415 	stw	r2,80(sp)
    4cc0:	302d883a 	mov	r22,r6
    4cc4:	d9800517 	ldw	r6,20(sp)
    4cc8:	9cc00c04 	addi	r19,r19,48
    4ccc:	dc401515 	stw	r17,84(sp)
    4cd0:	d8c01917 	ldw	r3,100(sp)
    4cd4:	34c00005 	stb	r19,0(r6)
    4cd8:	d8800517 	ldw	r2,20(sp)
    4cdc:	d9401917 	ldw	r5,100(sp)
    4ce0:	d9801417 	ldw	r6,80(sp)
    4ce4:	b009883a 	mov	r4,r22
    4ce8:	880f883a 	mov	r7,r17
    4cec:	182f883a 	mov	r23,r3
    4cf0:	17000044 	addi	fp,r2,1
    4cf4:	000a1380 	call	a138 <__gtdf2>
    4cf8:	00804e16 	blt	zero,r2,4e34 <_dtoa_r+0x1158>
    4cfc:	d9801417 	ldw	r6,80(sp)
    4d00:	0005883a 	mov	r2,zero
    4d04:	00cffc34 	movhi	r3,16368
    4d08:	180b883a 	mov	r5,r3
    4d0c:	880f883a 	mov	r7,r17
    4d10:	1009883a 	mov	r4,r2
    4d14:	00099180 	call	9918 <__subdf3>
    4d18:	d9401917 	ldw	r5,100(sp)
    4d1c:	180f883a 	mov	r7,r3
    4d20:	b009883a 	mov	r4,r22
    4d24:	100d883a 	mov	r6,r2
    4d28:	000a1380 	call	a138 <__gtdf2>
    4d2c:	00bda216 	blt	zero,r2,43b8 <_dtoa_r+0x6dc>
    4d30:	d8c00317 	ldw	r3,12(sp)
    4d34:	00800044 	movi	r2,1
    4d38:	10c01216 	blt	r2,r3,4d84 <_dtoa_r+0x10a8>
    4d3c:	003d4506 	br	4254 <_dtoa_r+0x578>
    4d40:	d9801417 	ldw	r6,80(sp)
    4d44:	0005883a 	mov	r2,zero
    4d48:	00cffc34 	movhi	r3,16368
    4d4c:	180b883a 	mov	r5,r3
    4d50:	880f883a 	mov	r7,r17
    4d54:	1009883a 	mov	r4,r2
    4d58:	00099180 	call	9918 <__subdf3>
    4d5c:	d9c01b17 	ldw	r7,108(sp)
    4d60:	180b883a 	mov	r5,r3
    4d64:	1009883a 	mov	r4,r2
    4d68:	b00d883a 	mov	r6,r22
    4d6c:	000a2480 	call	a248 <__ltdf2>
    4d70:	103d9116 	blt	r2,zero,43b8 <_dtoa_r+0x6dc>
    4d74:	d9800517 	ldw	r6,20(sp)
    4d78:	d9000317 	ldw	r4,12(sp)
    4d7c:	3105883a 	add	r2,r6,r4
    4d80:	e0bd3426 	beq	fp,r2,4254 <_dtoa_r+0x578>
    4d84:	04500934 	movhi	r17,16420
    4d88:	0021883a 	mov	r16,zero
    4d8c:	b80b883a 	mov	r5,r23
    4d90:	b009883a 	mov	r4,r22
    4d94:	800d883a 	mov	r6,r16
    4d98:	880f883a 	mov	r7,r17
    4d9c:	0009a0c0 	call	9a0c <__muldf3>
    4da0:	d9401517 	ldw	r5,84(sp)
    4da4:	d9001417 	ldw	r4,80(sp)
    4da8:	880f883a 	mov	r7,r17
    4dac:	000d883a 	mov	r6,zero
    4db0:	d8801a15 	stw	r2,104(sp)
    4db4:	d8c01b15 	stw	r3,108(sp)
    4db8:	0009a0c0 	call	9a0c <__muldf3>
    4dbc:	180b883a 	mov	r5,r3
    4dc0:	1009883a 	mov	r4,r2
    4dc4:	1823883a 	mov	r17,r3
    4dc8:	1021883a 	mov	r16,r2
    4dcc:	000a3c80 	call	a3c8 <__fixdfsi>
    4dd0:	1009883a 	mov	r4,r2
    4dd4:	102b883a 	mov	r21,r2
    4dd8:	000a2d00 	call	a2d0 <__floatsidf>
    4ddc:	880b883a 	mov	r5,r17
    4de0:	8009883a 	mov	r4,r16
    4de4:	180f883a 	mov	r7,r3
    4de8:	100d883a 	mov	r6,r2
    4dec:	00099180 	call	9918 <__subdf3>
    4df0:	1021883a 	mov	r16,r2
    4df4:	d9001b17 	ldw	r4,108(sp)
    4df8:	1823883a 	mov	r17,r3
    4dfc:	dc001415 	stw	r16,80(sp)
    4e00:	ad400c04 	addi	r21,r21,48
    4e04:	dc401515 	stw	r17,84(sp)
    4e08:	d8801a17 	ldw	r2,104(sp)
    4e0c:	e5400005 	stb	r21,0(fp)
    4e10:	202f883a 	mov	r23,r4
    4e14:	d9c01b17 	ldw	r7,108(sp)
    4e18:	d9001417 	ldw	r4,80(sp)
    4e1c:	880b883a 	mov	r5,r17
    4e20:	100d883a 	mov	r6,r2
    4e24:	102d883a 	mov	r22,r2
    4e28:	e7000044 	addi	fp,fp,1
    4e2c:	000a2480 	call	a248 <__ltdf2>
    4e30:	103fc30e 	bge	r2,zero,4d40 <_dtoa_r+0x1064>
    4e34:	d9000417 	ldw	r4,16(sp)
    4e38:	d9000d15 	stw	r4,52(sp)
    4e3c:	003d7106 	br	4404 <_dtoa_r+0x728>
    4e40:	d9801717 	ldw	r6,92(sp)
    4e44:	00800084 	movi	r2,2
    4e48:	11bde60e 	bge	r2,r6,45e4 <_dtoa_r+0x908>
    4e4c:	203cfb1e 	bne	r4,zero,423c <_dtoa_r+0x560>
    4e50:	d9001617 	ldw	r4,88(sp)
    4e54:	900b883a 	mov	r5,r18
    4e58:	01800144 	movi	r6,5
    4e5c:	000f883a 	mov	r7,zero
    4e60:	00074840 	call	7484 <__multadd>
    4e64:	d9000717 	ldw	r4,28(sp)
    4e68:	100b883a 	mov	r5,r2
    4e6c:	1025883a 	mov	r18,r2
    4e70:	00068c00 	call	68c0 <__mcmp>
    4e74:	00bcf10e 	bge	zero,r2,423c <_dtoa_r+0x560>
    4e78:	d8c00d17 	ldw	r3,52(sp)
    4e7c:	d9000517 	ldw	r4,20(sp)
    4e80:	d8000615 	stw	zero,24(sp)
    4e84:	18c00044 	addi	r3,r3,1
    4e88:	d8c00d15 	stw	r3,52(sp)
    4e8c:	00800c44 	movi	r2,49
    4e90:	27000044 	addi	fp,r4,1
    4e94:	20800005 	stb	r2,0(r4)
    4e98:	003e8906 	br	48c0 <_dtoa_r+0xbe4>
    4e9c:	d8c00517 	ldw	r3,20(sp)
    4ea0:	003bc206 	br	3dac <_dtoa_r+0xd0>
    4ea4:	01800074 	movhi	r6,1
    4ea8:	31b6ac04 	addi	r6,r6,-9552
    4eac:	30c00917 	ldw	r3,36(r6)
    4eb0:	30800817 	ldw	r2,32(r6)
    4eb4:	d9001217 	ldw	r4,72(sp)
    4eb8:	d9401317 	ldw	r5,76(sp)
    4ebc:	180f883a 	mov	r7,r3
    4ec0:	100d883a 	mov	r6,r2
    4ec4:	0009dd00 	call	9dd0 <__divdf3>
    4ec8:	948003cc 	andi	r18,r18,15
    4ecc:	058000c4 	movi	r22,3
    4ed0:	1029883a 	mov	r20,r2
    4ed4:	182b883a 	mov	r21,r3
    4ed8:	003c8906 	br	4100 <_dtoa_r+0x424>
    4edc:	d9001017 	ldw	r4,64(sp)
    4ee0:	d9800917 	ldw	r6,36(sp)
    4ee4:	0025883a 	mov	r18,zero
    4ee8:	1105c83a 	sub	r2,r2,r4
    4eec:	2089883a 	add	r4,r4,r2
    4ef0:	308d883a 	add	r6,r6,r2
    4ef4:	d9001015 	stw	r4,64(sp)
    4ef8:	d9800915 	stw	r6,36(sp)
    4efc:	003e3206 	br	47c8 <_dtoa_r+0xaec>
    4f00:	28800044 	addi	r2,r5,1
    4f04:	27000044 	addi	fp,r4,1
    4f08:	20800005 	stb	r2,0(r4)
    4f0c:	003e6c06 	br	48c0 <_dtoa_r+0xbe4>
    4f10:	d8800f17 	ldw	r2,60(sp)
    4f14:	00bce016 	blt	zero,r2,4298 <_dtoa_r+0x5bc>
    4f18:	d9800f17 	ldw	r6,60(sp)
    4f1c:	303cc51e 	bne	r6,zero,4234 <_dtoa_r+0x558>
    4f20:	0005883a 	mov	r2,zero
    4f24:	00d00534 	movhi	r3,16404
    4f28:	980b883a 	mov	r5,r19
    4f2c:	180f883a 	mov	r7,r3
    4f30:	9009883a 	mov	r4,r18
    4f34:	100d883a 	mov	r6,r2
    4f38:	0009a0c0 	call	9a0c <__muldf3>
    4f3c:	180b883a 	mov	r5,r3
    4f40:	a80f883a 	mov	r7,r21
    4f44:	1009883a 	mov	r4,r2
    4f48:	a00d883a 	mov	r6,r20
    4f4c:	000a1c00 	call	a1c0 <__gedf2>
    4f50:	103cb80e 	bge	r2,zero,4234 <_dtoa_r+0x558>
    4f54:	0027883a 	mov	r19,zero
    4f58:	0025883a 	mov	r18,zero
    4f5c:	003fc606 	br	4e78 <_dtoa_r+0x119c>
    4f60:	99400117 	ldw	r5,4(r19)
    4f64:	d9001617 	ldw	r4,88(sp)
    4f68:	0006ce40 	call	6ce4 <_Balloc>
    4f6c:	99800417 	ldw	r6,16(r19)
    4f70:	11000304 	addi	r4,r2,12
    4f74:	99400304 	addi	r5,r19,12
    4f78:	318d883a 	add	r6,r6,r6
    4f7c:	318d883a 	add	r6,r6,r6
    4f80:	31800204 	addi	r6,r6,8
    4f84:	1023883a 	mov	r17,r2
    4f88:	000654c0 	call	654c <memcpy>
    4f8c:	d9001617 	ldw	r4,88(sp)
    4f90:	880b883a 	mov	r5,r17
    4f94:	01800044 	movi	r6,1
    4f98:	00070a80 	call	70a8 <__lshift>
    4f9c:	100b883a 	mov	r5,r2
    4fa0:	003d9c06 	br	4614 <_dtoa_r+0x938>
    4fa4:	00800e44 	movi	r2,57
    4fa8:	b8807026 	beq	r23,r2,516c <_dtoa_r+0x1490>
    4fac:	b8800044 	addi	r2,r23,1
    4fb0:	b7000044 	addi	fp,r22,1
    4fb4:	b0800005 	stb	r2,0(r22)
    4fb8:	003e4106 	br	48c0 <_dtoa_r+0xbe4>
    4fbc:	d8800317 	ldw	r2,12(sp)
    4fc0:	01800074 	movhi	r6,1
    4fc4:	31b67a04 	addi	r6,r6,-9752
    4fc8:	b009883a 	mov	r4,r22
    4fcc:	100e90fa 	slli	r7,r2,3
    4fd0:	b80b883a 	mov	r5,r23
    4fd4:	398f883a 	add	r7,r7,r6
    4fd8:	38bffe17 	ldw	r2,-8(r7)
    4fdc:	d9800517 	ldw	r6,20(sp)
    4fe0:	38ffff17 	ldw	r3,-4(r7)
    4fe4:	37000044 	addi	fp,r6,1
    4fe8:	180f883a 	mov	r7,r3
    4fec:	100d883a 	mov	r6,r2
    4ff0:	0009a0c0 	call	9a0c <__muldf3>
    4ff4:	a80b883a 	mov	r5,r21
    4ff8:	a009883a 	mov	r4,r20
    4ffc:	182f883a 	mov	r23,r3
    5000:	102d883a 	mov	r22,r2
    5004:	000a3c80 	call	a3c8 <__fixdfsi>
    5008:	1009883a 	mov	r4,r2
    500c:	1027883a 	mov	r19,r2
    5010:	000a2d00 	call	a2d0 <__floatsidf>
    5014:	a80b883a 	mov	r5,r21
    5018:	a009883a 	mov	r4,r20
    501c:	180f883a 	mov	r7,r3
    5020:	100d883a 	mov	r6,r2
    5024:	00099180 	call	9918 <__subdf3>
    5028:	180b883a 	mov	r5,r3
    502c:	d8c00517 	ldw	r3,20(sp)
    5030:	9cc00c04 	addi	r19,r19,48
    5034:	1009883a 	mov	r4,r2
    5038:	1cc00005 	stb	r19,0(r3)
    503c:	2021883a 	mov	r16,r4
    5040:	d9000317 	ldw	r4,12(sp)
    5044:	00800044 	movi	r2,1
    5048:	2823883a 	mov	r17,r5
    504c:	20802226 	beq	r4,r2,50d8 <_dtoa_r+0x13fc>
    5050:	1029883a 	mov	r20,r2
    5054:	0005883a 	mov	r2,zero
    5058:	00d00934 	movhi	r3,16420
    505c:	180f883a 	mov	r7,r3
    5060:	100d883a 	mov	r6,r2
    5064:	880b883a 	mov	r5,r17
    5068:	8009883a 	mov	r4,r16
    506c:	0009a0c0 	call	9a0c <__muldf3>
    5070:	180b883a 	mov	r5,r3
    5074:	1009883a 	mov	r4,r2
    5078:	1823883a 	mov	r17,r3
    507c:	1021883a 	mov	r16,r2
    5080:	000a3c80 	call	a3c8 <__fixdfsi>
    5084:	1009883a 	mov	r4,r2
    5088:	102b883a 	mov	r21,r2
    508c:	000a2d00 	call	a2d0 <__floatsidf>
    5090:	880b883a 	mov	r5,r17
    5094:	8009883a 	mov	r4,r16
    5098:	180f883a 	mov	r7,r3
    509c:	100d883a 	mov	r6,r2
    50a0:	00099180 	call	9918 <__subdf3>
    50a4:	180b883a 	mov	r5,r3
    50a8:	d8c00517 	ldw	r3,20(sp)
    50ac:	1009883a 	mov	r4,r2
    50b0:	ad400c04 	addi	r21,r21,48
    50b4:	1d05883a 	add	r2,r3,r20
    50b8:	15400005 	stb	r21,0(r2)
    50bc:	2021883a 	mov	r16,r4
    50c0:	d9000317 	ldw	r4,12(sp)
    50c4:	a5000044 	addi	r20,r20,1
    50c8:	2823883a 	mov	r17,r5
    50cc:	a13fe11e 	bne	r20,r4,5054 <_dtoa_r+0x1378>
    50d0:	e505883a 	add	r2,fp,r20
    50d4:	173fffc4 	addi	fp,r2,-1
    50d8:	0025883a 	mov	r18,zero
    50dc:	04cff834 	movhi	r19,16352
    50e0:	b009883a 	mov	r4,r22
    50e4:	b80b883a 	mov	r5,r23
    50e8:	900d883a 	mov	r6,r18
    50ec:	980f883a 	mov	r7,r19
    50f0:	00099980 	call	9998 <__adddf3>
    50f4:	180b883a 	mov	r5,r3
    50f8:	1009883a 	mov	r4,r2
    50fc:	800d883a 	mov	r6,r16
    5100:	880f883a 	mov	r7,r17
    5104:	000a2480 	call	a248 <__ltdf2>
    5108:	103cab16 	blt	r2,zero,43b8 <_dtoa_r+0x6dc>
    510c:	0009883a 	mov	r4,zero
    5110:	980b883a 	mov	r5,r19
    5114:	b80f883a 	mov	r7,r23
    5118:	b00d883a 	mov	r6,r22
    511c:	00099180 	call	9918 <__subdf3>
    5120:	180b883a 	mov	r5,r3
    5124:	880f883a 	mov	r7,r17
    5128:	1009883a 	mov	r4,r2
    512c:	800d883a 	mov	r6,r16
    5130:	000a1380 	call	a138 <__gtdf2>
    5134:	00bc470e 	bge	zero,r2,4254 <_dtoa_r+0x578>
    5138:	00c00c04 	movi	r3,48
    513c:	e73fffc4 	addi	fp,fp,-1
    5140:	e0800007 	ldb	r2,0(fp)
    5144:	10fffd26 	beq	r2,r3,513c <_dtoa_r+0x1460>
    5148:	d9800417 	ldw	r6,16(sp)
    514c:	e7000044 	addi	fp,fp,1
    5150:	d9800d15 	stw	r6,52(sp)
    5154:	003cab06 	br	4404 <_dtoa_r+0x728>
    5158:	d8c00f17 	ldw	r3,60(sp)
    515c:	d9001117 	ldw	r4,68(sp)
    5160:	20e1c83a 	sub	r16,r4,r3
    5164:	0007883a 	mov	r3,zero
    5168:	003d9b06 	br	47d8 <_dtoa_r+0xafc>
    516c:	00800e44 	movi	r2,57
    5170:	b0800005 	stb	r2,0(r22)
    5174:	b5800044 	addi	r22,r22,1
    5178:	003dc106 	br	4880 <_dtoa_r+0xba4>
    517c:	05800084 	movi	r22,2
    5180:	003bf706 	br	4160 <_dtoa_r+0x484>
    5184:	d9000f17 	ldw	r4,60(sp)
    5188:	013c000e 	bge	zero,r4,418c <_dtoa_r+0x4b0>
    518c:	d9800e17 	ldw	r6,56(sp)
    5190:	01bc300e 	bge	zero,r6,4254 <_dtoa_r+0x578>
    5194:	0005883a 	mov	r2,zero
    5198:	00d00934 	movhi	r3,16420
    519c:	a80b883a 	mov	r5,r21
    51a0:	180f883a 	mov	r7,r3
    51a4:	a009883a 	mov	r4,r20
    51a8:	100d883a 	mov	r6,r2
    51ac:	0009a0c0 	call	9a0c <__muldf3>
    51b0:	b1000044 	addi	r4,r22,1
    51b4:	1021883a 	mov	r16,r2
    51b8:	1823883a 	mov	r17,r3
    51bc:	000a2d00 	call	a2d0 <__floatsidf>
    51c0:	880b883a 	mov	r5,r17
    51c4:	8009883a 	mov	r4,r16
    51c8:	180f883a 	mov	r7,r3
    51cc:	100d883a 	mov	r6,r2
    51d0:	0009a0c0 	call	9a0c <__muldf3>
    51d4:	0011883a 	mov	r8,zero
    51d8:	02500734 	movhi	r9,16412
    51dc:	180b883a 	mov	r5,r3
    51e0:	480f883a 	mov	r7,r9
    51e4:	1009883a 	mov	r4,r2
    51e8:	400d883a 	mov	r6,r8
    51ec:	00099980 	call	9998 <__adddf3>
    51f0:	102d883a 	mov	r22,r2
    51f4:	00bf3034 	movhi	r2,64704
    51f8:	10ef883a 	add	r23,r2,r3
    51fc:	d8800d17 	ldw	r2,52(sp)
    5200:	d8c00e17 	ldw	r3,56(sp)
    5204:	8029883a 	mov	r20,r16
    5208:	10bfffc4 	addi	r2,r2,-1
    520c:	882b883a 	mov	r21,r17
    5210:	d8800415 	stw	r2,16(sp)
    5214:	d8c00315 	stw	r3,12(sp)
    5218:	003e8306 	br	4c28 <_dtoa_r+0xf4c>
    521c:	d8800117 	ldw	r2,4(sp)
    5220:	dc001117 	ldw	r16,68(sp)
    5224:	dc801017 	ldw	r18,64(sp)
    5228:	00c00d84 	movi	r3,54
    522c:	1887c83a 	sub	r3,r3,r2
    5230:	003d6906 	br	47d8 <_dtoa_r+0xafc>
    5234:	01800044 	movi	r6,1
    5238:	3021883a 	mov	r16,r6
    523c:	d9800f15 	stw	r6,60(sp)
    5240:	d9802615 	stw	r6,152(sp)
    5244:	d9800e15 	stw	r6,56(sp)
    5248:	003b9306 	br	4098 <_dtoa_r+0x3bc>
    524c:	b021883a 	mov	r16,r22
    5250:	dd800f15 	stw	r22,60(sp)
    5254:	003b9006 	br	4098 <_dtoa_r+0x3bc>
    5258:	103e221e 	bne	r2,zero,4ae4 <_dtoa_r+0xe08>
    525c:	b880004c 	andi	r2,r23,1
    5260:	1005003a 	cmpeq	r2,r2,zero
    5264:	103e1f1e 	bne	r2,zero,4ae4 <_dtoa_r+0xe08>
    5268:	003e1b06 	br	4ad8 <_dtoa_r+0xdfc>
    526c:	d9001617 	ldw	r4,88(sp)
    5270:	980b883a 	mov	r5,r19
    5274:	01800284 	movi	r6,10
    5278:	000f883a 	mov	r7,zero
    527c:	00074840 	call	7484 <__multadd>
    5280:	d8c00e17 	ldw	r3,56(sp)
    5284:	1027883a 	mov	r19,r2
    5288:	d8c00f15 	stw	r3,60(sp)
    528c:	003cd306 	br	45dc <_dtoa_r+0x900>

00005290 <_fflush_r>:
    5290:	defffb04 	addi	sp,sp,-20
    5294:	dcc00315 	stw	r19,12(sp)
    5298:	dc800215 	stw	r18,8(sp)
    529c:	dfc00415 	stw	ra,16(sp)
    52a0:	dc400115 	stw	r17,4(sp)
    52a4:	dc000015 	stw	r16,0(sp)
    52a8:	2027883a 	mov	r19,r4
    52ac:	2825883a 	mov	r18,r5
    52b0:	20000226 	beq	r4,zero,52bc <_fflush_r+0x2c>
    52b4:	20800e17 	ldw	r2,56(r4)
    52b8:	10005626 	beq	r2,zero,5414 <_fflush_r+0x184>
    52bc:	9100030b 	ldhu	r4,12(r18)
    52c0:	20ffffcc 	andi	r3,r4,65535
    52c4:	18e0001c 	xori	r3,r3,32768
    52c8:	18e00004 	addi	r3,r3,-32768
    52cc:	1880020c 	andi	r2,r3,8
    52d0:	1000261e 	bne	r2,zero,536c <_fflush_r+0xdc>
    52d4:	90c00117 	ldw	r3,4(r18)
    52d8:	20820014 	ori	r2,r4,2048
    52dc:	9080030d 	sth	r2,12(r18)
    52e0:	1009883a 	mov	r4,r2
    52e4:	00c0400e 	bge	zero,r3,53e8 <_fflush_r+0x158>
    52e8:	92000a17 	ldw	r8,40(r18)
    52ec:	40004026 	beq	r8,zero,53f0 <_fflush_r+0x160>
    52f0:	2084000c 	andi	r2,r4,4096
    52f4:	10005326 	beq	r2,zero,5444 <_fflush_r+0x1b4>
    52f8:	94001417 	ldw	r16,80(r18)
    52fc:	9080030b 	ldhu	r2,12(r18)
    5300:	1080010c 	andi	r2,r2,4
    5304:	1000481e 	bne	r2,zero,5428 <_fflush_r+0x198>
    5308:	91400717 	ldw	r5,28(r18)
    530c:	9809883a 	mov	r4,r19
    5310:	800d883a 	mov	r6,r16
    5314:	000f883a 	mov	r7,zero
    5318:	403ee83a 	callr	r8
    531c:	8080261e 	bne	r16,r2,53b8 <_fflush_r+0x128>
    5320:	9080030b 	ldhu	r2,12(r18)
    5324:	91000417 	ldw	r4,16(r18)
    5328:	90000115 	stw	zero,4(r18)
    532c:	10bdffcc 	andi	r2,r2,63487
    5330:	10ffffcc 	andi	r3,r2,65535
    5334:	18c4000c 	andi	r3,r3,4096
    5338:	9080030d 	sth	r2,12(r18)
    533c:	91000015 	stw	r4,0(r18)
    5340:	18002b26 	beq	r3,zero,53f0 <_fflush_r+0x160>
    5344:	0007883a 	mov	r3,zero
    5348:	1805883a 	mov	r2,r3
    534c:	94001415 	stw	r16,80(r18)
    5350:	dfc00417 	ldw	ra,16(sp)
    5354:	dcc00317 	ldw	r19,12(sp)
    5358:	dc800217 	ldw	r18,8(sp)
    535c:	dc400117 	ldw	r17,4(sp)
    5360:	dc000017 	ldw	r16,0(sp)
    5364:	dec00504 	addi	sp,sp,20
    5368:	f800283a 	ret
    536c:	94400417 	ldw	r17,16(r18)
    5370:	88001f26 	beq	r17,zero,53f0 <_fflush_r+0x160>
    5374:	90800017 	ldw	r2,0(r18)
    5378:	18c000cc 	andi	r3,r3,3
    537c:	94400015 	stw	r17,0(r18)
    5380:	1461c83a 	sub	r16,r2,r17
    5384:	18002526 	beq	r3,zero,541c <_fflush_r+0x18c>
    5388:	0005883a 	mov	r2,zero
    538c:	90800215 	stw	r2,8(r18)
    5390:	0400170e 	bge	zero,r16,53f0 <_fflush_r+0x160>
    5394:	90c00917 	ldw	r3,36(r18)
    5398:	91400717 	ldw	r5,28(r18)
    539c:	880d883a 	mov	r6,r17
    53a0:	800f883a 	mov	r7,r16
    53a4:	9809883a 	mov	r4,r19
    53a8:	183ee83a 	callr	r3
    53ac:	88a3883a 	add	r17,r17,r2
    53b0:	80a1c83a 	sub	r16,r16,r2
    53b4:	00bff616 	blt	zero,r2,5390 <_fflush_r+0x100>
    53b8:	9080030b 	ldhu	r2,12(r18)
    53bc:	00ffffc4 	movi	r3,-1
    53c0:	10801014 	ori	r2,r2,64
    53c4:	9080030d 	sth	r2,12(r18)
    53c8:	1805883a 	mov	r2,r3
    53cc:	dfc00417 	ldw	ra,16(sp)
    53d0:	dcc00317 	ldw	r19,12(sp)
    53d4:	dc800217 	ldw	r18,8(sp)
    53d8:	dc400117 	ldw	r17,4(sp)
    53dc:	dc000017 	ldw	r16,0(sp)
    53e0:	dec00504 	addi	sp,sp,20
    53e4:	f800283a 	ret
    53e8:	90800f17 	ldw	r2,60(r18)
    53ec:	00bfbe16 	blt	zero,r2,52e8 <_fflush_r+0x58>
    53f0:	0007883a 	mov	r3,zero
    53f4:	1805883a 	mov	r2,r3
    53f8:	dfc00417 	ldw	ra,16(sp)
    53fc:	dcc00317 	ldw	r19,12(sp)
    5400:	dc800217 	ldw	r18,8(sp)
    5404:	dc400117 	ldw	r17,4(sp)
    5408:	dc000017 	ldw	r16,0(sp)
    540c:	dec00504 	addi	sp,sp,20
    5410:	f800283a 	ret
    5414:	00055280 	call	5528 <__sinit>
    5418:	003fa806 	br	52bc <_fflush_r+0x2c>
    541c:	90800517 	ldw	r2,20(r18)
    5420:	90800215 	stw	r2,8(r18)
    5424:	003fda06 	br	5390 <_fflush_r+0x100>
    5428:	90800117 	ldw	r2,4(r18)
    542c:	90c00c17 	ldw	r3,48(r18)
    5430:	80a1c83a 	sub	r16,r16,r2
    5434:	183fb426 	beq	r3,zero,5308 <_fflush_r+0x78>
    5438:	90800f17 	ldw	r2,60(r18)
    543c:	80a1c83a 	sub	r16,r16,r2
    5440:	003fb106 	br	5308 <_fflush_r+0x78>
    5444:	91400717 	ldw	r5,28(r18)
    5448:	9809883a 	mov	r4,r19
    544c:	000d883a 	mov	r6,zero
    5450:	01c00044 	movi	r7,1
    5454:	403ee83a 	callr	r8
    5458:	1021883a 	mov	r16,r2
    545c:	00bfffc4 	movi	r2,-1
    5460:	80800226 	beq	r16,r2,546c <_fflush_r+0x1dc>
    5464:	92000a17 	ldw	r8,40(r18)
    5468:	003fa406 	br	52fc <_fflush_r+0x6c>
    546c:	98c00017 	ldw	r3,0(r19)
    5470:	00800744 	movi	r2,29
    5474:	18bfde26 	beq	r3,r2,53f0 <_fflush_r+0x160>
    5478:	9080030b 	ldhu	r2,12(r18)
    547c:	8007883a 	mov	r3,r16
    5480:	10801014 	ori	r2,r2,64
    5484:	9080030d 	sth	r2,12(r18)
    5488:	003fcf06 	br	53c8 <_fflush_r+0x138>

0000548c <fflush>:
    548c:	01400034 	movhi	r5,0
    5490:	2954a404 	addi	r5,r5,21136
    5494:	2007883a 	mov	r3,r4
    5498:	20000526 	beq	r4,zero,54b0 <fflush+0x24>
    549c:	00800074 	movhi	r2,1
    54a0:	10bd9a04 	addi	r2,r2,-2456
    54a4:	11000017 	ldw	r4,0(r2)
    54a8:	180b883a 	mov	r5,r3
    54ac:	00052901 	jmpi	5290 <_fflush_r>
    54b0:	00800074 	movhi	r2,1
    54b4:	10bd9b04 	addi	r2,r2,-2452
    54b8:	11000017 	ldw	r4,0(r2)
    54bc:	00060901 	jmpi	6090 <_fwalk_reent>

000054c0 <std>:
    54c0:	00800074 	movhi	r2,1
    54c4:	10a01004 	addi	r2,r2,-32704
    54c8:	20800b15 	stw	r2,44(r4)
    54cc:	00800074 	movhi	r2,1
    54d0:	10a04b04 	addi	r2,r2,-32468
    54d4:	20800815 	stw	r2,32(r4)
    54d8:	00c00074 	movhi	r3,1
    54dc:	18e02c04 	addi	r3,r3,-32592
    54e0:	00800074 	movhi	r2,1
    54e4:	10a01204 	addi	r2,r2,-32696
    54e8:	2140030d 	sth	r5,12(r4)
    54ec:	2180038d 	sth	r6,14(r4)
    54f0:	20c00915 	stw	r3,36(r4)
    54f4:	20800a15 	stw	r2,40(r4)
    54f8:	20000015 	stw	zero,0(r4)
    54fc:	20000115 	stw	zero,4(r4)
    5500:	20000215 	stw	zero,8(r4)
    5504:	20000415 	stw	zero,16(r4)
    5508:	20000515 	stw	zero,20(r4)
    550c:	20000615 	stw	zero,24(r4)
    5510:	21000715 	stw	r4,28(r4)
    5514:	f800283a 	ret

00005518 <__sfp_lock_acquire>:
    5518:	f800283a 	ret

0000551c <__sfp_lock_release>:
    551c:	f800283a 	ret

00005520 <__sinit_lock_acquire>:
    5520:	f800283a 	ret

00005524 <__sinit_lock_release>:
    5524:	f800283a 	ret

00005528 <__sinit>:
    5528:	20800e17 	ldw	r2,56(r4)
    552c:	defffd04 	addi	sp,sp,-12
    5530:	dc400115 	stw	r17,4(sp)
    5534:	dc000015 	stw	r16,0(sp)
    5538:	dfc00215 	stw	ra,8(sp)
    553c:	04400044 	movi	r17,1
    5540:	01400104 	movi	r5,4
    5544:	000d883a 	mov	r6,zero
    5548:	2021883a 	mov	r16,r4
    554c:	2200bb04 	addi	r8,r4,748
    5550:	200f883a 	mov	r7,r4
    5554:	10000526 	beq	r2,zero,556c <__sinit+0x44>
    5558:	dfc00217 	ldw	ra,8(sp)
    555c:	dc400117 	ldw	r17,4(sp)
    5560:	dc000017 	ldw	r16,0(sp)
    5564:	dec00304 	addi	sp,sp,12
    5568:	f800283a 	ret
    556c:	21000117 	ldw	r4,4(r4)
    5570:	00800034 	movhi	r2,0
    5574:	10958304 	addi	r2,r2,22028
    5578:	00c000c4 	movi	r3,3
    557c:	80800f15 	stw	r2,60(r16)
    5580:	80c0b915 	stw	r3,740(r16)
    5584:	8200ba15 	stw	r8,744(r16)
    5588:	84400e15 	stw	r17,56(r16)
    558c:	8000b815 	stw	zero,736(r16)
    5590:	00054c00 	call	54c0 <std>
    5594:	81000217 	ldw	r4,8(r16)
    5598:	880d883a 	mov	r6,r17
    559c:	800f883a 	mov	r7,r16
    55a0:	01400284 	movi	r5,10
    55a4:	00054c00 	call	54c0 <std>
    55a8:	81000317 	ldw	r4,12(r16)
    55ac:	800f883a 	mov	r7,r16
    55b0:	01400484 	movi	r5,18
    55b4:	01800084 	movi	r6,2
    55b8:	dfc00217 	ldw	ra,8(sp)
    55bc:	dc400117 	ldw	r17,4(sp)
    55c0:	dc000017 	ldw	r16,0(sp)
    55c4:	dec00304 	addi	sp,sp,12
    55c8:	00054c01 	jmpi	54c0 <std>

000055cc <__fp_lock>:
    55cc:	0005883a 	mov	r2,zero
    55d0:	f800283a 	ret

000055d4 <__fp_unlock>:
    55d4:	0005883a 	mov	r2,zero
    55d8:	f800283a 	ret

000055dc <__fp_unlock_all>:
    55dc:	00800074 	movhi	r2,1
    55e0:	10bd9a04 	addi	r2,r2,-2456
    55e4:	11000017 	ldw	r4,0(r2)
    55e8:	01400034 	movhi	r5,0
    55ec:	29557504 	addi	r5,r5,21972
    55f0:	00061581 	jmpi	6158 <_fwalk>

000055f4 <__fp_lock_all>:
    55f4:	00800074 	movhi	r2,1
    55f8:	10bd9a04 	addi	r2,r2,-2456
    55fc:	11000017 	ldw	r4,0(r2)
    5600:	01400034 	movhi	r5,0
    5604:	29557304 	addi	r5,r5,21964
    5608:	00061581 	jmpi	6158 <_fwalk>

0000560c <_cleanup_r>:
    560c:	01400074 	movhi	r5,1
    5610:	29619504 	addi	r5,r5,-31148
    5614:	00061581 	jmpi	6158 <_fwalk>

00005618 <_cleanup>:
    5618:	00800074 	movhi	r2,1
    561c:	10bd9b04 	addi	r2,r2,-2452
    5620:	11000017 	ldw	r4,0(r2)
    5624:	000560c1 	jmpi	560c <_cleanup_r>

00005628 <__sfmoreglue>:
    5628:	defffc04 	addi	sp,sp,-16
    562c:	dc000015 	stw	r16,0(sp)
    5630:	2821883a 	mov	r16,r5
    5634:	dc400115 	stw	r17,4(sp)
    5638:	01401704 	movi	r5,92
    563c:	2023883a 	mov	r17,r4
    5640:	8009883a 	mov	r4,r16
    5644:	dfc00315 	stw	ra,12(sp)
    5648:	dcc00215 	stw	r19,8(sp)
    564c:	000a7800 	call	a780 <__mulsi3>
    5650:	11400304 	addi	r5,r2,12
    5654:	8809883a 	mov	r4,r17
    5658:	1027883a 	mov	r19,r2
    565c:	0000ef40 	call	ef4 <_malloc_r>
    5660:	10c00304 	addi	r3,r2,12
    5664:	1023883a 	mov	r17,r2
    5668:	1809883a 	mov	r4,r3
    566c:	980d883a 	mov	r6,r19
    5670:	000b883a 	mov	r5,zero
    5674:	10000b26 	beq	r2,zero,56a4 <__sfmoreglue+0x7c>
    5678:	14000115 	stw	r16,4(r2)
    567c:	10c00215 	stw	r3,8(r2)
    5680:	10000015 	stw	zero,0(r2)
    5684:	00066cc0 	call	66cc <memset>
    5688:	8805883a 	mov	r2,r17
    568c:	dfc00317 	ldw	ra,12(sp)
    5690:	dcc00217 	ldw	r19,8(sp)
    5694:	dc400117 	ldw	r17,4(sp)
    5698:	dc000017 	ldw	r16,0(sp)
    569c:	dec00404 	addi	sp,sp,16
    56a0:	f800283a 	ret
    56a4:	0023883a 	mov	r17,zero
    56a8:	8805883a 	mov	r2,r17
    56ac:	dfc00317 	ldw	ra,12(sp)
    56b0:	dcc00217 	ldw	r19,8(sp)
    56b4:	dc400117 	ldw	r17,4(sp)
    56b8:	dc000017 	ldw	r16,0(sp)
    56bc:	dec00404 	addi	sp,sp,16
    56c0:	f800283a 	ret

000056c4 <__sfp>:
    56c4:	defffd04 	addi	sp,sp,-12
    56c8:	00800074 	movhi	r2,1
    56cc:	10bd9b04 	addi	r2,r2,-2452
    56d0:	dc000015 	stw	r16,0(sp)
    56d4:	14000017 	ldw	r16,0(r2)
    56d8:	dc400115 	stw	r17,4(sp)
    56dc:	dfc00215 	stw	ra,8(sp)
    56e0:	80800e17 	ldw	r2,56(r16)
    56e4:	2023883a 	mov	r17,r4
    56e8:	10002626 	beq	r2,zero,5784 <__sfp+0xc0>
    56ec:	8400b804 	addi	r16,r16,736
    56f0:	80800117 	ldw	r2,4(r16)
    56f4:	81000217 	ldw	r4,8(r16)
    56f8:	10ffffc4 	addi	r3,r2,-1
    56fc:	18000916 	blt	r3,zero,5724 <__sfp+0x60>
    5700:	2080030f 	ldh	r2,12(r4)
    5704:	10000b26 	beq	r2,zero,5734 <__sfp+0x70>
    5708:	017fffc4 	movi	r5,-1
    570c:	00000206 	br	5718 <__sfp+0x54>
    5710:	2080030f 	ldh	r2,12(r4)
    5714:	10000726 	beq	r2,zero,5734 <__sfp+0x70>
    5718:	18ffffc4 	addi	r3,r3,-1
    571c:	21001704 	addi	r4,r4,92
    5720:	197ffb1e 	bne	r3,r5,5710 <__sfp+0x4c>
    5724:	80800017 	ldw	r2,0(r16)
    5728:	10001926 	beq	r2,zero,5790 <__sfp+0xcc>
    572c:	1021883a 	mov	r16,r2
    5730:	003fef06 	br	56f0 <__sfp+0x2c>
    5734:	00bfffc4 	movi	r2,-1
    5738:	00c00044 	movi	r3,1
    573c:	2080038d 	sth	r2,14(r4)
    5740:	20c0030d 	sth	r3,12(r4)
    5744:	20000015 	stw	zero,0(r4)
    5748:	20000215 	stw	zero,8(r4)
    574c:	20000115 	stw	zero,4(r4)
    5750:	20000415 	stw	zero,16(r4)
    5754:	20000515 	stw	zero,20(r4)
    5758:	20000615 	stw	zero,24(r4)
    575c:	20000c15 	stw	zero,48(r4)
    5760:	20000d15 	stw	zero,52(r4)
    5764:	20001115 	stw	zero,68(r4)
    5768:	20001215 	stw	zero,72(r4)
    576c:	2005883a 	mov	r2,r4
    5770:	dfc00217 	ldw	ra,8(sp)
    5774:	dc400117 	ldw	r17,4(sp)
    5778:	dc000017 	ldw	r16,0(sp)
    577c:	dec00304 	addi	sp,sp,12
    5780:	f800283a 	ret
    5784:	8009883a 	mov	r4,r16
    5788:	00055280 	call	5528 <__sinit>
    578c:	003fd706 	br	56ec <__sfp+0x28>
    5790:	8809883a 	mov	r4,r17
    5794:	01400104 	movi	r5,4
    5798:	00056280 	call	5628 <__sfmoreglue>
    579c:	80800015 	stw	r2,0(r16)
    57a0:	103fe21e 	bne	r2,zero,572c <__sfp+0x68>
    57a4:	00800304 	movi	r2,12
    57a8:	0009883a 	mov	r4,zero
    57ac:	88800015 	stw	r2,0(r17)
    57b0:	003fee06 	br	576c <__sfp+0xa8>

000057b4 <_malloc_trim_r>:
    57b4:	defffb04 	addi	sp,sp,-20
    57b8:	dcc00315 	stw	r19,12(sp)
    57bc:	04c00074 	movhi	r19,1
    57c0:	9cf81304 	addi	r19,r19,-8116
    57c4:	dc800215 	stw	r18,8(sp)
    57c8:	dc400115 	stw	r17,4(sp)
    57cc:	dc000015 	stw	r16,0(sp)
    57d0:	2823883a 	mov	r17,r5
    57d4:	2025883a 	mov	r18,r4
    57d8:	dfc00415 	stw	ra,16(sp)
    57dc:	000b6b80 	call	b6b8 <__malloc_lock>
    57e0:	98800217 	ldw	r2,8(r19)
    57e4:	9009883a 	mov	r4,r18
    57e8:	000b883a 	mov	r5,zero
    57ec:	10c00117 	ldw	r3,4(r2)
    57f0:	00bfff04 	movi	r2,-4
    57f4:	18a0703a 	and	r16,r3,r2
    57f8:	8463c83a 	sub	r17,r16,r17
    57fc:	8c43fbc4 	addi	r17,r17,4079
    5800:	8822d33a 	srli	r17,r17,12
    5804:	0083ffc4 	movi	r2,4095
    5808:	8c7fffc4 	addi	r17,r17,-1
    580c:	8822933a 	slli	r17,r17,12
    5810:	1440060e 	bge	r2,r17,582c <_malloc_trim_r+0x78>
    5814:	00017840 	call	1784 <_sbrk_r>
    5818:	98c00217 	ldw	r3,8(r19)
    581c:	9009883a 	mov	r4,r18
    5820:	044bc83a 	sub	r5,zero,r17
    5824:	80c7883a 	add	r3,r16,r3
    5828:	10c00926 	beq	r2,r3,5850 <_malloc_trim_r+0x9c>
    582c:	000b6d80 	call	b6d8 <__malloc_unlock>
    5830:	0005883a 	mov	r2,zero
    5834:	dfc00417 	ldw	ra,16(sp)
    5838:	dcc00317 	ldw	r19,12(sp)
    583c:	dc800217 	ldw	r18,8(sp)
    5840:	dc400117 	ldw	r17,4(sp)
    5844:	dc000017 	ldw	r16,0(sp)
    5848:	dec00504 	addi	sp,sp,20
    584c:	f800283a 	ret
    5850:	9009883a 	mov	r4,r18
    5854:	00017840 	call	1784 <_sbrk_r>
    5858:	844dc83a 	sub	r6,r16,r17
    585c:	00ffffc4 	movi	r3,-1
    5860:	9009883a 	mov	r4,r18
    5864:	000b883a 	mov	r5,zero
    5868:	01c00074 	movhi	r7,1
    586c:	39c45a04 	addi	r7,r7,4456
    5870:	31800054 	ori	r6,r6,1
    5874:	10c00926 	beq	r2,r3,589c <_malloc_trim_r+0xe8>
    5878:	38800017 	ldw	r2,0(r7)
    587c:	98c00217 	ldw	r3,8(r19)
    5880:	9009883a 	mov	r4,r18
    5884:	1445c83a 	sub	r2,r2,r17
    5888:	38800015 	stw	r2,0(r7)
    588c:	19800115 	stw	r6,4(r3)
    5890:	000b6d80 	call	b6d8 <__malloc_unlock>
    5894:	00800044 	movi	r2,1
    5898:	003fe606 	br	5834 <_malloc_trim_r+0x80>
    589c:	00017840 	call	1784 <_sbrk_r>
    58a0:	99800217 	ldw	r6,8(r19)
    58a4:	100f883a 	mov	r7,r2
    58a8:	9009883a 	mov	r4,r18
    58ac:	1187c83a 	sub	r3,r2,r6
    58b0:	008003c4 	movi	r2,15
    58b4:	19400054 	ori	r5,r3,1
    58b8:	10ffdc0e 	bge	r2,r3,582c <_malloc_trim_r+0x78>
    58bc:	00800074 	movhi	r2,1
    58c0:	10bd9d04 	addi	r2,r2,-2444
    58c4:	10c00017 	ldw	r3,0(r2)
    58c8:	00800074 	movhi	r2,1
    58cc:	10845a04 	addi	r2,r2,4456
    58d0:	31400115 	stw	r5,4(r6)
    58d4:	38c7c83a 	sub	r3,r7,r3
    58d8:	10c00015 	stw	r3,0(r2)
    58dc:	003fd306 	br	582c <_malloc_trim_r+0x78>

000058e0 <_free_r>:
    58e0:	defffd04 	addi	sp,sp,-12
    58e4:	dc400115 	stw	r17,4(sp)
    58e8:	dc000015 	stw	r16,0(sp)
    58ec:	dfc00215 	stw	ra,8(sp)
    58f0:	2821883a 	mov	r16,r5
    58f4:	2023883a 	mov	r17,r4
    58f8:	28005a26 	beq	r5,zero,5a64 <_free_r+0x184>
    58fc:	000b6b80 	call	b6b8 <__malloc_lock>
    5900:	823ffe04 	addi	r8,r16,-8
    5904:	41400117 	ldw	r5,4(r8)
    5908:	00bfff84 	movi	r2,-2
    590c:	02800074 	movhi	r10,1
    5910:	52b81304 	addi	r10,r10,-8116
    5914:	288e703a 	and	r7,r5,r2
    5918:	41cd883a 	add	r6,r8,r7
    591c:	30c00117 	ldw	r3,4(r6)
    5920:	51000217 	ldw	r4,8(r10)
    5924:	00bfff04 	movi	r2,-4
    5928:	1892703a 	and	r9,r3,r2
    592c:	5017883a 	mov	r11,r10
    5930:	31006726 	beq	r6,r4,5ad0 <_free_r+0x1f0>
    5934:	2880004c 	andi	r2,r5,1
    5938:	1005003a 	cmpeq	r2,r2,zero
    593c:	32400115 	stw	r9,4(r6)
    5940:	10001a1e 	bne	r2,zero,59ac <_free_r+0xcc>
    5944:	000b883a 	mov	r5,zero
    5948:	3247883a 	add	r3,r6,r9
    594c:	18800117 	ldw	r2,4(r3)
    5950:	1080004c 	andi	r2,r2,1
    5954:	1000231e 	bne	r2,zero,59e4 <_free_r+0x104>
    5958:	280ac03a 	cmpne	r5,r5,zero
    595c:	3a4f883a 	add	r7,r7,r9
    5960:	2800451e 	bne	r5,zero,5a78 <_free_r+0x198>
    5964:	31000217 	ldw	r4,8(r6)
    5968:	00800074 	movhi	r2,1
    596c:	10b81504 	addi	r2,r2,-8108
    5970:	20807b26 	beq	r4,r2,5b60 <_free_r+0x280>
    5974:	30800317 	ldw	r2,12(r6)
    5978:	3a07883a 	add	r3,r7,r8
    597c:	19c00015 	stw	r7,0(r3)
    5980:	11000215 	stw	r4,8(r2)
    5984:	20800315 	stw	r2,12(r4)
    5988:	38800054 	ori	r2,r7,1
    598c:	40800115 	stw	r2,4(r8)
    5990:	28001a26 	beq	r5,zero,59fc <_free_r+0x11c>
    5994:	8809883a 	mov	r4,r17
    5998:	dfc00217 	ldw	ra,8(sp)
    599c:	dc400117 	ldw	r17,4(sp)
    59a0:	dc000017 	ldw	r16,0(sp)
    59a4:	dec00304 	addi	sp,sp,12
    59a8:	000b6d81 	jmpi	b6d8 <__malloc_unlock>
    59ac:	80bffe17 	ldw	r2,-8(r16)
    59b0:	50c00204 	addi	r3,r10,8
    59b4:	4091c83a 	sub	r8,r8,r2
    59b8:	41000217 	ldw	r4,8(r8)
    59bc:	388f883a 	add	r7,r7,r2
    59c0:	20c06126 	beq	r4,r3,5b48 <_free_r+0x268>
    59c4:	40800317 	ldw	r2,12(r8)
    59c8:	3247883a 	add	r3,r6,r9
    59cc:	000b883a 	mov	r5,zero
    59d0:	11000215 	stw	r4,8(r2)
    59d4:	20800315 	stw	r2,12(r4)
    59d8:	18800117 	ldw	r2,4(r3)
    59dc:	1080004c 	andi	r2,r2,1
    59e0:	103fdd26 	beq	r2,zero,5958 <_free_r+0x78>
    59e4:	38800054 	ori	r2,r7,1
    59e8:	3a07883a 	add	r3,r7,r8
    59ec:	280ac03a 	cmpne	r5,r5,zero
    59f0:	40800115 	stw	r2,4(r8)
    59f4:	19c00015 	stw	r7,0(r3)
    59f8:	283fe61e 	bne	r5,zero,5994 <_free_r+0xb4>
    59fc:	00807fc4 	movi	r2,511
    5a00:	11c01f2e 	bgeu	r2,r7,5a80 <_free_r+0x1a0>
    5a04:	3806d27a 	srli	r3,r7,9
    5a08:	1800481e 	bne	r3,zero,5b2c <_free_r+0x24c>
    5a0c:	3804d0fa 	srli	r2,r7,3
    5a10:	100690fa 	slli	r3,r2,3
    5a14:	1acd883a 	add	r6,r3,r11
    5a18:	31400217 	ldw	r5,8(r6)
    5a1c:	31405926 	beq	r6,r5,5b84 <_free_r+0x2a4>
    5a20:	28800117 	ldw	r2,4(r5)
    5a24:	00ffff04 	movi	r3,-4
    5a28:	10c4703a 	and	r2,r2,r3
    5a2c:	3880022e 	bgeu	r7,r2,5a38 <_free_r+0x158>
    5a30:	29400217 	ldw	r5,8(r5)
    5a34:	317ffa1e 	bne	r6,r5,5a20 <_free_r+0x140>
    5a38:	29800317 	ldw	r6,12(r5)
    5a3c:	41800315 	stw	r6,12(r8)
    5a40:	41400215 	stw	r5,8(r8)
    5a44:	8809883a 	mov	r4,r17
    5a48:	2a000315 	stw	r8,12(r5)
    5a4c:	32000215 	stw	r8,8(r6)
    5a50:	dfc00217 	ldw	ra,8(sp)
    5a54:	dc400117 	ldw	r17,4(sp)
    5a58:	dc000017 	ldw	r16,0(sp)
    5a5c:	dec00304 	addi	sp,sp,12
    5a60:	000b6d81 	jmpi	b6d8 <__malloc_unlock>
    5a64:	dfc00217 	ldw	ra,8(sp)
    5a68:	dc400117 	ldw	r17,4(sp)
    5a6c:	dc000017 	ldw	r16,0(sp)
    5a70:	dec00304 	addi	sp,sp,12
    5a74:	f800283a 	ret
    5a78:	31000217 	ldw	r4,8(r6)
    5a7c:	003fbd06 	br	5974 <_free_r+0x94>
    5a80:	3806d0fa 	srli	r3,r7,3
    5a84:	00800044 	movi	r2,1
    5a88:	51400117 	ldw	r5,4(r10)
    5a8c:	180890fa 	slli	r4,r3,3
    5a90:	1807d0ba 	srai	r3,r3,2
    5a94:	22c9883a 	add	r4,r4,r11
    5a98:	21800217 	ldw	r6,8(r4)
    5a9c:	10c4983a 	sll	r2,r2,r3
    5aa0:	41000315 	stw	r4,12(r8)
    5aa4:	41800215 	stw	r6,8(r8)
    5aa8:	288ab03a 	or	r5,r5,r2
    5aac:	22000215 	stw	r8,8(r4)
    5ab0:	8809883a 	mov	r4,r17
    5ab4:	51400115 	stw	r5,4(r10)
    5ab8:	32000315 	stw	r8,12(r6)
    5abc:	dfc00217 	ldw	ra,8(sp)
    5ac0:	dc400117 	ldw	r17,4(sp)
    5ac4:	dc000017 	ldw	r16,0(sp)
    5ac8:	dec00304 	addi	sp,sp,12
    5acc:	000b6d81 	jmpi	b6d8 <__malloc_unlock>
    5ad0:	2880004c 	andi	r2,r5,1
    5ad4:	3a4d883a 	add	r6,r7,r9
    5ad8:	1000071e 	bne	r2,zero,5af8 <_free_r+0x218>
    5adc:	80bffe17 	ldw	r2,-8(r16)
    5ae0:	4091c83a 	sub	r8,r8,r2
    5ae4:	41000317 	ldw	r4,12(r8)
    5ae8:	40c00217 	ldw	r3,8(r8)
    5aec:	308d883a 	add	r6,r6,r2
    5af0:	20c00215 	stw	r3,8(r4)
    5af4:	19000315 	stw	r4,12(r3)
    5af8:	00800074 	movhi	r2,1
    5afc:	10bd9c04 	addi	r2,r2,-2448
    5b00:	11000017 	ldw	r4,0(r2)
    5b04:	30c00054 	ori	r3,r6,1
    5b08:	52000215 	stw	r8,8(r10)
    5b0c:	40c00115 	stw	r3,4(r8)
    5b10:	313fa036 	bltu	r6,r4,5994 <_free_r+0xb4>
    5b14:	00800074 	movhi	r2,1
    5b18:	10844704 	addi	r2,r2,4380
    5b1c:	11400017 	ldw	r5,0(r2)
    5b20:	8809883a 	mov	r4,r17
    5b24:	00057b40 	call	57b4 <_malloc_trim_r>
    5b28:	003f9a06 	br	5994 <_free_r+0xb4>
    5b2c:	00800104 	movi	r2,4
    5b30:	10c0072e 	bgeu	r2,r3,5b50 <_free_r+0x270>
    5b34:	00800504 	movi	r2,20
    5b38:	10c01936 	bltu	r2,r3,5ba0 <_free_r+0x2c0>
    5b3c:	188016c4 	addi	r2,r3,91
    5b40:	100690fa 	slli	r3,r2,3
    5b44:	003fb306 	br	5a14 <_free_r+0x134>
    5b48:	01400044 	movi	r5,1
    5b4c:	003f7e06 	br	5948 <_free_r+0x68>
    5b50:	3804d1ba 	srli	r2,r7,6
    5b54:	10800e04 	addi	r2,r2,56
    5b58:	100690fa 	slli	r3,r2,3
    5b5c:	003fad06 	br	5a14 <_free_r+0x134>
    5b60:	22000315 	stw	r8,12(r4)
    5b64:	22000215 	stw	r8,8(r4)
    5b68:	3a05883a 	add	r2,r7,r8
    5b6c:	38c00054 	ori	r3,r7,1
    5b70:	11c00015 	stw	r7,0(r2)
    5b74:	41000215 	stw	r4,8(r8)
    5b78:	40c00115 	stw	r3,4(r8)
    5b7c:	41000315 	stw	r4,12(r8)
    5b80:	003f8406 	br	5994 <_free_r+0xb4>
    5b84:	1005d0ba 	srai	r2,r2,2
    5b88:	00c00044 	movi	r3,1
    5b8c:	51000117 	ldw	r4,4(r10)
    5b90:	1886983a 	sll	r3,r3,r2
    5b94:	20c8b03a 	or	r4,r4,r3
    5b98:	51000115 	stw	r4,4(r10)
    5b9c:	003fa706 	br	5a3c <_free_r+0x15c>
    5ba0:	00801504 	movi	r2,84
    5ba4:	10c00436 	bltu	r2,r3,5bb8 <_free_r+0x2d8>
    5ba8:	3804d33a 	srli	r2,r7,12
    5bac:	10801b84 	addi	r2,r2,110
    5bb0:	100690fa 	slli	r3,r2,3
    5bb4:	003f9706 	br	5a14 <_free_r+0x134>
    5bb8:	00805504 	movi	r2,340
    5bbc:	10c00436 	bltu	r2,r3,5bd0 <_free_r+0x2f0>
    5bc0:	3804d3fa 	srli	r2,r7,15
    5bc4:	10801dc4 	addi	r2,r2,119
    5bc8:	100690fa 	slli	r3,r2,3
    5bcc:	003f9106 	br	5a14 <_free_r+0x134>
    5bd0:	00815504 	movi	r2,1364
    5bd4:	10c0032e 	bgeu	r2,r3,5be4 <_free_r+0x304>
    5bd8:	00801f84 	movi	r2,126
    5bdc:	00c0fc04 	movi	r3,1008
    5be0:	003f8c06 	br	5a14 <_free_r+0x134>
    5be4:	3804d4ba 	srli	r2,r7,18
    5be8:	10801f04 	addi	r2,r2,124
    5bec:	100690fa 	slli	r3,r2,3
    5bf0:	003f8806 	br	5a14 <_free_r+0x134>

00005bf4 <__sfvwrite_r>:
    5bf4:	30800217 	ldw	r2,8(r6)
    5bf8:	defff504 	addi	sp,sp,-44
    5bfc:	df000915 	stw	fp,36(sp)
    5c00:	dd800715 	stw	r22,28(sp)
    5c04:	dc800315 	stw	r18,12(sp)
    5c08:	dfc00a15 	stw	ra,40(sp)
    5c0c:	ddc00815 	stw	r23,32(sp)
    5c10:	dd400615 	stw	r21,24(sp)
    5c14:	dd000515 	stw	r20,20(sp)
    5c18:	dcc00415 	stw	r19,16(sp)
    5c1c:	dc400215 	stw	r17,8(sp)
    5c20:	dc000115 	stw	r16,4(sp)
    5c24:	302d883a 	mov	r22,r6
    5c28:	2039883a 	mov	fp,r4
    5c2c:	2825883a 	mov	r18,r5
    5c30:	10001c26 	beq	r2,zero,5ca4 <__sfvwrite_r+0xb0>
    5c34:	29c0030b 	ldhu	r7,12(r5)
    5c38:	3880020c 	andi	r2,r7,8
    5c3c:	10002726 	beq	r2,zero,5cdc <__sfvwrite_r+0xe8>
    5c40:	28800417 	ldw	r2,16(r5)
    5c44:	10002526 	beq	r2,zero,5cdc <__sfvwrite_r+0xe8>
    5c48:	3880008c 	andi	r2,r7,2
    5c4c:	b5400017 	ldw	r21,0(r22)
    5c50:	10002826 	beq	r2,zero,5cf4 <__sfvwrite_r+0x100>
    5c54:	0021883a 	mov	r16,zero
    5c58:	0023883a 	mov	r17,zero
    5c5c:	880d883a 	mov	r6,r17
    5c60:	e009883a 	mov	r4,fp
    5c64:	00810004 	movi	r2,1024
    5c68:	80006e26 	beq	r16,zero,5e24 <__sfvwrite_r+0x230>
    5c6c:	800f883a 	mov	r7,r16
    5c70:	91400717 	ldw	r5,28(r18)
    5c74:	1400012e 	bgeu	r2,r16,5c7c <__sfvwrite_r+0x88>
    5c78:	100f883a 	mov	r7,r2
    5c7c:	90c00917 	ldw	r3,36(r18)
    5c80:	183ee83a 	callr	r3
    5c84:	1007883a 	mov	r3,r2
    5c88:	80a1c83a 	sub	r16,r16,r2
    5c8c:	88a3883a 	add	r17,r17,r2
    5c90:	00806d0e 	bge	zero,r2,5e48 <__sfvwrite_r+0x254>
    5c94:	b0800217 	ldw	r2,8(r22)
    5c98:	10c5c83a 	sub	r2,r2,r3
    5c9c:	b0800215 	stw	r2,8(r22)
    5ca0:	103fee1e 	bne	r2,zero,5c5c <__sfvwrite_r+0x68>
    5ca4:	0009883a 	mov	r4,zero
    5ca8:	2005883a 	mov	r2,r4
    5cac:	dfc00a17 	ldw	ra,40(sp)
    5cb0:	df000917 	ldw	fp,36(sp)
    5cb4:	ddc00817 	ldw	r23,32(sp)
    5cb8:	dd800717 	ldw	r22,28(sp)
    5cbc:	dd400617 	ldw	r21,24(sp)
    5cc0:	dd000517 	ldw	r20,20(sp)
    5cc4:	dcc00417 	ldw	r19,16(sp)
    5cc8:	dc800317 	ldw	r18,12(sp)
    5ccc:	dc400217 	ldw	r17,8(sp)
    5cd0:	dc000117 	ldw	r16,4(sp)
    5cd4:	dec00b04 	addi	sp,sp,44
    5cd8:	f800283a 	ret
    5cdc:	00037a80 	call	37a8 <__swsetup_r>
    5ce0:	1000e41e 	bne	r2,zero,6074 <__sfvwrite_r+0x480>
    5ce4:	91c0030b 	ldhu	r7,12(r18)
    5ce8:	b5400017 	ldw	r21,0(r22)
    5cec:	3880008c 	andi	r2,r7,2
    5cf0:	103fd81e 	bne	r2,zero,5c54 <__sfvwrite_r+0x60>
    5cf4:	3880004c 	andi	r2,r7,1
    5cf8:	1005003a 	cmpeq	r2,r2,zero
    5cfc:	10005726 	beq	r2,zero,5e5c <__sfvwrite_r+0x268>
    5d00:	0029883a 	mov	r20,zero
    5d04:	002f883a 	mov	r23,zero
    5d08:	a0004226 	beq	r20,zero,5e14 <__sfvwrite_r+0x220>
    5d0c:	3880800c 	andi	r2,r7,512
    5d10:	94000217 	ldw	r16,8(r18)
    5d14:	10008b26 	beq	r2,zero,5f44 <__sfvwrite_r+0x350>
    5d18:	800d883a 	mov	r6,r16
    5d1c:	a400a536 	bltu	r20,r16,5fb4 <__sfvwrite_r+0x3c0>
    5d20:	3881200c 	andi	r2,r7,1152
    5d24:	10002726 	beq	r2,zero,5dc4 <__sfvwrite_r+0x1d0>
    5d28:	90800517 	ldw	r2,20(r18)
    5d2c:	92000417 	ldw	r8,16(r18)
    5d30:	91400017 	ldw	r5,0(r18)
    5d34:	1087883a 	add	r3,r2,r2
    5d38:	1887883a 	add	r3,r3,r2
    5d3c:	1808d7fa 	srli	r4,r3,31
    5d40:	2a21c83a 	sub	r16,r5,r8
    5d44:	80800044 	addi	r2,r16,1
    5d48:	20c9883a 	add	r4,r4,r3
    5d4c:	2027d07a 	srai	r19,r4,1
    5d50:	a085883a 	add	r2,r20,r2
    5d54:	980d883a 	mov	r6,r19
    5d58:	9880022e 	bgeu	r19,r2,5d64 <__sfvwrite_r+0x170>
    5d5c:	1027883a 	mov	r19,r2
    5d60:	100d883a 	mov	r6,r2
    5d64:	3881000c 	andi	r2,r7,1024
    5d68:	1000b826 	beq	r2,zero,604c <__sfvwrite_r+0x458>
    5d6c:	300b883a 	mov	r5,r6
    5d70:	e009883a 	mov	r4,fp
    5d74:	0000ef40 	call	ef4 <_malloc_r>
    5d78:	10003126 	beq	r2,zero,5e40 <__sfvwrite_r+0x24c>
    5d7c:	91400417 	ldw	r5,16(r18)
    5d80:	1009883a 	mov	r4,r2
    5d84:	800d883a 	mov	r6,r16
    5d88:	1023883a 	mov	r17,r2
    5d8c:	000654c0 	call	654c <memcpy>
    5d90:	90c0030b 	ldhu	r3,12(r18)
    5d94:	00beffc4 	movi	r2,-1025
    5d98:	1886703a 	and	r3,r3,r2
    5d9c:	18c02014 	ori	r3,r3,128
    5da0:	90c0030d 	sth	r3,12(r18)
    5da4:	9c07c83a 	sub	r3,r19,r16
    5da8:	8c05883a 	add	r2,r17,r16
    5dac:	a00d883a 	mov	r6,r20
    5db0:	a021883a 	mov	r16,r20
    5db4:	90800015 	stw	r2,0(r18)
    5db8:	90c00215 	stw	r3,8(r18)
    5dbc:	94400415 	stw	r17,16(r18)
    5dc0:	94c00515 	stw	r19,20(r18)
    5dc4:	91000017 	ldw	r4,0(r18)
    5dc8:	b80b883a 	mov	r5,r23
    5dcc:	a023883a 	mov	r17,r20
    5dd0:	00065ec0 	call	65ec <memmove>
    5dd4:	90c00217 	ldw	r3,8(r18)
    5dd8:	90800017 	ldw	r2,0(r18)
    5ddc:	a027883a 	mov	r19,r20
    5de0:	1c07c83a 	sub	r3,r3,r16
    5de4:	1405883a 	add	r2,r2,r16
    5de8:	90c00215 	stw	r3,8(r18)
    5dec:	a021883a 	mov	r16,r20
    5df0:	90800015 	stw	r2,0(r18)
    5df4:	b0800217 	ldw	r2,8(r22)
    5df8:	1405c83a 	sub	r2,r2,r16
    5dfc:	b0800215 	stw	r2,8(r22)
    5e00:	103fa826 	beq	r2,zero,5ca4 <__sfvwrite_r+0xb0>
    5e04:	a469c83a 	sub	r20,r20,r17
    5e08:	91c0030b 	ldhu	r7,12(r18)
    5e0c:	bcef883a 	add	r23,r23,r19
    5e10:	a03fbe1e 	bne	r20,zero,5d0c <__sfvwrite_r+0x118>
    5e14:	adc00017 	ldw	r23,0(r21)
    5e18:	ad000117 	ldw	r20,4(r21)
    5e1c:	ad400204 	addi	r21,r21,8
    5e20:	003fb906 	br	5d08 <__sfvwrite_r+0x114>
    5e24:	ac400017 	ldw	r17,0(r21)
    5e28:	ac000117 	ldw	r16,4(r21)
    5e2c:	ad400204 	addi	r21,r21,8
    5e30:	003f8a06 	br	5c5c <__sfvwrite_r+0x68>
    5e34:	91400417 	ldw	r5,16(r18)
    5e38:	e009883a 	mov	r4,fp
    5e3c:	00058e00 	call	58e0 <_free_r>
    5e40:	00800304 	movi	r2,12
    5e44:	e0800015 	stw	r2,0(fp)
    5e48:	9080030b 	ldhu	r2,12(r18)
    5e4c:	013fffc4 	movi	r4,-1
    5e50:	10801014 	ori	r2,r2,64
    5e54:	9080030d 	sth	r2,12(r18)
    5e58:	003f9306 	br	5ca8 <__sfvwrite_r+0xb4>
    5e5c:	0027883a 	mov	r19,zero
    5e60:	002f883a 	mov	r23,zero
    5e64:	d8000015 	stw	zero,0(sp)
    5e68:	0029883a 	mov	r20,zero
    5e6c:	98001e26 	beq	r19,zero,5ee8 <__sfvwrite_r+0x2f4>
    5e70:	d8c00017 	ldw	r3,0(sp)
    5e74:	1804c03a 	cmpne	r2,r3,zero
    5e78:	10005e26 	beq	r2,zero,5ff4 <__sfvwrite_r+0x400>
    5e7c:	9821883a 	mov	r16,r19
    5e80:	a4c0012e 	bgeu	r20,r19,5e88 <__sfvwrite_r+0x294>
    5e84:	a021883a 	mov	r16,r20
    5e88:	91000017 	ldw	r4,0(r18)
    5e8c:	90800417 	ldw	r2,16(r18)
    5e90:	91800217 	ldw	r6,8(r18)
    5e94:	91c00517 	ldw	r7,20(r18)
    5e98:	1100022e 	bgeu	r2,r4,5ea4 <__sfvwrite_r+0x2b0>
    5e9c:	31e3883a 	add	r17,r6,r7
    5ea0:	8c001616 	blt	r17,r16,5efc <__sfvwrite_r+0x308>
    5ea4:	81c03816 	blt	r16,r7,5f88 <__sfvwrite_r+0x394>
    5ea8:	90c00917 	ldw	r3,36(r18)
    5eac:	91400717 	ldw	r5,28(r18)
    5eb0:	e009883a 	mov	r4,fp
    5eb4:	b80d883a 	mov	r6,r23
    5eb8:	183ee83a 	callr	r3
    5ebc:	1023883a 	mov	r17,r2
    5ec0:	00bfe10e 	bge	zero,r2,5e48 <__sfvwrite_r+0x254>
    5ec4:	a469c83a 	sub	r20,r20,r17
    5ec8:	a0001826 	beq	r20,zero,5f2c <__sfvwrite_r+0x338>
    5ecc:	b0800217 	ldw	r2,8(r22)
    5ed0:	1445c83a 	sub	r2,r2,r17
    5ed4:	b0800215 	stw	r2,8(r22)
    5ed8:	103f7226 	beq	r2,zero,5ca4 <__sfvwrite_r+0xb0>
    5edc:	9c67c83a 	sub	r19,r19,r17
    5ee0:	bc6f883a 	add	r23,r23,r17
    5ee4:	983fe21e 	bne	r19,zero,5e70 <__sfvwrite_r+0x27c>
    5ee8:	adc00017 	ldw	r23,0(r21)
    5eec:	acc00117 	ldw	r19,4(r21)
    5ef0:	ad400204 	addi	r21,r21,8
    5ef4:	d8000015 	stw	zero,0(sp)
    5ef8:	003fdc06 	br	5e6c <__sfvwrite_r+0x278>
    5efc:	b80b883a 	mov	r5,r23
    5f00:	880d883a 	mov	r6,r17
    5f04:	00065ec0 	call	65ec <memmove>
    5f08:	90c00017 	ldw	r3,0(r18)
    5f0c:	e009883a 	mov	r4,fp
    5f10:	900b883a 	mov	r5,r18
    5f14:	1c47883a 	add	r3,r3,r17
    5f18:	90c00015 	stw	r3,0(r18)
    5f1c:	00052900 	call	5290 <_fflush_r>
    5f20:	103fc91e 	bne	r2,zero,5e48 <__sfvwrite_r+0x254>
    5f24:	a469c83a 	sub	r20,r20,r17
    5f28:	a03fe81e 	bne	r20,zero,5ecc <__sfvwrite_r+0x2d8>
    5f2c:	e009883a 	mov	r4,fp
    5f30:	900b883a 	mov	r5,r18
    5f34:	00052900 	call	5290 <_fflush_r>
    5f38:	103fc31e 	bne	r2,zero,5e48 <__sfvwrite_r+0x254>
    5f3c:	d8000015 	stw	zero,0(sp)
    5f40:	003fe206 	br	5ecc <__sfvwrite_r+0x2d8>
    5f44:	91000017 	ldw	r4,0(r18)
    5f48:	90800417 	ldw	r2,16(r18)
    5f4c:	1100022e 	bgeu	r2,r4,5f58 <__sfvwrite_r+0x364>
    5f50:	8023883a 	mov	r17,r16
    5f54:	85003136 	bltu	r16,r20,601c <__sfvwrite_r+0x428>
    5f58:	91c00517 	ldw	r7,20(r18)
    5f5c:	a1c01836 	bltu	r20,r7,5fc0 <__sfvwrite_r+0x3cc>
    5f60:	90c00917 	ldw	r3,36(r18)
    5f64:	91400717 	ldw	r5,28(r18)
    5f68:	e009883a 	mov	r4,fp
    5f6c:	b80d883a 	mov	r6,r23
    5f70:	183ee83a 	callr	r3
    5f74:	1021883a 	mov	r16,r2
    5f78:	00bfb30e 	bge	zero,r2,5e48 <__sfvwrite_r+0x254>
    5f7c:	1023883a 	mov	r17,r2
    5f80:	1027883a 	mov	r19,r2
    5f84:	003f9b06 	br	5df4 <__sfvwrite_r+0x200>
    5f88:	b80b883a 	mov	r5,r23
    5f8c:	800d883a 	mov	r6,r16
    5f90:	00065ec0 	call	65ec <memmove>
    5f94:	90c00217 	ldw	r3,8(r18)
    5f98:	90800017 	ldw	r2,0(r18)
    5f9c:	8023883a 	mov	r17,r16
    5fa0:	1c07c83a 	sub	r3,r3,r16
    5fa4:	1405883a 	add	r2,r2,r16
    5fa8:	90c00215 	stw	r3,8(r18)
    5fac:	90800015 	stw	r2,0(r18)
    5fb0:	003fc406 	br	5ec4 <__sfvwrite_r+0x2d0>
    5fb4:	a00d883a 	mov	r6,r20
    5fb8:	a021883a 	mov	r16,r20
    5fbc:	003f8106 	br	5dc4 <__sfvwrite_r+0x1d0>
    5fc0:	b80b883a 	mov	r5,r23
    5fc4:	a00d883a 	mov	r6,r20
    5fc8:	00065ec0 	call	65ec <memmove>
    5fcc:	90c00217 	ldw	r3,8(r18)
    5fd0:	90800017 	ldw	r2,0(r18)
    5fd4:	a021883a 	mov	r16,r20
    5fd8:	1d07c83a 	sub	r3,r3,r20
    5fdc:	1505883a 	add	r2,r2,r20
    5fe0:	a023883a 	mov	r17,r20
    5fe4:	a027883a 	mov	r19,r20
    5fe8:	90c00215 	stw	r3,8(r18)
    5fec:	90800015 	stw	r2,0(r18)
    5ff0:	003f8006 	br	5df4 <__sfvwrite_r+0x200>
    5ff4:	b809883a 	mov	r4,r23
    5ff8:	01400284 	movi	r5,10
    5ffc:	980d883a 	mov	r6,r19
    6000:	00064680 	call	6468 <memchr>
    6004:	10001726 	beq	r2,zero,6064 <__sfvwrite_r+0x470>
    6008:	15c5c83a 	sub	r2,r2,r23
    600c:	15000044 	addi	r20,r2,1
    6010:	00800044 	movi	r2,1
    6014:	d8800015 	stw	r2,0(sp)
    6018:	003f9806 	br	5e7c <__sfvwrite_r+0x288>
    601c:	b80b883a 	mov	r5,r23
    6020:	800d883a 	mov	r6,r16
    6024:	00065ec0 	call	65ec <memmove>
    6028:	90c00017 	ldw	r3,0(r18)
    602c:	e009883a 	mov	r4,fp
    6030:	900b883a 	mov	r5,r18
    6034:	1c07883a 	add	r3,r3,r16
    6038:	90c00015 	stw	r3,0(r18)
    603c:	8027883a 	mov	r19,r16
    6040:	00052900 	call	5290 <_fflush_r>
    6044:	103f6b26 	beq	r2,zero,5df4 <__sfvwrite_r+0x200>
    6048:	003f7f06 	br	5e48 <__sfvwrite_r+0x254>
    604c:	400b883a 	mov	r5,r8
    6050:	e009883a 	mov	r4,fp
    6054:	00079dc0 	call	79dc <_realloc_r>
    6058:	103f7626 	beq	r2,zero,5e34 <__sfvwrite_r+0x240>
    605c:	1023883a 	mov	r17,r2
    6060:	003f5006 	br	5da4 <__sfvwrite_r+0x1b0>
    6064:	00c00044 	movi	r3,1
    6068:	9d000044 	addi	r20,r19,1
    606c:	d8c00015 	stw	r3,0(sp)
    6070:	003f8206 	br	5e7c <__sfvwrite_r+0x288>
    6074:	9080030b 	ldhu	r2,12(r18)
    6078:	00c00244 	movi	r3,9
    607c:	013fffc4 	movi	r4,-1
    6080:	10801014 	ori	r2,r2,64
    6084:	9080030d 	sth	r2,12(r18)
    6088:	e0c00015 	stw	r3,0(fp)
    608c:	003f0606 	br	5ca8 <__sfvwrite_r+0xb4>

00006090 <_fwalk_reent>:
    6090:	defff704 	addi	sp,sp,-36
    6094:	dcc00315 	stw	r19,12(sp)
    6098:	24c0b804 	addi	r19,r4,736
    609c:	dd800615 	stw	r22,24(sp)
    60a0:	dd400515 	stw	r21,20(sp)
    60a4:	dfc00815 	stw	ra,32(sp)
    60a8:	ddc00715 	stw	r23,28(sp)
    60ac:	dd000415 	stw	r20,16(sp)
    60b0:	dc800215 	stw	r18,8(sp)
    60b4:	dc400115 	stw	r17,4(sp)
    60b8:	dc000015 	stw	r16,0(sp)
    60bc:	202b883a 	mov	r21,r4
    60c0:	282d883a 	mov	r22,r5
    60c4:	00055180 	call	5518 <__sfp_lock_acquire>
    60c8:	98002126 	beq	r19,zero,6150 <_fwalk_reent+0xc0>
    60cc:	002f883a 	mov	r23,zero
    60d0:	9c800117 	ldw	r18,4(r19)
    60d4:	9c000217 	ldw	r16,8(r19)
    60d8:	90bfffc4 	addi	r2,r18,-1
    60dc:	10000d16 	blt	r2,zero,6114 <_fwalk_reent+0x84>
    60e0:	0023883a 	mov	r17,zero
    60e4:	053fffc4 	movi	r20,-1
    60e8:	8080030f 	ldh	r2,12(r16)
    60ec:	8c400044 	addi	r17,r17,1
    60f0:	10000626 	beq	r2,zero,610c <_fwalk_reent+0x7c>
    60f4:	8080038f 	ldh	r2,14(r16)
    60f8:	800b883a 	mov	r5,r16
    60fc:	a809883a 	mov	r4,r21
    6100:	15000226 	beq	r2,r20,610c <_fwalk_reent+0x7c>
    6104:	b03ee83a 	callr	r22
    6108:	b8aeb03a 	or	r23,r23,r2
    610c:	84001704 	addi	r16,r16,92
    6110:	947ff51e 	bne	r18,r17,60e8 <_fwalk_reent+0x58>
    6114:	9cc00017 	ldw	r19,0(r19)
    6118:	983fed1e 	bne	r19,zero,60d0 <_fwalk_reent+0x40>
    611c:	000551c0 	call	551c <__sfp_lock_release>
    6120:	b805883a 	mov	r2,r23
    6124:	dfc00817 	ldw	ra,32(sp)
    6128:	ddc00717 	ldw	r23,28(sp)
    612c:	dd800617 	ldw	r22,24(sp)
    6130:	dd400517 	ldw	r21,20(sp)
    6134:	dd000417 	ldw	r20,16(sp)
    6138:	dcc00317 	ldw	r19,12(sp)
    613c:	dc800217 	ldw	r18,8(sp)
    6140:	dc400117 	ldw	r17,4(sp)
    6144:	dc000017 	ldw	r16,0(sp)
    6148:	dec00904 	addi	sp,sp,36
    614c:	f800283a 	ret
    6150:	002f883a 	mov	r23,zero
    6154:	003ff106 	br	611c <_fwalk_reent+0x8c>

00006158 <_fwalk>:
    6158:	defff804 	addi	sp,sp,-32
    615c:	dcc00315 	stw	r19,12(sp)
    6160:	24c0b804 	addi	r19,r4,736
    6164:	dd400515 	stw	r21,20(sp)
    6168:	dfc00715 	stw	ra,28(sp)
    616c:	dd800615 	stw	r22,24(sp)
    6170:	dd000415 	stw	r20,16(sp)
    6174:	dc800215 	stw	r18,8(sp)
    6178:	dc400115 	stw	r17,4(sp)
    617c:	dc000015 	stw	r16,0(sp)
    6180:	282b883a 	mov	r21,r5
    6184:	00055180 	call	5518 <__sfp_lock_acquire>
    6188:	98001f26 	beq	r19,zero,6208 <_fwalk+0xb0>
    618c:	002d883a 	mov	r22,zero
    6190:	9c800117 	ldw	r18,4(r19)
    6194:	9c000217 	ldw	r16,8(r19)
    6198:	90bfffc4 	addi	r2,r18,-1
    619c:	10000c16 	blt	r2,zero,61d0 <_fwalk+0x78>
    61a0:	0023883a 	mov	r17,zero
    61a4:	053fffc4 	movi	r20,-1
    61a8:	8080030f 	ldh	r2,12(r16)
    61ac:	8c400044 	addi	r17,r17,1
    61b0:	10000526 	beq	r2,zero,61c8 <_fwalk+0x70>
    61b4:	8080038f 	ldh	r2,14(r16)
    61b8:	8009883a 	mov	r4,r16
    61bc:	15000226 	beq	r2,r20,61c8 <_fwalk+0x70>
    61c0:	a83ee83a 	callr	r21
    61c4:	b0acb03a 	or	r22,r22,r2
    61c8:	84001704 	addi	r16,r16,92
    61cc:	947ff61e 	bne	r18,r17,61a8 <_fwalk+0x50>
    61d0:	9cc00017 	ldw	r19,0(r19)
    61d4:	983fee1e 	bne	r19,zero,6190 <_fwalk+0x38>
    61d8:	000551c0 	call	551c <__sfp_lock_release>
    61dc:	b005883a 	mov	r2,r22
    61e0:	dfc00717 	ldw	ra,28(sp)
    61e4:	dd800617 	ldw	r22,24(sp)
    61e8:	dd400517 	ldw	r21,20(sp)
    61ec:	dd000417 	ldw	r20,16(sp)
    61f0:	dcc00317 	ldw	r19,12(sp)
    61f4:	dc800217 	ldw	r18,8(sp)
    61f8:	dc400117 	ldw	r17,4(sp)
    61fc:	dc000017 	ldw	r16,0(sp)
    6200:	dec00804 	addi	sp,sp,32
    6204:	f800283a 	ret
    6208:	002d883a 	mov	r22,zero
    620c:	003ff206 	br	61d8 <_fwalk+0x80>

00006210 <__locale_charset>:
    6210:	d0a00517 	ldw	r2,-32748(gp)
    6214:	f800283a 	ret

00006218 <_localeconv_r>:
    6218:	00800074 	movhi	r2,1
    621c:	10b66e04 	addi	r2,r2,-9800
    6220:	f800283a 	ret

00006224 <localeconv>:
    6224:	00800074 	movhi	r2,1
    6228:	10bd9a04 	addi	r2,r2,-2456
    622c:	11000017 	ldw	r4,0(r2)
    6230:	00062181 	jmpi	6218 <_localeconv_r>

00006234 <_setlocale_r>:
    6234:	defffc04 	addi	sp,sp,-16
    6238:	00c00074 	movhi	r3,1
    623c:	18f64404 	addi	r3,r3,-9968
    6240:	dc800215 	stw	r18,8(sp)
    6244:	dc400115 	stw	r17,4(sp)
    6248:	dc000015 	stw	r16,0(sp)
    624c:	2023883a 	mov	r17,r4
    6250:	2825883a 	mov	r18,r5
    6254:	dfc00315 	stw	ra,12(sp)
    6258:	3021883a 	mov	r16,r6
    625c:	3009883a 	mov	r4,r6
    6260:	180b883a 	mov	r5,r3
    6264:	30000926 	beq	r6,zero,628c <_setlocale_r+0x58>
    6268:	000818c0 	call	818c <strcmp>
    626c:	8009883a 	mov	r4,r16
    6270:	01400074 	movhi	r5,1
    6274:	29765504 	addi	r5,r5,-9900
    6278:	10000b1e 	bne	r2,zero,62a8 <_setlocale_r+0x74>
    627c:	8c000d15 	stw	r16,52(r17)
    6280:	8c800c15 	stw	r18,48(r17)
    6284:	00c00074 	movhi	r3,1
    6288:	18f64404 	addi	r3,r3,-9968
    628c:	1805883a 	mov	r2,r3
    6290:	dfc00317 	ldw	ra,12(sp)
    6294:	dc800217 	ldw	r18,8(sp)
    6298:	dc400117 	ldw	r17,4(sp)
    629c:	dc000017 	ldw	r16,0(sp)
    62a0:	dec00404 	addi	sp,sp,16
    62a4:	f800283a 	ret
    62a8:	000818c0 	call	818c <strcmp>
    62ac:	0007883a 	mov	r3,zero
    62b0:	103ff226 	beq	r2,zero,627c <_setlocale_r+0x48>
    62b4:	003ff506 	br	628c <_setlocale_r+0x58>

000062b8 <setlocale>:
    62b8:	01800074 	movhi	r6,1
    62bc:	31bd9a04 	addi	r6,r6,-2456
    62c0:	2007883a 	mov	r3,r4
    62c4:	31000017 	ldw	r4,0(r6)
    62c8:	280d883a 	mov	r6,r5
    62cc:	180b883a 	mov	r5,r3
    62d0:	00062341 	jmpi	6234 <_setlocale_r>

000062d4 <__smakebuf_r>:
    62d4:	2880030b 	ldhu	r2,12(r5)
    62d8:	deffed04 	addi	sp,sp,-76
    62dc:	dc401015 	stw	r17,64(sp)
    62e0:	1080008c 	andi	r2,r2,2
    62e4:	dc000f15 	stw	r16,60(sp)
    62e8:	dfc01215 	stw	ra,72(sp)
    62ec:	dc801115 	stw	r18,68(sp)
    62f0:	2821883a 	mov	r16,r5
    62f4:	2023883a 	mov	r17,r4
    62f8:	10000b26 	beq	r2,zero,6328 <__smakebuf_r+0x54>
    62fc:	28c010c4 	addi	r3,r5,67
    6300:	00800044 	movi	r2,1
    6304:	28800515 	stw	r2,20(r5)
    6308:	28c00415 	stw	r3,16(r5)
    630c:	28c00015 	stw	r3,0(r5)
    6310:	dfc01217 	ldw	ra,72(sp)
    6314:	dc801117 	ldw	r18,68(sp)
    6318:	dc401017 	ldw	r17,64(sp)
    631c:	dc000f17 	ldw	r16,60(sp)
    6320:	dec01304 	addi	sp,sp,76
    6324:	f800283a 	ret
    6328:	2940038f 	ldh	r5,14(r5)
    632c:	28002116 	blt	r5,zero,63b4 <__smakebuf_r+0xe0>
    6330:	d80d883a 	mov	r6,sp
    6334:	00086680 	call	8668 <_fstat_r>
    6338:	10001e16 	blt	r2,zero,63b4 <__smakebuf_r+0xe0>
    633c:	d8800117 	ldw	r2,4(sp)
    6340:	00e00014 	movui	r3,32768
    6344:	113c000c 	andi	r4,r2,61440
    6348:	20c03126 	beq	r4,r3,6410 <__smakebuf_r+0x13c>
    634c:	8080030b 	ldhu	r2,12(r16)
    6350:	00c80004 	movi	r3,8192
    6354:	10820014 	ori	r2,r2,2048
    6358:	8080030d 	sth	r2,12(r16)
    635c:	20c01e26 	beq	r4,r3,63d8 <__smakebuf_r+0x104>
    6360:	04810004 	movi	r18,1024
    6364:	8809883a 	mov	r4,r17
    6368:	900b883a 	mov	r5,r18
    636c:	0000ef40 	call	ef4 <_malloc_r>
    6370:	1009883a 	mov	r4,r2
    6374:	10003126 	beq	r2,zero,643c <__smakebuf_r+0x168>
    6378:	80c0030b 	ldhu	r3,12(r16)
    637c:	00800034 	movhi	r2,0
    6380:	10958304 	addi	r2,r2,22028
    6384:	88800f15 	stw	r2,60(r17)
    6388:	18c02014 	ori	r3,r3,128
    638c:	84800515 	stw	r18,20(r16)
    6390:	80c0030d 	sth	r3,12(r16)
    6394:	81000415 	stw	r4,16(r16)
    6398:	81000015 	stw	r4,0(r16)
    639c:	dfc01217 	ldw	ra,72(sp)
    63a0:	dc801117 	ldw	r18,68(sp)
    63a4:	dc401017 	ldw	r17,64(sp)
    63a8:	dc000f17 	ldw	r16,60(sp)
    63ac:	dec01304 	addi	sp,sp,76
    63b0:	f800283a 	ret
    63b4:	80c0030b 	ldhu	r3,12(r16)
    63b8:	1880200c 	andi	r2,r3,128
    63bc:	10000426 	beq	r2,zero,63d0 <__smakebuf_r+0xfc>
    63c0:	04801004 	movi	r18,64
    63c4:	18820014 	ori	r2,r3,2048
    63c8:	8080030d 	sth	r2,12(r16)
    63cc:	003fe506 	br	6364 <__smakebuf_r+0x90>
    63d0:	04810004 	movi	r18,1024
    63d4:	003ffb06 	br	63c4 <__smakebuf_r+0xf0>
    63d8:	8140038f 	ldh	r5,14(r16)
    63dc:	8809883a 	mov	r4,r17
    63e0:	00086dc0 	call	86dc <_isatty_r>
    63e4:	103fde26 	beq	r2,zero,6360 <__smakebuf_r+0x8c>
    63e8:	8080030b 	ldhu	r2,12(r16)
    63ec:	80c010c4 	addi	r3,r16,67
    63f0:	04810004 	movi	r18,1024
    63f4:	10800054 	ori	r2,r2,1
    63f8:	8080030d 	sth	r2,12(r16)
    63fc:	00800044 	movi	r2,1
    6400:	80c00415 	stw	r3,16(r16)
    6404:	80800515 	stw	r2,20(r16)
    6408:	80c00015 	stw	r3,0(r16)
    640c:	003fd506 	br	6364 <__smakebuf_r+0x90>
    6410:	80c00a17 	ldw	r3,40(r16)
    6414:	00800074 	movhi	r2,1
    6418:	10a01204 	addi	r2,r2,-32696
    641c:	18bfcb1e 	bne	r3,r2,634c <__smakebuf_r+0x78>
    6420:	8080030b 	ldhu	r2,12(r16)
    6424:	00c10004 	movi	r3,1024
    6428:	1825883a 	mov	r18,r3
    642c:	10c4b03a 	or	r2,r2,r3
    6430:	8080030d 	sth	r2,12(r16)
    6434:	80c01315 	stw	r3,76(r16)
    6438:	003fca06 	br	6364 <__smakebuf_r+0x90>
    643c:	8100030b 	ldhu	r4,12(r16)
    6440:	2080800c 	andi	r2,r4,512
    6444:	103fb21e 	bne	r2,zero,6310 <__smakebuf_r+0x3c>
    6448:	80c010c4 	addi	r3,r16,67
    644c:	21000094 	ori	r4,r4,2
    6450:	00800044 	movi	r2,1
    6454:	80800515 	stw	r2,20(r16)
    6458:	8100030d 	sth	r4,12(r16)
    645c:	80c00415 	stw	r3,16(r16)
    6460:	80c00015 	stw	r3,0(r16)
    6464:	003faa06 	br	6310 <__smakebuf_r+0x3c>

00006468 <memchr>:
    6468:	008000c4 	movi	r2,3
    646c:	29403fcc 	andi	r5,r5,255
    6470:	2007883a 	mov	r3,r4
    6474:	1180022e 	bgeu	r2,r6,6480 <memchr+0x18>
    6478:	2084703a 	and	r2,r4,r2
    647c:	10000b26 	beq	r2,zero,64ac <memchr+0x44>
    6480:	313fffc4 	addi	r4,r6,-1
    6484:	3000051e 	bne	r6,zero,649c <memchr+0x34>
    6488:	00002c06 	br	653c <memchr+0xd4>
    648c:	213fffc4 	addi	r4,r4,-1
    6490:	00bfffc4 	movi	r2,-1
    6494:	18c00044 	addi	r3,r3,1
    6498:	20802826 	beq	r4,r2,653c <memchr+0xd4>
    649c:	18800003 	ldbu	r2,0(r3)
    64a0:	28bffa1e 	bne	r5,r2,648c <memchr+0x24>
    64a4:	1805883a 	mov	r2,r3
    64a8:	f800283a 	ret
    64ac:	0011883a 	mov	r8,zero
    64b0:	0007883a 	mov	r3,zero
    64b4:	01c00104 	movi	r7,4
    64b8:	4004923a 	slli	r2,r8,8
    64bc:	18c00044 	addi	r3,r3,1
    64c0:	1151883a 	add	r8,r2,r5
    64c4:	19fffc1e 	bne	r3,r7,64b8 <memchr+0x50>
    64c8:	02bfbff4 	movhi	r10,65279
    64cc:	52bfbfc4 	addi	r10,r10,-257
    64d0:	02602074 	movhi	r9,32897
    64d4:	4a602004 	addi	r9,r9,-32640
    64d8:	02c000c4 	movi	r11,3
    64dc:	20800017 	ldw	r2,0(r4)
    64e0:	31bfff04 	addi	r6,r6,-4
    64e4:	200f883a 	mov	r7,r4
    64e8:	1204f03a 	xor	r2,r2,r8
    64ec:	1287883a 	add	r3,r2,r10
    64f0:	1a46703a 	and	r3,r3,r9
    64f4:	0084303a 	nor	r2,zero,r2
    64f8:	10c4703a 	and	r2,r2,r3
    64fc:	10000b26 	beq	r2,zero,652c <memchr+0xc4>
    6500:	20800003 	ldbu	r2,0(r4)
    6504:	28800f26 	beq	r5,r2,6544 <memchr+0xdc>
    6508:	20800043 	ldbu	r2,1(r4)
    650c:	21c00044 	addi	r7,r4,1
    6510:	28800c26 	beq	r5,r2,6544 <memchr+0xdc>
    6514:	20800083 	ldbu	r2,2(r4)
    6518:	21c00084 	addi	r7,r4,2
    651c:	28800926 	beq	r5,r2,6544 <memchr+0xdc>
    6520:	208000c3 	ldbu	r2,3(r4)
    6524:	21c000c4 	addi	r7,r4,3
    6528:	28800626 	beq	r5,r2,6544 <memchr+0xdc>
    652c:	21000104 	addi	r4,r4,4
    6530:	59bfea36 	bltu	r11,r6,64dc <memchr+0x74>
    6534:	2007883a 	mov	r3,r4
    6538:	003fd106 	br	6480 <memchr+0x18>
    653c:	0005883a 	mov	r2,zero
    6540:	f800283a 	ret
    6544:	3805883a 	mov	r2,r7
    6548:	f800283a 	ret

0000654c <memcpy>:
    654c:	01c003c4 	movi	r7,15
    6550:	2007883a 	mov	r3,r4
    6554:	3980032e 	bgeu	r7,r6,6564 <memcpy+0x18>
    6558:	2904b03a 	or	r2,r5,r4
    655c:	108000cc 	andi	r2,r2,3
    6560:	10000926 	beq	r2,zero,6588 <memcpy+0x3c>
    6564:	30000626 	beq	r6,zero,6580 <memcpy+0x34>
    6568:	30cd883a 	add	r6,r6,r3
    656c:	28800003 	ldbu	r2,0(r5)
    6570:	29400044 	addi	r5,r5,1
    6574:	18800005 	stb	r2,0(r3)
    6578:	18c00044 	addi	r3,r3,1
    657c:	30fffb1e 	bne	r6,r3,656c <memcpy+0x20>
    6580:	2005883a 	mov	r2,r4
    6584:	f800283a 	ret
    6588:	3811883a 	mov	r8,r7
    658c:	200f883a 	mov	r7,r4
    6590:	28c00017 	ldw	r3,0(r5)
    6594:	31bffc04 	addi	r6,r6,-16
    6598:	38c00015 	stw	r3,0(r7)
    659c:	28800117 	ldw	r2,4(r5)
    65a0:	38800115 	stw	r2,4(r7)
    65a4:	28c00217 	ldw	r3,8(r5)
    65a8:	38c00215 	stw	r3,8(r7)
    65ac:	28800317 	ldw	r2,12(r5)
    65b0:	29400404 	addi	r5,r5,16
    65b4:	38800315 	stw	r2,12(r7)
    65b8:	39c00404 	addi	r7,r7,16
    65bc:	41bff436 	bltu	r8,r6,6590 <memcpy+0x44>
    65c0:	008000c4 	movi	r2,3
    65c4:	1180072e 	bgeu	r2,r6,65e4 <memcpy+0x98>
    65c8:	1007883a 	mov	r3,r2
    65cc:	28800017 	ldw	r2,0(r5)
    65d0:	31bfff04 	addi	r6,r6,-4
    65d4:	29400104 	addi	r5,r5,4
    65d8:	38800015 	stw	r2,0(r7)
    65dc:	39c00104 	addi	r7,r7,4
    65e0:	19bffa36 	bltu	r3,r6,65cc <memcpy+0x80>
    65e4:	3807883a 	mov	r3,r7
    65e8:	003fde06 	br	6564 <memcpy+0x18>

000065ec <memmove>:
    65ec:	2807883a 	mov	r3,r5
    65f0:	2011883a 	mov	r8,r4
    65f4:	29000c2e 	bgeu	r5,r4,6628 <memmove+0x3c>
    65f8:	298f883a 	add	r7,r5,r6
    65fc:	21c00a2e 	bgeu	r4,r7,6628 <memmove+0x3c>
    6600:	30000726 	beq	r6,zero,6620 <memmove+0x34>
    6604:	2187883a 	add	r3,r4,r6
    6608:	198dc83a 	sub	r6,r3,r6
    660c:	39ffffc4 	addi	r7,r7,-1
    6610:	38800003 	ldbu	r2,0(r7)
    6614:	18ffffc4 	addi	r3,r3,-1
    6618:	18800005 	stb	r2,0(r3)
    661c:	19bffb1e 	bne	r3,r6,660c <memmove+0x20>
    6620:	2005883a 	mov	r2,r4
    6624:	f800283a 	ret
    6628:	01c003c4 	movi	r7,15
    662c:	39800a36 	bltu	r7,r6,6658 <memmove+0x6c>
    6630:	303ffb26 	beq	r6,zero,6620 <memmove+0x34>
    6634:	400f883a 	mov	r7,r8
    6638:	320d883a 	add	r6,r6,r8
    663c:	28800003 	ldbu	r2,0(r5)
    6640:	29400044 	addi	r5,r5,1
    6644:	38800005 	stb	r2,0(r7)
    6648:	39c00044 	addi	r7,r7,1
    664c:	39bffb1e 	bne	r7,r6,663c <memmove+0x50>
    6650:	2005883a 	mov	r2,r4
    6654:	f800283a 	ret
    6658:	1904b03a 	or	r2,r3,r4
    665c:	108000cc 	andi	r2,r2,3
    6660:	103ff31e 	bne	r2,zero,6630 <memmove+0x44>
    6664:	3811883a 	mov	r8,r7
    6668:	180b883a 	mov	r5,r3
    666c:	200f883a 	mov	r7,r4
    6670:	28c00017 	ldw	r3,0(r5)
    6674:	31bffc04 	addi	r6,r6,-16
    6678:	38c00015 	stw	r3,0(r7)
    667c:	28800117 	ldw	r2,4(r5)
    6680:	38800115 	stw	r2,4(r7)
    6684:	28c00217 	ldw	r3,8(r5)
    6688:	38c00215 	stw	r3,8(r7)
    668c:	28800317 	ldw	r2,12(r5)
    6690:	29400404 	addi	r5,r5,16
    6694:	38800315 	stw	r2,12(r7)
    6698:	39c00404 	addi	r7,r7,16
    669c:	41bff436 	bltu	r8,r6,6670 <memmove+0x84>
    66a0:	008000c4 	movi	r2,3
    66a4:	1180072e 	bgeu	r2,r6,66c4 <memmove+0xd8>
    66a8:	1007883a 	mov	r3,r2
    66ac:	28800017 	ldw	r2,0(r5)
    66b0:	31bfff04 	addi	r6,r6,-4
    66b4:	29400104 	addi	r5,r5,4
    66b8:	38800015 	stw	r2,0(r7)
    66bc:	39c00104 	addi	r7,r7,4
    66c0:	19bffa36 	bltu	r3,r6,66ac <memmove+0xc0>
    66c4:	3811883a 	mov	r8,r7
    66c8:	003fd906 	br	6630 <memmove+0x44>

000066cc <memset>:
    66cc:	008000c4 	movi	r2,3
    66d0:	29403fcc 	andi	r5,r5,255
    66d4:	2007883a 	mov	r3,r4
    66d8:	1180022e 	bgeu	r2,r6,66e4 <memset+0x18>
    66dc:	2084703a 	and	r2,r4,r2
    66e0:	10000826 	beq	r2,zero,6704 <memset+0x38>
    66e4:	30000526 	beq	r6,zero,66fc <memset+0x30>
    66e8:	2805883a 	mov	r2,r5
    66ec:	30cd883a 	add	r6,r6,r3
    66f0:	18800005 	stb	r2,0(r3)
    66f4:	18c00044 	addi	r3,r3,1
    66f8:	19bffd1e 	bne	r3,r6,66f0 <memset+0x24>
    66fc:	2005883a 	mov	r2,r4
    6700:	f800283a 	ret
    6704:	2804923a 	slli	r2,r5,8
    6708:	020003c4 	movi	r8,15
    670c:	200f883a 	mov	r7,r4
    6710:	2884b03a 	or	r2,r5,r2
    6714:	1006943a 	slli	r3,r2,16
    6718:	10c6b03a 	or	r3,r2,r3
    671c:	41800a2e 	bgeu	r8,r6,6748 <memset+0x7c>
    6720:	4005883a 	mov	r2,r8
    6724:	31bffc04 	addi	r6,r6,-16
    6728:	38c00015 	stw	r3,0(r7)
    672c:	38c00115 	stw	r3,4(r7)
    6730:	38c00215 	stw	r3,8(r7)
    6734:	38c00315 	stw	r3,12(r7)
    6738:	39c00404 	addi	r7,r7,16
    673c:	11bff936 	bltu	r2,r6,6724 <memset+0x58>
    6740:	008000c4 	movi	r2,3
    6744:	1180052e 	bgeu	r2,r6,675c <memset+0x90>
    6748:	31bfff04 	addi	r6,r6,-4
    674c:	008000c4 	movi	r2,3
    6750:	38c00015 	stw	r3,0(r7)
    6754:	39c00104 	addi	r7,r7,4
    6758:	11bffb36 	bltu	r2,r6,6748 <memset+0x7c>
    675c:	3807883a 	mov	r3,r7
    6760:	003fe006 	br	66e4 <memset+0x18>

00006764 <_Bfree>:
    6764:	28000826 	beq	r5,zero,6788 <_Bfree+0x24>
    6768:	28800117 	ldw	r2,4(r5)
    676c:	21001317 	ldw	r4,76(r4)
    6770:	1085883a 	add	r2,r2,r2
    6774:	1085883a 	add	r2,r2,r2
    6778:	1105883a 	add	r2,r2,r4
    677c:	10c00017 	ldw	r3,0(r2)
    6780:	28c00015 	stw	r3,0(r5)
    6784:	11400015 	stw	r5,0(r2)
    6788:	f800283a 	ret

0000678c <__hi0bits>:
    678c:	20bfffec 	andhi	r2,r4,65535
    6790:	10001426 	beq	r2,zero,67e4 <__hi0bits+0x58>
    6794:	0007883a 	mov	r3,zero
    6798:	20bfc02c 	andhi	r2,r4,65280
    679c:	1000021e 	bne	r2,zero,67a8 <__hi0bits+0x1c>
    67a0:	2008923a 	slli	r4,r4,8
    67a4:	18c00204 	addi	r3,r3,8
    67a8:	20bc002c 	andhi	r2,r4,61440
    67ac:	1000021e 	bne	r2,zero,67b8 <__hi0bits+0x2c>
    67b0:	2008913a 	slli	r4,r4,4
    67b4:	18c00104 	addi	r3,r3,4
    67b8:	20b0002c 	andhi	r2,r4,49152
    67bc:	1000031e 	bne	r2,zero,67cc <__hi0bits+0x40>
    67c0:	2105883a 	add	r2,r4,r4
    67c4:	18c00084 	addi	r3,r3,2
    67c8:	1089883a 	add	r4,r2,r2
    67cc:	20000316 	blt	r4,zero,67dc <__hi0bits+0x50>
    67d0:	2090002c 	andhi	r2,r4,16384
    67d4:	10000626 	beq	r2,zero,67f0 <__hi0bits+0x64>
    67d8:	18c00044 	addi	r3,r3,1
    67dc:	1805883a 	mov	r2,r3
    67e0:	f800283a 	ret
    67e4:	2008943a 	slli	r4,r4,16
    67e8:	00c00404 	movi	r3,16
    67ec:	003fea06 	br	6798 <__hi0bits+0xc>
    67f0:	00c00804 	movi	r3,32
    67f4:	1805883a 	mov	r2,r3
    67f8:	f800283a 	ret

000067fc <__lo0bits>:
    67fc:	20c00017 	ldw	r3,0(r4)
    6800:	188001cc 	andi	r2,r3,7
    6804:	10000a26 	beq	r2,zero,6830 <__lo0bits+0x34>
    6808:	1880004c 	andi	r2,r3,1
    680c:	1005003a 	cmpeq	r2,r2,zero
    6810:	10002126 	beq	r2,zero,6898 <__lo0bits+0x9c>
    6814:	1880008c 	andi	r2,r3,2
    6818:	1000251e 	bne	r2,zero,68b0 <__lo0bits+0xb4>
    681c:	1804d0ba 	srli	r2,r3,2
    6820:	01400084 	movi	r5,2
    6824:	20800015 	stw	r2,0(r4)
    6828:	2805883a 	mov	r2,r5
    682c:	f800283a 	ret
    6830:	18bfffcc 	andi	r2,r3,65535
    6834:	10001526 	beq	r2,zero,688c <__lo0bits+0x90>
    6838:	000b883a 	mov	r5,zero
    683c:	18803fcc 	andi	r2,r3,255
    6840:	1000021e 	bne	r2,zero,684c <__lo0bits+0x50>
    6844:	1806d23a 	srli	r3,r3,8
    6848:	29400204 	addi	r5,r5,8
    684c:	188003cc 	andi	r2,r3,15
    6850:	1000021e 	bne	r2,zero,685c <__lo0bits+0x60>
    6854:	1806d13a 	srli	r3,r3,4
    6858:	29400104 	addi	r5,r5,4
    685c:	188000cc 	andi	r2,r3,3
    6860:	1000021e 	bne	r2,zero,686c <__lo0bits+0x70>
    6864:	1806d0ba 	srli	r3,r3,2
    6868:	29400084 	addi	r5,r5,2
    686c:	1880004c 	andi	r2,r3,1
    6870:	1000031e 	bne	r2,zero,6880 <__lo0bits+0x84>
    6874:	1806d07a 	srli	r3,r3,1
    6878:	18000a26 	beq	r3,zero,68a4 <__lo0bits+0xa8>
    687c:	29400044 	addi	r5,r5,1
    6880:	2805883a 	mov	r2,r5
    6884:	20c00015 	stw	r3,0(r4)
    6888:	f800283a 	ret
    688c:	1806d43a 	srli	r3,r3,16
    6890:	01400404 	movi	r5,16
    6894:	003fe906 	br	683c <__lo0bits+0x40>
    6898:	000b883a 	mov	r5,zero
    689c:	2805883a 	mov	r2,r5
    68a0:	f800283a 	ret
    68a4:	01400804 	movi	r5,32
    68a8:	2805883a 	mov	r2,r5
    68ac:	f800283a 	ret
    68b0:	1804d07a 	srli	r2,r3,1
    68b4:	01400044 	movi	r5,1
    68b8:	20800015 	stw	r2,0(r4)
    68bc:	003fda06 	br	6828 <__lo0bits+0x2c>

000068c0 <__mcmp>:
    68c0:	20800417 	ldw	r2,16(r4)
    68c4:	28c00417 	ldw	r3,16(r5)
    68c8:	10cfc83a 	sub	r7,r2,r3
    68cc:	38000c1e 	bne	r7,zero,6900 <__mcmp+0x40>
    68d0:	18c5883a 	add	r2,r3,r3
    68d4:	1085883a 	add	r2,r2,r2
    68d8:	10c00504 	addi	r3,r2,20
    68dc:	21000504 	addi	r4,r4,20
    68e0:	28cb883a 	add	r5,r5,r3
    68e4:	2085883a 	add	r2,r4,r2
    68e8:	10bfff04 	addi	r2,r2,-4
    68ec:	297fff04 	addi	r5,r5,-4
    68f0:	11800017 	ldw	r6,0(r2)
    68f4:	28c00017 	ldw	r3,0(r5)
    68f8:	30c0031e 	bne	r6,r3,6908 <__mcmp+0x48>
    68fc:	20bffa36 	bltu	r4,r2,68e8 <__mcmp+0x28>
    6900:	3805883a 	mov	r2,r7
    6904:	f800283a 	ret
    6908:	30c00336 	bltu	r6,r3,6918 <__mcmp+0x58>
    690c:	01c00044 	movi	r7,1
    6910:	3805883a 	mov	r2,r7
    6914:	f800283a 	ret
    6918:	01ffffc4 	movi	r7,-1
    691c:	003ff806 	br	6900 <__mcmp+0x40>

00006920 <__ulp>:
    6920:	295ffc2c 	andhi	r5,r5,32752
    6924:	013f3034 	movhi	r4,64704
    6928:	290b883a 	add	r5,r5,r4
    692c:	0145c83a 	sub	r2,zero,r5
    6930:	1007d53a 	srai	r3,r2,20
    6934:	000d883a 	mov	r6,zero
    6938:	0140040e 	bge	zero,r5,694c <__ulp+0x2c>
    693c:	280f883a 	mov	r7,r5
    6940:	3807883a 	mov	r3,r7
    6944:	3005883a 	mov	r2,r6
    6948:	f800283a 	ret
    694c:	008004c4 	movi	r2,19
    6950:	193ffb04 	addi	r4,r3,-20
    6954:	10c00c0e 	bge	r2,r3,6988 <__ulp+0x68>
    6958:	008007c4 	movi	r2,31
    695c:	1107c83a 	sub	r3,r2,r4
    6960:	00800784 	movi	r2,30
    6964:	01400044 	movi	r5,1
    6968:	11000216 	blt	r2,r4,6974 <__ulp+0x54>
    696c:	00800044 	movi	r2,1
    6970:	10ca983a 	sll	r5,r2,r3
    6974:	000f883a 	mov	r7,zero
    6978:	280d883a 	mov	r6,r5
    697c:	3807883a 	mov	r3,r7
    6980:	3005883a 	mov	r2,r6
    6984:	f800283a 	ret
    6988:	00800234 	movhi	r2,8
    698c:	10cfd83a 	sra	r7,r2,r3
    6990:	000d883a 	mov	r6,zero
    6994:	3005883a 	mov	r2,r6
    6998:	3807883a 	mov	r3,r7
    699c:	f800283a 	ret

000069a0 <__b2d>:
    69a0:	20800417 	ldw	r2,16(r4)
    69a4:	defff904 	addi	sp,sp,-28
    69a8:	dd000415 	stw	r20,16(sp)
    69ac:	1085883a 	add	r2,r2,r2
    69b0:	25000504 	addi	r20,r4,20
    69b4:	1085883a 	add	r2,r2,r2
    69b8:	dc000015 	stw	r16,0(sp)
    69bc:	a0a1883a 	add	r16,r20,r2
    69c0:	dd400515 	stw	r21,20(sp)
    69c4:	857fff17 	ldw	r21,-4(r16)
    69c8:	dc400115 	stw	r17,4(sp)
    69cc:	dfc00615 	stw	ra,24(sp)
    69d0:	a809883a 	mov	r4,r21
    69d4:	2823883a 	mov	r17,r5
    69d8:	dcc00315 	stw	r19,12(sp)
    69dc:	dc800215 	stw	r18,8(sp)
    69e0:	000678c0 	call	678c <__hi0bits>
    69e4:	100b883a 	mov	r5,r2
    69e8:	00800804 	movi	r2,32
    69ec:	1145c83a 	sub	r2,r2,r5
    69f0:	88800015 	stw	r2,0(r17)
    69f4:	00800284 	movi	r2,10
    69f8:	80ffff04 	addi	r3,r16,-4
    69fc:	11401416 	blt	r2,r5,6a50 <__b2d+0xb0>
    6a00:	008002c4 	movi	r2,11
    6a04:	1149c83a 	sub	r4,r2,r5
    6a08:	a0c02736 	bltu	r20,r3,6aa8 <__b2d+0x108>
    6a0c:	000d883a 	mov	r6,zero
    6a10:	28800544 	addi	r2,r5,21
    6a14:	a906d83a 	srl	r3,r21,r4
    6a18:	a884983a 	sll	r2,r21,r2
    6a1c:	1ccffc34 	orhi	r19,r3,16368
    6a20:	11a4b03a 	or	r18,r2,r6
    6a24:	9005883a 	mov	r2,r18
    6a28:	9807883a 	mov	r3,r19
    6a2c:	dfc00617 	ldw	ra,24(sp)
    6a30:	dd400517 	ldw	r21,20(sp)
    6a34:	dd000417 	ldw	r20,16(sp)
    6a38:	dcc00317 	ldw	r19,12(sp)
    6a3c:	dc800217 	ldw	r18,8(sp)
    6a40:	dc400117 	ldw	r17,4(sp)
    6a44:	dc000017 	ldw	r16,0(sp)
    6a48:	dec00704 	addi	sp,sp,28
    6a4c:	f800283a 	ret
    6a50:	a0c00e36 	bltu	r20,r3,6a8c <__b2d+0xec>
    6a54:	293ffd44 	addi	r4,r5,-11
    6a58:	000d883a 	mov	r6,zero
    6a5c:	20000f26 	beq	r4,zero,6a9c <__b2d+0xfc>
    6a60:	00800804 	movi	r2,32
    6a64:	110bc83a 	sub	r5,r2,r4
    6a68:	a0c01236 	bltu	r20,r3,6ab4 <__b2d+0x114>
    6a6c:	000f883a 	mov	r7,zero
    6a70:	a904983a 	sll	r2,r21,r4
    6a74:	3146d83a 	srl	r3,r6,r5
    6a78:	3108983a 	sll	r4,r6,r4
    6a7c:	108ffc34 	orhi	r2,r2,16368
    6a80:	18a6b03a 	or	r19,r3,r2
    6a84:	3924b03a 	or	r18,r7,r4
    6a88:	003fe606 	br	6a24 <__b2d+0x84>
    6a8c:	293ffd44 	addi	r4,r5,-11
    6a90:	81bffe17 	ldw	r6,-8(r16)
    6a94:	80fffe04 	addi	r3,r16,-8
    6a98:	203ff11e 	bne	r4,zero,6a60 <__b2d+0xc0>
    6a9c:	accffc34 	orhi	r19,r21,16368
    6aa0:	3025883a 	mov	r18,r6
    6aa4:	003fdf06 	br	6a24 <__b2d+0x84>
    6aa8:	18bfff17 	ldw	r2,-4(r3)
    6aac:	110cd83a 	srl	r6,r2,r4
    6ab0:	003fd706 	br	6a10 <__b2d+0x70>
    6ab4:	18bfff17 	ldw	r2,-4(r3)
    6ab8:	114ed83a 	srl	r7,r2,r5
    6abc:	003fec06 	br	6a70 <__b2d+0xd0>

00006ac0 <__ratio>:
    6ac0:	defff904 	addi	sp,sp,-28
    6ac4:	dc400215 	stw	r17,8(sp)
    6ac8:	2823883a 	mov	r17,r5
    6acc:	d80b883a 	mov	r5,sp
    6ad0:	dfc00615 	stw	ra,24(sp)
    6ad4:	dd000515 	stw	r20,20(sp)
    6ad8:	dcc00415 	stw	r19,16(sp)
    6adc:	dc800315 	stw	r18,12(sp)
    6ae0:	2025883a 	mov	r18,r4
    6ae4:	00069a00 	call	69a0 <__b2d>
    6ae8:	8809883a 	mov	r4,r17
    6aec:	d9400104 	addi	r5,sp,4
    6af0:	1027883a 	mov	r19,r2
    6af4:	1829883a 	mov	r20,r3
    6af8:	00069a00 	call	69a0 <__b2d>
    6afc:	89000417 	ldw	r4,16(r17)
    6b00:	91c00417 	ldw	r7,16(r18)
    6b04:	d9800117 	ldw	r6,4(sp)
    6b08:	180b883a 	mov	r5,r3
    6b0c:	390fc83a 	sub	r7,r7,r4
    6b10:	1009883a 	mov	r4,r2
    6b14:	d8800017 	ldw	r2,0(sp)
    6b18:	380e917a 	slli	r7,r7,5
    6b1c:	2011883a 	mov	r8,r4
    6b20:	1185c83a 	sub	r2,r2,r6
    6b24:	11c5883a 	add	r2,r2,r7
    6b28:	1006953a 	slli	r3,r2,20
    6b2c:	2813883a 	mov	r9,r5
    6b30:	00800d0e 	bge	zero,r2,6b68 <__ratio+0xa8>
    6b34:	1d29883a 	add	r20,r3,r20
    6b38:	a00b883a 	mov	r5,r20
    6b3c:	480f883a 	mov	r7,r9
    6b40:	9809883a 	mov	r4,r19
    6b44:	400d883a 	mov	r6,r8
    6b48:	0009dd00 	call	9dd0 <__divdf3>
    6b4c:	dfc00617 	ldw	ra,24(sp)
    6b50:	dd000517 	ldw	r20,20(sp)
    6b54:	dcc00417 	ldw	r19,16(sp)
    6b58:	dc800317 	ldw	r18,12(sp)
    6b5c:	dc400217 	ldw	r17,8(sp)
    6b60:	dec00704 	addi	sp,sp,28
    6b64:	f800283a 	ret
    6b68:	28d3c83a 	sub	r9,r5,r3
    6b6c:	003ff206 	br	6b38 <__ratio+0x78>

00006b70 <_mprec_log10>:
    6b70:	defffe04 	addi	sp,sp,-8
    6b74:	008005c4 	movi	r2,23
    6b78:	dc000015 	stw	r16,0(sp)
    6b7c:	dfc00115 	stw	ra,4(sp)
    6b80:	2021883a 	mov	r16,r4
    6b84:	11000c16 	blt	r2,r4,6bb8 <_mprec_log10+0x48>
    6b88:	200490fa 	slli	r2,r4,3
    6b8c:	00c00074 	movhi	r3,1
    6b90:	18f67a04 	addi	r3,r3,-9752
    6b94:	10c5883a 	add	r2,r2,r3
    6b98:	12400117 	ldw	r9,4(r2)
    6b9c:	12000017 	ldw	r8,0(r2)
    6ba0:	4807883a 	mov	r3,r9
    6ba4:	4005883a 	mov	r2,r8
    6ba8:	dfc00117 	ldw	ra,4(sp)
    6bac:	dc000017 	ldw	r16,0(sp)
    6bb0:	dec00204 	addi	sp,sp,8
    6bb4:	f800283a 	ret
    6bb8:	0011883a 	mov	r8,zero
    6bbc:	024ffc34 	movhi	r9,16368
    6bc0:	0005883a 	mov	r2,zero
    6bc4:	00d00934 	movhi	r3,16420
    6bc8:	480b883a 	mov	r5,r9
    6bcc:	4009883a 	mov	r4,r8
    6bd0:	180f883a 	mov	r7,r3
    6bd4:	100d883a 	mov	r6,r2
    6bd8:	0009a0c0 	call	9a0c <__muldf3>
    6bdc:	843fffc4 	addi	r16,r16,-1
    6be0:	1011883a 	mov	r8,r2
    6be4:	1813883a 	mov	r9,r3
    6be8:	803ff51e 	bne	r16,zero,6bc0 <_mprec_log10+0x50>
    6bec:	4005883a 	mov	r2,r8
    6bf0:	4807883a 	mov	r3,r9
    6bf4:	dfc00117 	ldw	ra,4(sp)
    6bf8:	dc000017 	ldw	r16,0(sp)
    6bfc:	dec00204 	addi	sp,sp,8
    6c00:	f800283a 	ret

00006c04 <__copybits>:
    6c04:	297fffc4 	addi	r5,r5,-1
    6c08:	30800417 	ldw	r2,16(r6)
    6c0c:	280bd17a 	srai	r5,r5,5
    6c10:	31800504 	addi	r6,r6,20
    6c14:	1085883a 	add	r2,r2,r2
    6c18:	294b883a 	add	r5,r5,r5
    6c1c:	294b883a 	add	r5,r5,r5
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	290b883a 	add	r5,r5,r4
    6c28:	3087883a 	add	r3,r6,r2
    6c2c:	29400104 	addi	r5,r5,4
    6c30:	30c0052e 	bgeu	r6,r3,6c48 <__copybits+0x44>
    6c34:	30800017 	ldw	r2,0(r6)
    6c38:	31800104 	addi	r6,r6,4
    6c3c:	20800015 	stw	r2,0(r4)
    6c40:	21000104 	addi	r4,r4,4
    6c44:	30fffb36 	bltu	r6,r3,6c34 <__copybits+0x30>
    6c48:	2140032e 	bgeu	r4,r5,6c58 <__copybits+0x54>
    6c4c:	20000015 	stw	zero,0(r4)
    6c50:	21000104 	addi	r4,r4,4
    6c54:	217ffd36 	bltu	r4,r5,6c4c <__copybits+0x48>
    6c58:	f800283a 	ret

00006c5c <__any_on>:
    6c5c:	20800417 	ldw	r2,16(r4)
    6c60:	2807d17a 	srai	r3,r5,5
    6c64:	21000504 	addi	r4,r4,20
    6c68:	10c00d0e 	bge	r2,r3,6ca0 <__any_on+0x44>
    6c6c:	1085883a 	add	r2,r2,r2
    6c70:	1085883a 	add	r2,r2,r2
    6c74:	208d883a 	add	r6,r4,r2
    6c78:	2180182e 	bgeu	r4,r6,6cdc <__any_on+0x80>
    6c7c:	30bfff17 	ldw	r2,-4(r6)
    6c80:	30ffff04 	addi	r3,r6,-4
    6c84:	1000041e 	bne	r2,zero,6c98 <__any_on+0x3c>
    6c88:	20c0142e 	bgeu	r4,r3,6cdc <__any_on+0x80>
    6c8c:	18ffff04 	addi	r3,r3,-4
    6c90:	18800017 	ldw	r2,0(r3)
    6c94:	103ffc26 	beq	r2,zero,6c88 <__any_on+0x2c>
    6c98:	00800044 	movi	r2,1
    6c9c:	f800283a 	ret
    6ca0:	18800a0e 	bge	r3,r2,6ccc <__any_on+0x70>
    6ca4:	294007cc 	andi	r5,r5,31
    6ca8:	28000826 	beq	r5,zero,6ccc <__any_on+0x70>
    6cac:	18c5883a 	add	r2,r3,r3
    6cb0:	1085883a 	add	r2,r2,r2
    6cb4:	208d883a 	add	r6,r4,r2
    6cb8:	30c00017 	ldw	r3,0(r6)
    6cbc:	1944d83a 	srl	r2,r3,r5
    6cc0:	1144983a 	sll	r2,r2,r5
    6cc4:	18bff41e 	bne	r3,r2,6c98 <__any_on+0x3c>
    6cc8:	003feb06 	br	6c78 <__any_on+0x1c>
    6ccc:	18c5883a 	add	r2,r3,r3
    6cd0:	1085883a 	add	r2,r2,r2
    6cd4:	208d883a 	add	r6,r4,r2
    6cd8:	003fe706 	br	6c78 <__any_on+0x1c>
    6cdc:	0005883a 	mov	r2,zero
    6ce0:	f800283a 	ret

00006ce4 <_Balloc>:
    6ce4:	20c01317 	ldw	r3,76(r4)
    6ce8:	defffb04 	addi	sp,sp,-20
    6cec:	dcc00315 	stw	r19,12(sp)
    6cf0:	dc800215 	stw	r18,8(sp)
    6cf4:	dfc00415 	stw	ra,16(sp)
    6cf8:	2825883a 	mov	r18,r5
    6cfc:	dc400115 	stw	r17,4(sp)
    6d00:	dc000015 	stw	r16,0(sp)
    6d04:	2027883a 	mov	r19,r4
    6d08:	01800404 	movi	r6,16
    6d0c:	01400104 	movi	r5,4
    6d10:	18001726 	beq	r3,zero,6d70 <_Balloc+0x8c>
    6d14:	01400044 	movi	r5,1
    6d18:	9485883a 	add	r2,r18,r18
    6d1c:	2ca2983a 	sll	r17,r5,r18
    6d20:	1085883a 	add	r2,r2,r2
    6d24:	10c7883a 	add	r3,r2,r3
    6d28:	1c000017 	ldw	r16,0(r3)
    6d2c:	8c4d883a 	add	r6,r17,r17
    6d30:	318d883a 	add	r6,r6,r6
    6d34:	9809883a 	mov	r4,r19
    6d38:	31800504 	addi	r6,r6,20
    6d3c:	80001226 	beq	r16,zero,6d88 <_Balloc+0xa4>
    6d40:	80800017 	ldw	r2,0(r16)
    6d44:	18800015 	stw	r2,0(r3)
    6d48:	80000415 	stw	zero,16(r16)
    6d4c:	80000315 	stw	zero,12(r16)
    6d50:	8005883a 	mov	r2,r16
    6d54:	dfc00417 	ldw	ra,16(sp)
    6d58:	dcc00317 	ldw	r19,12(sp)
    6d5c:	dc800217 	ldw	r18,8(sp)
    6d60:	dc400117 	ldw	r17,4(sp)
    6d64:	dc000017 	ldw	r16,0(sp)
    6d68:	dec00504 	addi	sp,sp,20
    6d6c:	f800283a 	ret
    6d70:	000840c0 	call	840c <_calloc_r>
    6d74:	1007883a 	mov	r3,r2
    6d78:	0021883a 	mov	r16,zero
    6d7c:	98801315 	stw	r2,76(r19)
    6d80:	103fe41e 	bne	r2,zero,6d14 <_Balloc+0x30>
    6d84:	003ff206 	br	6d50 <_Balloc+0x6c>
    6d88:	000840c0 	call	840c <_calloc_r>
    6d8c:	103ff026 	beq	r2,zero,6d50 <_Balloc+0x6c>
    6d90:	1021883a 	mov	r16,r2
    6d94:	14800115 	stw	r18,4(r2)
    6d98:	14400215 	stw	r17,8(r2)
    6d9c:	003fea06 	br	6d48 <_Balloc+0x64>

00006da0 <__d2b>:
    6da0:	defff504 	addi	sp,sp,-44
    6da4:	dcc00515 	stw	r19,20(sp)
    6da8:	04c00044 	movi	r19,1
    6dac:	dc000215 	stw	r16,8(sp)
    6db0:	2821883a 	mov	r16,r5
    6db4:	980b883a 	mov	r5,r19
    6db8:	ddc00915 	stw	r23,36(sp)
    6dbc:	dd800815 	stw	r22,32(sp)
    6dc0:	dd400715 	stw	r21,28(sp)
    6dc4:	dd000615 	stw	r20,24(sp)
    6dc8:	dc800415 	stw	r18,16(sp)
    6dcc:	dc400315 	stw	r17,12(sp)
    6dd0:	dfc00a15 	stw	ra,40(sp)
    6dd4:	3023883a 	mov	r17,r6
    6dd8:	382d883a 	mov	r22,r7
    6ddc:	ddc00b17 	ldw	r23,44(sp)
    6de0:	0006ce40 	call	6ce4 <_Balloc>
    6de4:	1025883a 	mov	r18,r2
    6de8:	00a00034 	movhi	r2,32768
    6dec:	10bfffc4 	addi	r2,r2,-1
    6df0:	8888703a 	and	r4,r17,r2
    6df4:	202ad53a 	srli	r21,r4,20
    6df8:	00800434 	movhi	r2,16
    6dfc:	10bfffc4 	addi	r2,r2,-1
    6e00:	8886703a 	and	r3,r17,r2
    6e04:	a829003a 	cmpeq	r20,r21,zero
    6e08:	800b883a 	mov	r5,r16
    6e0c:	d8c00115 	stw	r3,4(sp)
    6e10:	94000504 	addi	r16,r18,20
    6e14:	a000021e 	bne	r20,zero,6e20 <__d2b+0x80>
    6e18:	18c00434 	orhi	r3,r3,16
    6e1c:	d8c00115 	stw	r3,4(sp)
    6e20:	28002726 	beq	r5,zero,6ec0 <__d2b+0x120>
    6e24:	d809883a 	mov	r4,sp
    6e28:	d9400015 	stw	r5,0(sp)
    6e2c:	00067fc0 	call	67fc <__lo0bits>
    6e30:	100d883a 	mov	r6,r2
    6e34:	10003526 	beq	r2,zero,6f0c <__d2b+0x16c>
    6e38:	d8c00117 	ldw	r3,4(sp)
    6e3c:	00800804 	movi	r2,32
    6e40:	1185c83a 	sub	r2,r2,r6
    6e44:	d9000017 	ldw	r4,0(sp)
    6e48:	1886983a 	sll	r3,r3,r2
    6e4c:	1906b03a 	or	r3,r3,r4
    6e50:	90c00515 	stw	r3,20(r18)
    6e54:	d8c00117 	ldw	r3,4(sp)
    6e58:	1986d83a 	srl	r3,r3,r6
    6e5c:	d8c00115 	stw	r3,4(sp)
    6e60:	180b003a 	cmpeq	r5,r3,zero
    6e64:	00800084 	movi	r2,2
    6e68:	114bc83a 	sub	r5,r2,r5
    6e6c:	80c00115 	stw	r3,4(r16)
    6e70:	91400415 	stw	r5,16(r18)
    6e74:	a0001a1e 	bne	r20,zero,6ee0 <__d2b+0x140>
    6e78:	3545883a 	add	r2,r6,r21
    6e7c:	10bef344 	addi	r2,r2,-1075
    6e80:	00c00d44 	movi	r3,53
    6e84:	b0800015 	stw	r2,0(r22)
    6e88:	1987c83a 	sub	r3,r3,r6
    6e8c:	b8c00015 	stw	r3,0(r23)
    6e90:	9005883a 	mov	r2,r18
    6e94:	dfc00a17 	ldw	ra,40(sp)
    6e98:	ddc00917 	ldw	r23,36(sp)
    6e9c:	dd800817 	ldw	r22,32(sp)
    6ea0:	dd400717 	ldw	r21,28(sp)
    6ea4:	dd000617 	ldw	r20,24(sp)
    6ea8:	dcc00517 	ldw	r19,20(sp)
    6eac:	dc800417 	ldw	r18,16(sp)
    6eb0:	dc400317 	ldw	r17,12(sp)
    6eb4:	dc000217 	ldw	r16,8(sp)
    6eb8:	dec00b04 	addi	sp,sp,44
    6ebc:	f800283a 	ret
    6ec0:	d9000104 	addi	r4,sp,4
    6ec4:	00067fc0 	call	67fc <__lo0bits>
    6ec8:	11800804 	addi	r6,r2,32
    6ecc:	d8800117 	ldw	r2,4(sp)
    6ed0:	94c00415 	stw	r19,16(r18)
    6ed4:	980b883a 	mov	r5,r19
    6ed8:	90800515 	stw	r2,20(r18)
    6edc:	a03fe626 	beq	r20,zero,6e78 <__d2b+0xd8>
    6ee0:	2945883a 	add	r2,r5,r5
    6ee4:	1085883a 	add	r2,r2,r2
    6ee8:	1405883a 	add	r2,r2,r16
    6eec:	113fff17 	ldw	r4,-4(r2)
    6ef0:	30fef384 	addi	r3,r6,-1074
    6ef4:	2820917a 	slli	r16,r5,5
    6ef8:	b0c00015 	stw	r3,0(r22)
    6efc:	000678c0 	call	678c <__hi0bits>
    6f00:	80a1c83a 	sub	r16,r16,r2
    6f04:	bc000015 	stw	r16,0(r23)
    6f08:	003fe106 	br	6e90 <__d2b+0xf0>
    6f0c:	d8800017 	ldw	r2,0(sp)
    6f10:	90800515 	stw	r2,20(r18)
    6f14:	d8c00117 	ldw	r3,4(sp)
    6f18:	003fd106 	br	6e60 <__d2b+0xc0>

00006f1c <__mdiff>:
    6f1c:	defffb04 	addi	sp,sp,-20
    6f20:	dc000015 	stw	r16,0(sp)
    6f24:	2821883a 	mov	r16,r5
    6f28:	dc800215 	stw	r18,8(sp)
    6f2c:	300b883a 	mov	r5,r6
    6f30:	2025883a 	mov	r18,r4
    6f34:	8009883a 	mov	r4,r16
    6f38:	dc400115 	stw	r17,4(sp)
    6f3c:	dfc00415 	stw	ra,16(sp)
    6f40:	dcc00315 	stw	r19,12(sp)
    6f44:	3023883a 	mov	r17,r6
    6f48:	00068c00 	call	68c0 <__mcmp>
    6f4c:	10004226 	beq	r2,zero,7058 <__mdiff+0x13c>
    6f50:	10005016 	blt	r2,zero,7094 <__mdiff+0x178>
    6f54:	0027883a 	mov	r19,zero
    6f58:	81400117 	ldw	r5,4(r16)
    6f5c:	9009883a 	mov	r4,r18
    6f60:	0006ce40 	call	6ce4 <_Balloc>
    6f64:	1019883a 	mov	r12,r2
    6f68:	82800417 	ldw	r10,16(r16)
    6f6c:	88800417 	ldw	r2,16(r17)
    6f70:	81800504 	addi	r6,r16,20
    6f74:	5287883a 	add	r3,r10,r10
    6f78:	1085883a 	add	r2,r2,r2
    6f7c:	18c7883a 	add	r3,r3,r3
    6f80:	1085883a 	add	r2,r2,r2
    6f84:	8a000504 	addi	r8,r17,20
    6f88:	64c00315 	stw	r19,12(r12)
    6f8c:	30db883a 	add	r13,r6,r3
    6f90:	4097883a 	add	r11,r8,r2
    6f94:	61c00504 	addi	r7,r12,20
    6f98:	0013883a 	mov	r9,zero
    6f9c:	31000017 	ldw	r4,0(r6)
    6fa0:	41400017 	ldw	r5,0(r8)
    6fa4:	42000104 	addi	r8,r8,4
    6fa8:	20bfffcc 	andi	r2,r4,65535
    6fac:	28ffffcc 	andi	r3,r5,65535
    6fb0:	10c5c83a 	sub	r2,r2,r3
    6fb4:	1245883a 	add	r2,r2,r9
    6fb8:	2008d43a 	srli	r4,r4,16
    6fbc:	280ad43a 	srli	r5,r5,16
    6fc0:	1007d43a 	srai	r3,r2,16
    6fc4:	3880000d 	sth	r2,0(r7)
    6fc8:	2149c83a 	sub	r4,r4,r5
    6fcc:	20c9883a 	add	r4,r4,r3
    6fd0:	3900008d 	sth	r4,2(r7)
    6fd4:	31800104 	addi	r6,r6,4
    6fd8:	39c00104 	addi	r7,r7,4
    6fdc:	2013d43a 	srai	r9,r4,16
    6fe0:	42ffee36 	bltu	r8,r11,6f9c <__mdiff+0x80>
    6fe4:	33400c2e 	bgeu	r6,r13,7018 <__mdiff+0xfc>
    6fe8:	30800017 	ldw	r2,0(r6)
    6fec:	31800104 	addi	r6,r6,4
    6ff0:	10ffffcc 	andi	r3,r2,65535
    6ff4:	1a47883a 	add	r3,r3,r9
    6ff8:	1004d43a 	srli	r2,r2,16
    6ffc:	1809d43a 	srai	r4,r3,16
    7000:	38c0000d 	sth	r3,0(r7)
    7004:	1105883a 	add	r2,r2,r4
    7008:	3880008d 	sth	r2,2(r7)
    700c:	1013d43a 	srai	r9,r2,16
    7010:	39c00104 	addi	r7,r7,4
    7014:	337ff436 	bltu	r6,r13,6fe8 <__mdiff+0xcc>
    7018:	38bfff17 	ldw	r2,-4(r7)
    701c:	38ffff04 	addi	r3,r7,-4
    7020:	1000041e 	bne	r2,zero,7034 <__mdiff+0x118>
    7024:	18ffff04 	addi	r3,r3,-4
    7028:	18800017 	ldw	r2,0(r3)
    702c:	52bfffc4 	addi	r10,r10,-1
    7030:	103ffc26 	beq	r2,zero,7024 <__mdiff+0x108>
    7034:	6005883a 	mov	r2,r12
    7038:	62800415 	stw	r10,16(r12)
    703c:	dfc00417 	ldw	ra,16(sp)
    7040:	dcc00317 	ldw	r19,12(sp)
    7044:	dc800217 	ldw	r18,8(sp)
    7048:	dc400117 	ldw	r17,4(sp)
    704c:	dc000017 	ldw	r16,0(sp)
    7050:	dec00504 	addi	sp,sp,20
    7054:	f800283a 	ret
    7058:	9009883a 	mov	r4,r18
    705c:	000b883a 	mov	r5,zero
    7060:	0006ce40 	call	6ce4 <_Balloc>
    7064:	1019883a 	mov	r12,r2
    7068:	00800044 	movi	r2,1
    706c:	60800415 	stw	r2,16(r12)
    7070:	6005883a 	mov	r2,r12
    7074:	60000515 	stw	zero,20(r12)
    7078:	dfc00417 	ldw	ra,16(sp)
    707c:	dcc00317 	ldw	r19,12(sp)
    7080:	dc800217 	ldw	r18,8(sp)
    7084:	dc400117 	ldw	r17,4(sp)
    7088:	dc000017 	ldw	r16,0(sp)
    708c:	dec00504 	addi	sp,sp,20
    7090:	f800283a 	ret
    7094:	880d883a 	mov	r6,r17
    7098:	04c00044 	movi	r19,1
    709c:	8023883a 	mov	r17,r16
    70a0:	3021883a 	mov	r16,r6
    70a4:	003fac06 	br	6f58 <__mdiff+0x3c>

000070a8 <__lshift>:
    70a8:	defff904 	addi	sp,sp,-28
    70ac:	28800417 	ldw	r2,16(r5)
    70b0:	dc000015 	stw	r16,0(sp)
    70b4:	3021d17a 	srai	r16,r6,5
    70b8:	28c00217 	ldw	r3,8(r5)
    70bc:	10800044 	addi	r2,r2,1
    70c0:	dc400115 	stw	r17,4(sp)
    70c4:	80a3883a 	add	r17,r16,r2
    70c8:	dd400515 	stw	r21,20(sp)
    70cc:	dd000415 	stw	r20,16(sp)
    70d0:	dc800215 	stw	r18,8(sp)
    70d4:	dfc00615 	stw	ra,24(sp)
    70d8:	2825883a 	mov	r18,r5
    70dc:	dcc00315 	stw	r19,12(sp)
    70e0:	3029883a 	mov	r20,r6
    70e4:	202b883a 	mov	r21,r4
    70e8:	29400117 	ldw	r5,4(r5)
    70ec:	1c40030e 	bge	r3,r17,70fc <__lshift+0x54>
    70f0:	18c7883a 	add	r3,r3,r3
    70f4:	29400044 	addi	r5,r5,1
    70f8:	1c7ffd16 	blt	r3,r17,70f0 <__lshift+0x48>
    70fc:	a809883a 	mov	r4,r21
    7100:	0006ce40 	call	6ce4 <_Balloc>
    7104:	1027883a 	mov	r19,r2
    7108:	11400504 	addi	r5,r2,20
    710c:	0400090e 	bge	zero,r16,7134 <__lshift+0x8c>
    7110:	2805883a 	mov	r2,r5
    7114:	0007883a 	mov	r3,zero
    7118:	18c00044 	addi	r3,r3,1
    711c:	10000015 	stw	zero,0(r2)
    7120:	10800104 	addi	r2,r2,4
    7124:	80fffc1e 	bne	r16,r3,7118 <__lshift+0x70>
    7128:	8405883a 	add	r2,r16,r16
    712c:	1085883a 	add	r2,r2,r2
    7130:	288b883a 	add	r5,r5,r2
    7134:	90800417 	ldw	r2,16(r18)
    7138:	91000504 	addi	r4,r18,20
    713c:	a18007cc 	andi	r6,r20,31
    7140:	1085883a 	add	r2,r2,r2
    7144:	1085883a 	add	r2,r2,r2
    7148:	208f883a 	add	r7,r4,r2
    714c:	30001e26 	beq	r6,zero,71c8 <__lshift+0x120>
    7150:	00800804 	movi	r2,32
    7154:	1191c83a 	sub	r8,r2,r6
    7158:	0007883a 	mov	r3,zero
    715c:	20800017 	ldw	r2,0(r4)
    7160:	1184983a 	sll	r2,r2,r6
    7164:	1884b03a 	or	r2,r3,r2
    7168:	28800015 	stw	r2,0(r5)
    716c:	20c00017 	ldw	r3,0(r4)
    7170:	21000104 	addi	r4,r4,4
    7174:	29400104 	addi	r5,r5,4
    7178:	1a06d83a 	srl	r3,r3,r8
    717c:	21fff736 	bltu	r4,r7,715c <__lshift+0xb4>
    7180:	28c00015 	stw	r3,0(r5)
    7184:	18000126 	beq	r3,zero,718c <__lshift+0xe4>
    7188:	8c400044 	addi	r17,r17,1
    718c:	88bfffc4 	addi	r2,r17,-1
    7190:	98800415 	stw	r2,16(r19)
    7194:	a809883a 	mov	r4,r21
    7198:	900b883a 	mov	r5,r18
    719c:	00067640 	call	6764 <_Bfree>
    71a0:	9805883a 	mov	r2,r19
    71a4:	dfc00617 	ldw	ra,24(sp)
    71a8:	dd400517 	ldw	r21,20(sp)
    71ac:	dd000417 	ldw	r20,16(sp)
    71b0:	dcc00317 	ldw	r19,12(sp)
    71b4:	dc800217 	ldw	r18,8(sp)
    71b8:	dc400117 	ldw	r17,4(sp)
    71bc:	dc000017 	ldw	r16,0(sp)
    71c0:	dec00704 	addi	sp,sp,28
    71c4:	f800283a 	ret
    71c8:	20800017 	ldw	r2,0(r4)
    71cc:	21000104 	addi	r4,r4,4
    71d0:	28800015 	stw	r2,0(r5)
    71d4:	29400104 	addi	r5,r5,4
    71d8:	21ffec2e 	bgeu	r4,r7,718c <__lshift+0xe4>
    71dc:	20800017 	ldw	r2,0(r4)
    71e0:	21000104 	addi	r4,r4,4
    71e4:	28800015 	stw	r2,0(r5)
    71e8:	29400104 	addi	r5,r5,4
    71ec:	21fff636 	bltu	r4,r7,71c8 <__lshift+0x120>
    71f0:	003fe606 	br	718c <__lshift+0xe4>

000071f4 <__multiply>:
    71f4:	defff004 	addi	sp,sp,-64
    71f8:	dc800815 	stw	r18,32(sp)
    71fc:	dc400715 	stw	r17,28(sp)
    7200:	2c800417 	ldw	r18,16(r5)
    7204:	34400417 	ldw	r17,16(r6)
    7208:	dcc00915 	stw	r19,36(sp)
    720c:	dc000615 	stw	r16,24(sp)
    7210:	dfc00f15 	stw	ra,60(sp)
    7214:	df000e15 	stw	fp,56(sp)
    7218:	ddc00d15 	stw	r23,52(sp)
    721c:	dd800c15 	stw	r22,48(sp)
    7220:	dd400b15 	stw	r21,44(sp)
    7224:	dd000a15 	stw	r20,40(sp)
    7228:	2821883a 	mov	r16,r5
    722c:	3027883a 	mov	r19,r6
    7230:	9440040e 	bge	r18,r17,7244 <__multiply+0x50>
    7234:	8825883a 	mov	r18,r17
    7238:	2c400417 	ldw	r17,16(r5)
    723c:	2827883a 	mov	r19,r5
    7240:	3021883a 	mov	r16,r6
    7244:	80800217 	ldw	r2,8(r16)
    7248:	9447883a 	add	r3,r18,r17
    724c:	d8c00415 	stw	r3,16(sp)
    7250:	81400117 	ldw	r5,4(r16)
    7254:	10c0010e 	bge	r2,r3,725c <__multiply+0x68>
    7258:	29400044 	addi	r5,r5,1
    725c:	0006ce40 	call	6ce4 <_Balloc>
    7260:	d8800515 	stw	r2,20(sp)
    7264:	d9000417 	ldw	r4,16(sp)
    7268:	d8c00517 	ldw	r3,20(sp)
    726c:	2105883a 	add	r2,r4,r4
    7270:	1085883a 	add	r2,r2,r2
    7274:	19000504 	addi	r4,r3,20
    7278:	2085883a 	add	r2,r4,r2
    727c:	d8800315 	stw	r2,12(sp)
    7280:	2080052e 	bgeu	r4,r2,7298 <__multiply+0xa4>
    7284:	2005883a 	mov	r2,r4
    7288:	d8c00317 	ldw	r3,12(sp)
    728c:	10000015 	stw	zero,0(r2)
    7290:	10800104 	addi	r2,r2,4
    7294:	10fffc36 	bltu	r2,r3,7288 <__multiply+0x94>
    7298:	8c45883a 	add	r2,r17,r17
    729c:	9487883a 	add	r3,r18,r18
    72a0:	9dc00504 	addi	r23,r19,20
    72a4:	1085883a 	add	r2,r2,r2
    72a8:	84000504 	addi	r16,r16,20
    72ac:	18c7883a 	add	r3,r3,r3
    72b0:	b885883a 	add	r2,r23,r2
    72b4:	dc000015 	stw	r16,0(sp)
    72b8:	d8800215 	stw	r2,8(sp)
    72bc:	80f9883a 	add	fp,r16,r3
    72c0:	b880432e 	bgeu	r23,r2,73d0 <__multiply+0x1dc>
    72c4:	d9000115 	stw	r4,4(sp)
    72c8:	b9000017 	ldw	r4,0(r23)
    72cc:	253fffcc 	andi	r20,r4,65535
    72d0:	a0001a26 	beq	r20,zero,733c <__multiply+0x148>
    72d4:	dcc00017 	ldw	r19,0(sp)
    72d8:	dc800117 	ldw	r18,4(sp)
    72dc:	002b883a 	mov	r21,zero
    72e0:	9c400017 	ldw	r17,0(r19)
    72e4:	94000017 	ldw	r16,0(r18)
    72e8:	a009883a 	mov	r4,r20
    72ec:	897fffcc 	andi	r5,r17,65535
    72f0:	000a7800 	call	a780 <__mulsi3>
    72f4:	880ad43a 	srli	r5,r17,16
    72f8:	80ffffcc 	andi	r3,r16,65535
    72fc:	a8c7883a 	add	r3,r21,r3
    7300:	a009883a 	mov	r4,r20
    7304:	10e3883a 	add	r17,r2,r3
    7308:	8020d43a 	srli	r16,r16,16
    730c:	000a7800 	call	a780 <__mulsi3>
    7310:	8806d43a 	srli	r3,r17,16
    7314:	1405883a 	add	r2,r2,r16
    7318:	9cc00104 	addi	r19,r19,4
    731c:	1887883a 	add	r3,r3,r2
    7320:	90c0008d 	sth	r3,2(r18)
    7324:	9440000d 	sth	r17,0(r18)
    7328:	182ad43a 	srli	r21,r3,16
    732c:	94800104 	addi	r18,r18,4
    7330:	9f3feb36 	bltu	r19,fp,72e0 <__multiply+0xec>
    7334:	95400015 	stw	r21,0(r18)
    7338:	b9000017 	ldw	r4,0(r23)
    733c:	202ad43a 	srli	r21,r4,16
    7340:	a8001c26 	beq	r21,zero,73b4 <__multiply+0x1c0>
    7344:	d9000117 	ldw	r4,4(sp)
    7348:	dd000017 	ldw	r20,0(sp)
    734c:	002d883a 	mov	r22,zero
    7350:	24c00017 	ldw	r19,0(r4)
    7354:	2025883a 	mov	r18,r4
    7358:	9823883a 	mov	r17,r19
    735c:	a4000017 	ldw	r16,0(r20)
    7360:	a809883a 	mov	r4,r21
    7364:	a5000104 	addi	r20,r20,4
    7368:	817fffcc 	andi	r5,r16,65535
    736c:	000a7800 	call	a780 <__mulsi3>
    7370:	8806d43a 	srli	r3,r17,16
    7374:	800ad43a 	srli	r5,r16,16
    7378:	94c0000d 	sth	r19,0(r18)
    737c:	b0c7883a 	add	r3,r22,r3
    7380:	10e1883a 	add	r16,r2,r3
    7384:	9400008d 	sth	r16,2(r18)
    7388:	a809883a 	mov	r4,r21
    738c:	94800104 	addi	r18,r18,4
    7390:	000a7800 	call	a780 <__mulsi3>
    7394:	94400017 	ldw	r17,0(r18)
    7398:	8020d43a 	srli	r16,r16,16
    739c:	88ffffcc 	andi	r3,r17,65535
    73a0:	10c5883a 	add	r2,r2,r3
    73a4:	80a7883a 	add	r19,r16,r2
    73a8:	982cd43a 	srli	r22,r19,16
    73ac:	a73feb36 	bltu	r20,fp,735c <__multiply+0x168>
    73b0:	94c00015 	stw	r19,0(r18)
    73b4:	d8800217 	ldw	r2,8(sp)
    73b8:	bdc00104 	addi	r23,r23,4
    73bc:	b880042e 	bgeu	r23,r2,73d0 <__multiply+0x1dc>
    73c0:	d8c00117 	ldw	r3,4(sp)
    73c4:	18c00104 	addi	r3,r3,4
    73c8:	d8c00115 	stw	r3,4(sp)
    73cc:	003fbe06 	br	72c8 <__multiply+0xd4>
    73d0:	d9000417 	ldw	r4,16(sp)
    73d4:	01000c0e 	bge	zero,r4,7408 <__multiply+0x214>
    73d8:	d8c00317 	ldw	r3,12(sp)
    73dc:	18bfff17 	ldw	r2,-4(r3)
    73e0:	18ffff04 	addi	r3,r3,-4
    73e4:	10000326 	beq	r2,zero,73f4 <__multiply+0x200>
    73e8:	00000706 	br	7408 <__multiply+0x214>
    73ec:	18800017 	ldw	r2,0(r3)
    73f0:	1000051e 	bne	r2,zero,7408 <__multiply+0x214>
    73f4:	d9000417 	ldw	r4,16(sp)
    73f8:	18ffff04 	addi	r3,r3,-4
    73fc:	213fffc4 	addi	r4,r4,-1
    7400:	d9000415 	stw	r4,16(sp)
    7404:	203ff91e 	bne	r4,zero,73ec <__multiply+0x1f8>
    7408:	d8800417 	ldw	r2,16(sp)
    740c:	d8c00517 	ldw	r3,20(sp)
    7410:	18800415 	stw	r2,16(r3)
    7414:	1805883a 	mov	r2,r3
    7418:	dfc00f17 	ldw	ra,60(sp)
    741c:	df000e17 	ldw	fp,56(sp)
    7420:	ddc00d17 	ldw	r23,52(sp)
    7424:	dd800c17 	ldw	r22,48(sp)
    7428:	dd400b17 	ldw	r21,44(sp)
    742c:	dd000a17 	ldw	r20,40(sp)
    7430:	dcc00917 	ldw	r19,36(sp)
    7434:	dc800817 	ldw	r18,32(sp)
    7438:	dc400717 	ldw	r17,28(sp)
    743c:	dc000617 	ldw	r16,24(sp)
    7440:	dec01004 	addi	sp,sp,64
    7444:	f800283a 	ret

00007448 <__i2b>:
    7448:	defffd04 	addi	sp,sp,-12
    744c:	dc000015 	stw	r16,0(sp)
    7450:	04000044 	movi	r16,1
    7454:	dc800115 	stw	r18,4(sp)
    7458:	2825883a 	mov	r18,r5
    745c:	800b883a 	mov	r5,r16
    7460:	dfc00215 	stw	ra,8(sp)
    7464:	0006ce40 	call	6ce4 <_Balloc>
    7468:	14000415 	stw	r16,16(r2)
    746c:	14800515 	stw	r18,20(r2)
    7470:	dfc00217 	ldw	ra,8(sp)
    7474:	dc800117 	ldw	r18,4(sp)
    7478:	dc000017 	ldw	r16,0(sp)
    747c:	dec00304 	addi	sp,sp,12
    7480:	f800283a 	ret

00007484 <__multadd>:
    7484:	defff604 	addi	sp,sp,-40
    7488:	dd800615 	stw	r22,24(sp)
    748c:	2d800417 	ldw	r22,16(r5)
    7490:	df000815 	stw	fp,32(sp)
    7494:	ddc00715 	stw	r23,28(sp)
    7498:	dd400515 	stw	r21,20(sp)
    749c:	dd000415 	stw	r20,16(sp)
    74a0:	dcc00315 	stw	r19,12(sp)
    74a4:	dc800215 	stw	r18,8(sp)
    74a8:	dfc00915 	stw	ra,36(sp)
    74ac:	dc400115 	stw	r17,4(sp)
    74b0:	dc000015 	stw	r16,0(sp)
    74b4:	282f883a 	mov	r23,r5
    74b8:	2039883a 	mov	fp,r4
    74bc:	302b883a 	mov	r21,r6
    74c0:	3829883a 	mov	r20,r7
    74c4:	2c800504 	addi	r18,r5,20
    74c8:	0027883a 	mov	r19,zero
    74cc:	94400017 	ldw	r17,0(r18)
    74d0:	a80b883a 	mov	r5,r21
    74d4:	9cc00044 	addi	r19,r19,1
    74d8:	893fffcc 	andi	r4,r17,65535
    74dc:	000a7800 	call	a780 <__mulsi3>
    74e0:	8808d43a 	srli	r4,r17,16
    74e4:	1521883a 	add	r16,r2,r20
    74e8:	a80b883a 	mov	r5,r21
    74ec:	000a7800 	call	a780 <__mulsi3>
    74f0:	8008d43a 	srli	r4,r16,16
    74f4:	843fffcc 	andi	r16,r16,65535
    74f8:	1105883a 	add	r2,r2,r4
    74fc:	1006943a 	slli	r3,r2,16
    7500:	1028d43a 	srli	r20,r2,16
    7504:	1c07883a 	add	r3,r3,r16
    7508:	90c00015 	stw	r3,0(r18)
    750c:	94800104 	addi	r18,r18,4
    7510:	9dbfee16 	blt	r19,r22,74cc <__multadd+0x48>
    7514:	a0000826 	beq	r20,zero,7538 <__multadd+0xb4>
    7518:	b8800217 	ldw	r2,8(r23)
    751c:	b080130e 	bge	r22,r2,756c <__multadd+0xe8>
    7520:	b585883a 	add	r2,r22,r22
    7524:	1085883a 	add	r2,r2,r2
    7528:	15c5883a 	add	r2,r2,r23
    752c:	b0c00044 	addi	r3,r22,1
    7530:	15000515 	stw	r20,20(r2)
    7534:	b8c00415 	stw	r3,16(r23)
    7538:	b805883a 	mov	r2,r23
    753c:	dfc00917 	ldw	ra,36(sp)
    7540:	df000817 	ldw	fp,32(sp)
    7544:	ddc00717 	ldw	r23,28(sp)
    7548:	dd800617 	ldw	r22,24(sp)
    754c:	dd400517 	ldw	r21,20(sp)
    7550:	dd000417 	ldw	r20,16(sp)
    7554:	dcc00317 	ldw	r19,12(sp)
    7558:	dc800217 	ldw	r18,8(sp)
    755c:	dc400117 	ldw	r17,4(sp)
    7560:	dc000017 	ldw	r16,0(sp)
    7564:	dec00a04 	addi	sp,sp,40
    7568:	f800283a 	ret
    756c:	b9400117 	ldw	r5,4(r23)
    7570:	e009883a 	mov	r4,fp
    7574:	29400044 	addi	r5,r5,1
    7578:	0006ce40 	call	6ce4 <_Balloc>
    757c:	b9800417 	ldw	r6,16(r23)
    7580:	b9400304 	addi	r5,r23,12
    7584:	11000304 	addi	r4,r2,12
    7588:	318d883a 	add	r6,r6,r6
    758c:	318d883a 	add	r6,r6,r6
    7590:	31800204 	addi	r6,r6,8
    7594:	1023883a 	mov	r17,r2
    7598:	000654c0 	call	654c <memcpy>
    759c:	b80b883a 	mov	r5,r23
    75a0:	e009883a 	mov	r4,fp
    75a4:	00067640 	call	6764 <_Bfree>
    75a8:	882f883a 	mov	r23,r17
    75ac:	003fdc06 	br	7520 <__multadd+0x9c>

000075b0 <__pow5mult>:
    75b0:	defffa04 	addi	sp,sp,-24
    75b4:	308000cc 	andi	r2,r6,3
    75b8:	dd000415 	stw	r20,16(sp)
    75bc:	dcc00315 	stw	r19,12(sp)
    75c0:	dc000015 	stw	r16,0(sp)
    75c4:	dfc00515 	stw	ra,20(sp)
    75c8:	dc800215 	stw	r18,8(sp)
    75cc:	dc400115 	stw	r17,4(sp)
    75d0:	3021883a 	mov	r16,r6
    75d4:	2027883a 	mov	r19,r4
    75d8:	2829883a 	mov	r20,r5
    75dc:	10002b1e 	bne	r2,zero,768c <__pow5mult+0xdc>
    75e0:	8025d0ba 	srai	r18,r16,2
    75e4:	90001b26 	beq	r18,zero,7654 <__pow5mult+0xa4>
    75e8:	9c001217 	ldw	r16,72(r19)
    75ec:	8000081e 	bne	r16,zero,7610 <__pow5mult+0x60>
    75f0:	00003006 	br	76b4 <__pow5mult+0x104>
    75f4:	800b883a 	mov	r5,r16
    75f8:	800d883a 	mov	r6,r16
    75fc:	9809883a 	mov	r4,r19
    7600:	90001426 	beq	r18,zero,7654 <__pow5mult+0xa4>
    7604:	80800017 	ldw	r2,0(r16)
    7608:	10001b26 	beq	r2,zero,7678 <__pow5mult+0xc8>
    760c:	1021883a 	mov	r16,r2
    7610:	9080004c 	andi	r2,r18,1
    7614:	1005003a 	cmpeq	r2,r2,zero
    7618:	9025d07a 	srai	r18,r18,1
    761c:	800d883a 	mov	r6,r16
    7620:	9809883a 	mov	r4,r19
    7624:	a00b883a 	mov	r5,r20
    7628:	103ff21e 	bne	r2,zero,75f4 <__pow5mult+0x44>
    762c:	00071f40 	call	71f4 <__multiply>
    7630:	a00b883a 	mov	r5,r20
    7634:	9809883a 	mov	r4,r19
    7638:	1023883a 	mov	r17,r2
    763c:	00067640 	call	6764 <_Bfree>
    7640:	8829883a 	mov	r20,r17
    7644:	800b883a 	mov	r5,r16
    7648:	800d883a 	mov	r6,r16
    764c:	9809883a 	mov	r4,r19
    7650:	903fec1e 	bne	r18,zero,7604 <__pow5mult+0x54>
    7654:	a005883a 	mov	r2,r20
    7658:	dfc00517 	ldw	ra,20(sp)
    765c:	dd000417 	ldw	r20,16(sp)
    7660:	dcc00317 	ldw	r19,12(sp)
    7664:	dc800217 	ldw	r18,8(sp)
    7668:	dc400117 	ldw	r17,4(sp)
    766c:	dc000017 	ldw	r16,0(sp)
    7670:	dec00604 	addi	sp,sp,24
    7674:	f800283a 	ret
    7678:	00071f40 	call	71f4 <__multiply>
    767c:	80800015 	stw	r2,0(r16)
    7680:	1021883a 	mov	r16,r2
    7684:	10000015 	stw	zero,0(r2)
    7688:	003fe106 	br	7610 <__pow5mult+0x60>
    768c:	1085883a 	add	r2,r2,r2
    7690:	00c00074 	movhi	r3,1
    7694:	18f6c004 	addi	r3,r3,-9472
    7698:	1085883a 	add	r2,r2,r2
    769c:	10c5883a 	add	r2,r2,r3
    76a0:	11bfff17 	ldw	r6,-4(r2)
    76a4:	000f883a 	mov	r7,zero
    76a8:	00074840 	call	7484 <__multadd>
    76ac:	1029883a 	mov	r20,r2
    76b0:	003fcb06 	br	75e0 <__pow5mult+0x30>
    76b4:	9809883a 	mov	r4,r19
    76b8:	01409c44 	movi	r5,625
    76bc:	00074480 	call	7448 <__i2b>
    76c0:	98801215 	stw	r2,72(r19)
    76c4:	1021883a 	mov	r16,r2
    76c8:	10000015 	stw	zero,0(r2)
    76cc:	003fd006 	br	7610 <__pow5mult+0x60>

000076d0 <__s2b>:
    76d0:	defff904 	addi	sp,sp,-28
    76d4:	dcc00315 	stw	r19,12(sp)
    76d8:	dc800215 	stw	r18,8(sp)
    76dc:	2827883a 	mov	r19,r5
    76e0:	2025883a 	mov	r18,r4
    76e4:	01400244 	movi	r5,9
    76e8:	39000204 	addi	r4,r7,8
    76ec:	dd000415 	stw	r20,16(sp)
    76f0:	dc400115 	stw	r17,4(sp)
    76f4:	dfc00615 	stw	ra,24(sp)
    76f8:	dd400515 	stw	r21,20(sp)
    76fc:	dc000015 	stw	r16,0(sp)
    7700:	3829883a 	mov	r20,r7
    7704:	3023883a 	mov	r17,r6
    7708:	000a6b00 	call	a6b0 <__divsi3>
    770c:	00c00044 	movi	r3,1
    7710:	1880350e 	bge	r3,r2,77e8 <__s2b+0x118>
    7714:	000b883a 	mov	r5,zero
    7718:	18c7883a 	add	r3,r3,r3
    771c:	29400044 	addi	r5,r5,1
    7720:	18bffd16 	blt	r3,r2,7718 <__s2b+0x48>
    7724:	9009883a 	mov	r4,r18
    7728:	0006ce40 	call	6ce4 <_Balloc>
    772c:	1011883a 	mov	r8,r2
    7730:	d8800717 	ldw	r2,28(sp)
    7734:	00c00044 	movi	r3,1
    7738:	01800244 	movi	r6,9
    773c:	40800515 	stw	r2,20(r8)
    7740:	40c00415 	stw	r3,16(r8)
    7744:	3440260e 	bge	r6,r17,77e0 <__s2b+0x110>
    7748:	3021883a 	mov	r16,r6
    774c:	99ab883a 	add	r21,r19,r6
    7750:	9c05883a 	add	r2,r19,r16
    7754:	11c00007 	ldb	r7,0(r2)
    7758:	400b883a 	mov	r5,r8
    775c:	9009883a 	mov	r4,r18
    7760:	39fff404 	addi	r7,r7,-48
    7764:	01800284 	movi	r6,10
    7768:	00074840 	call	7484 <__multadd>
    776c:	84000044 	addi	r16,r16,1
    7770:	1011883a 	mov	r8,r2
    7774:	8c3ff61e 	bne	r17,r16,7750 <__s2b+0x80>
    7778:	ac45883a 	add	r2,r21,r17
    777c:	117ffe04 	addi	r5,r2,-8
    7780:	880d883a 	mov	r6,r17
    7784:	35000c0e 	bge	r6,r20,77b8 <__s2b+0xe8>
    7788:	a185c83a 	sub	r2,r20,r6
    778c:	2821883a 	mov	r16,r5
    7790:	28a3883a 	add	r17,r5,r2
    7794:	81c00007 	ldb	r7,0(r16)
    7798:	400b883a 	mov	r5,r8
    779c:	9009883a 	mov	r4,r18
    77a0:	39fff404 	addi	r7,r7,-48
    77a4:	01800284 	movi	r6,10
    77a8:	00074840 	call	7484 <__multadd>
    77ac:	84000044 	addi	r16,r16,1
    77b0:	1011883a 	mov	r8,r2
    77b4:	847ff71e 	bne	r16,r17,7794 <__s2b+0xc4>
    77b8:	4005883a 	mov	r2,r8
    77bc:	dfc00617 	ldw	ra,24(sp)
    77c0:	dd400517 	ldw	r21,20(sp)
    77c4:	dd000417 	ldw	r20,16(sp)
    77c8:	dcc00317 	ldw	r19,12(sp)
    77cc:	dc800217 	ldw	r18,8(sp)
    77d0:	dc400117 	ldw	r17,4(sp)
    77d4:	dc000017 	ldw	r16,0(sp)
    77d8:	dec00704 	addi	sp,sp,28
    77dc:	f800283a 	ret
    77e0:	99400284 	addi	r5,r19,10
    77e4:	003fe706 	br	7784 <__s2b+0xb4>
    77e8:	000b883a 	mov	r5,zero
    77ec:	003fcd06 	br	7724 <__s2b+0x54>

000077f0 <putc>:
    77f0:	defffc04 	addi	sp,sp,-16
    77f4:	dc800215 	stw	r18,8(sp)
    77f8:	04800074 	movhi	r18,1
    77fc:	94bd9a04 	addi	r18,r18,-2456
    7800:	90c00017 	ldw	r3,0(r18)
    7804:	dc400115 	stw	r17,4(sp)
    7808:	dc000015 	stw	r16,0(sp)
    780c:	dfc00315 	stw	ra,12(sp)
    7810:	2023883a 	mov	r17,r4
    7814:	2821883a 	mov	r16,r5
    7818:	18000226 	beq	r3,zero,7824 <putc+0x34>
    781c:	18800e17 	ldw	r2,56(r3)
    7820:	10001126 	beq	r2,zero,7868 <putc+0x78>
    7824:	80800217 	ldw	r2,8(r16)
    7828:	10ffffc4 	addi	r3,r2,-1
    782c:	80c00215 	stw	r3,8(r16)
    7830:	18001316 	blt	r3,zero,7880 <putc+0x90>
    7834:	80800017 	ldw	r2,0(r16)
    7838:	14400005 	stb	r17,0(r2)
    783c:	80c00017 	ldw	r3,0(r16)
    7840:	18800044 	addi	r2,r3,1
    7844:	18c00003 	ldbu	r3,0(r3)
    7848:	80800015 	stw	r2,0(r16)
    784c:	1805883a 	mov	r2,r3
    7850:	dfc00317 	ldw	ra,12(sp)
    7854:	dc800217 	ldw	r18,8(sp)
    7858:	dc400117 	ldw	r17,4(sp)
    785c:	dc000017 	ldw	r16,0(sp)
    7860:	dec00404 	addi	sp,sp,16
    7864:	f800283a 	ret
    7868:	1809883a 	mov	r4,r3
    786c:	00055280 	call	5528 <__sinit>
    7870:	80800217 	ldw	r2,8(r16)
    7874:	10ffffc4 	addi	r3,r2,-1
    7878:	80c00215 	stw	r3,8(r16)
    787c:	183fed0e 	bge	r3,zero,7834 <putc+0x44>
    7880:	80800617 	ldw	r2,24(r16)
    7884:	18800f16 	blt	r3,r2,78c4 <putc+0xd4>
    7888:	80800017 	ldw	r2,0(r16)
    788c:	14400005 	stb	r17,0(r2)
    7890:	81000017 	ldw	r4,0(r16)
    7894:	00800284 	movi	r2,10
    7898:	20c00003 	ldbu	r3,0(r4)
    789c:	18801226 	beq	r3,r2,78e8 <putc+0xf8>
    78a0:	20800044 	addi	r2,r4,1
    78a4:	80800015 	stw	r2,0(r16)
    78a8:	1805883a 	mov	r2,r3
    78ac:	dfc00317 	ldw	ra,12(sp)
    78b0:	dc800217 	ldw	r18,8(sp)
    78b4:	dc400117 	ldw	r17,4(sp)
    78b8:	dc000017 	ldw	r16,0(sp)
    78bc:	dec00404 	addi	sp,sp,16
    78c0:	f800283a 	ret
    78c4:	91000017 	ldw	r4,0(r18)
    78c8:	880b883a 	mov	r5,r17
    78cc:	800d883a 	mov	r6,r16
    78d0:	dfc00317 	ldw	ra,12(sp)
    78d4:	dc800217 	ldw	r18,8(sp)
    78d8:	dc400117 	ldw	r17,4(sp)
    78dc:	dc000017 	ldw	r16,0(sp)
    78e0:	dec00404 	addi	sp,sp,16
    78e4:	00082481 	jmpi	8248 <__swbuf_r>
    78e8:	91000017 	ldw	r4,0(r18)
    78ec:	180b883a 	mov	r5,r3
    78f0:	003ff606 	br	78cc <putc+0xdc>

000078f4 <_putc_r>:
    78f4:	defffc04 	addi	sp,sp,-16
    78f8:	dc400215 	stw	r17,8(sp)
    78fc:	dc000115 	stw	r16,4(sp)
    7900:	dfc00315 	stw	ra,12(sp)
    7904:	2021883a 	mov	r16,r4
    7908:	2823883a 	mov	r17,r5
    790c:	20000226 	beq	r4,zero,7918 <_putc_r+0x24>
    7910:	20800e17 	ldw	r2,56(r4)
    7914:	10001026 	beq	r2,zero,7958 <_putc_r+0x64>
    7918:	30800217 	ldw	r2,8(r6)
    791c:	10ffffc4 	addi	r3,r2,-1
    7920:	30c00215 	stw	r3,8(r6)
    7924:	18001316 	blt	r3,zero,7974 <_putc_r+0x80>
    7928:	30800017 	ldw	r2,0(r6)
    792c:	14400005 	stb	r17,0(r2)
    7930:	30c00017 	ldw	r3,0(r6)
    7934:	18800044 	addi	r2,r3,1
    7938:	18c00003 	ldbu	r3,0(r3)
    793c:	30800015 	stw	r2,0(r6)
    7940:	1805883a 	mov	r2,r3
    7944:	dfc00317 	ldw	ra,12(sp)
    7948:	dc400217 	ldw	r17,8(sp)
    794c:	dc000117 	ldw	r16,4(sp)
    7950:	dec00404 	addi	sp,sp,16
    7954:	f800283a 	ret
    7958:	d9800015 	stw	r6,0(sp)
    795c:	00055280 	call	5528 <__sinit>
    7960:	d9800017 	ldw	r6,0(sp)
    7964:	30800217 	ldw	r2,8(r6)
    7968:	10ffffc4 	addi	r3,r2,-1
    796c:	30c00215 	stw	r3,8(r6)
    7970:	183fed0e 	bge	r3,zero,7928 <_putc_r+0x34>
    7974:	30800617 	ldw	r2,24(r6)
    7978:	18800e16 	blt	r3,r2,79b4 <_putc_r+0xc0>
    797c:	30800017 	ldw	r2,0(r6)
    7980:	14400005 	stb	r17,0(r2)
    7984:	31000017 	ldw	r4,0(r6)
    7988:	00800284 	movi	r2,10
    798c:	20c00003 	ldbu	r3,0(r4)
    7990:	18800f26 	beq	r3,r2,79d0 <_putc_r+0xdc>
    7994:	20800044 	addi	r2,r4,1
    7998:	30800015 	stw	r2,0(r6)
    799c:	1805883a 	mov	r2,r3
    79a0:	dfc00317 	ldw	ra,12(sp)
    79a4:	dc400217 	ldw	r17,8(sp)
    79a8:	dc000117 	ldw	r16,4(sp)
    79ac:	dec00404 	addi	sp,sp,16
    79b0:	f800283a 	ret
    79b4:	8009883a 	mov	r4,r16
    79b8:	880b883a 	mov	r5,r17
    79bc:	dfc00317 	ldw	ra,12(sp)
    79c0:	dc400217 	ldw	r17,8(sp)
    79c4:	dc000117 	ldw	r16,4(sp)
    79c8:	dec00404 	addi	sp,sp,16
    79cc:	00082481 	jmpi	8248 <__swbuf_r>
    79d0:	8009883a 	mov	r4,r16
    79d4:	180b883a 	mov	r5,r3
    79d8:	003ff806 	br	79bc <_putc_r+0xc8>

000079dc <_realloc_r>:
    79dc:	defff404 	addi	sp,sp,-48
    79e0:	dd800815 	stw	r22,32(sp)
    79e4:	dc800415 	stw	r18,16(sp)
    79e8:	dc400315 	stw	r17,12(sp)
    79ec:	dfc00b15 	stw	ra,44(sp)
    79f0:	df000a15 	stw	fp,40(sp)
    79f4:	ddc00915 	stw	r23,36(sp)
    79f8:	dd400715 	stw	r21,28(sp)
    79fc:	dd000615 	stw	r20,24(sp)
    7a00:	dcc00515 	stw	r19,20(sp)
    7a04:	dc000215 	stw	r16,8(sp)
    7a08:	2825883a 	mov	r18,r5
    7a0c:	3023883a 	mov	r17,r6
    7a10:	202d883a 	mov	r22,r4
    7a14:	2800c926 	beq	r5,zero,7d3c <_realloc_r+0x360>
    7a18:	000b6b80 	call	b6b8 <__malloc_lock>
    7a1c:	943ffe04 	addi	r16,r18,-8
    7a20:	88c002c4 	addi	r3,r17,11
    7a24:	00800584 	movi	r2,22
    7a28:	82000117 	ldw	r8,4(r16)
    7a2c:	10c01b2e 	bgeu	r2,r3,7a9c <_realloc_r+0xc0>
    7a30:	00bffe04 	movi	r2,-8
    7a34:	188e703a 	and	r7,r3,r2
    7a38:	3839883a 	mov	fp,r7
    7a3c:	38001a16 	blt	r7,zero,7aa8 <_realloc_r+0xcc>
    7a40:	e4401936 	bltu	fp,r17,7aa8 <_realloc_r+0xcc>
    7a44:	013fff04 	movi	r4,-4
    7a48:	4126703a 	and	r19,r8,r4
    7a4c:	99c02616 	blt	r19,r7,7ae8 <_realloc_r+0x10c>
    7a50:	802b883a 	mov	r21,r16
    7a54:	9829883a 	mov	r20,r19
    7a58:	84000204 	addi	r16,r16,8
    7a5c:	a80f883a 	mov	r7,r21
    7a60:	a70dc83a 	sub	r6,r20,fp
    7a64:	008003c4 	movi	r2,15
    7a68:	1180c136 	bltu	r2,r6,7d70 <_realloc_r+0x394>
    7a6c:	38800117 	ldw	r2,4(r7)
    7a70:	a549883a 	add	r4,r20,r21
    7a74:	1080004c 	andi	r2,r2,1
    7a78:	a084b03a 	or	r2,r20,r2
    7a7c:	38800115 	stw	r2,4(r7)
    7a80:	20c00117 	ldw	r3,4(r4)
    7a84:	18c00054 	ori	r3,r3,1
    7a88:	20c00115 	stw	r3,4(r4)
    7a8c:	b009883a 	mov	r4,r22
    7a90:	000b6d80 	call	b6d8 <__malloc_unlock>
    7a94:	8023883a 	mov	r17,r16
    7a98:	00000606 	br	7ab4 <_realloc_r+0xd8>
    7a9c:	01c00404 	movi	r7,16
    7aa0:	3839883a 	mov	fp,r7
    7aa4:	e47fe72e 	bgeu	fp,r17,7a44 <_realloc_r+0x68>
    7aa8:	00800304 	movi	r2,12
    7aac:	0023883a 	mov	r17,zero
    7ab0:	b0800015 	stw	r2,0(r22)
    7ab4:	8805883a 	mov	r2,r17
    7ab8:	dfc00b17 	ldw	ra,44(sp)
    7abc:	df000a17 	ldw	fp,40(sp)
    7ac0:	ddc00917 	ldw	r23,36(sp)
    7ac4:	dd800817 	ldw	r22,32(sp)
    7ac8:	dd400717 	ldw	r21,28(sp)
    7acc:	dd000617 	ldw	r20,24(sp)
    7ad0:	dcc00517 	ldw	r19,20(sp)
    7ad4:	dc800417 	ldw	r18,16(sp)
    7ad8:	dc400317 	ldw	r17,12(sp)
    7adc:	dc000217 	ldw	r16,8(sp)
    7ae0:	dec00c04 	addi	sp,sp,48
    7ae4:	f800283a 	ret
    7ae8:	00800074 	movhi	r2,1
    7aec:	10b81304 	addi	r2,r2,-8116
    7af0:	12400217 	ldw	r9,8(r2)
    7af4:	84cd883a 	add	r6,r16,r19
    7af8:	802b883a 	mov	r21,r16
    7afc:	3240b926 	beq	r6,r9,7de4 <_realloc_r+0x408>
    7b00:	31400117 	ldw	r5,4(r6)
    7b04:	00bfff84 	movi	r2,-2
    7b08:	2884703a 	and	r2,r5,r2
    7b0c:	1185883a 	add	r2,r2,r6
    7b10:	10c00117 	ldw	r3,4(r2)
    7b14:	18c0004c 	andi	r3,r3,1
    7b18:	1807003a 	cmpeq	r3,r3,zero
    7b1c:	1800a326 	beq	r3,zero,7dac <_realloc_r+0x3d0>
    7b20:	2908703a 	and	r4,r5,r4
    7b24:	9929883a 	add	r20,r19,r4
    7b28:	a1c0a30e 	bge	r20,r7,7db8 <_realloc_r+0x3dc>
    7b2c:	4080004c 	andi	r2,r8,1
    7b30:	1000551e 	bne	r2,zero,7c88 <_realloc_r+0x2ac>
    7b34:	80800017 	ldw	r2,0(r16)
    7b38:	80afc83a 	sub	r23,r16,r2
    7b3c:	b8c00117 	ldw	r3,4(r23)
    7b40:	00bfff04 	movi	r2,-4
    7b44:	1884703a 	and	r2,r3,r2
    7b48:	30002e26 	beq	r6,zero,7c04 <_realloc_r+0x228>
    7b4c:	3240b926 	beq	r6,r9,7e34 <_realloc_r+0x458>
    7b50:	98a9883a 	add	r20,r19,r2
    7b54:	2509883a 	add	r4,r4,r20
    7b58:	d9000015 	stw	r4,0(sp)
    7b5c:	21c02a16 	blt	r4,r7,7c08 <_realloc_r+0x22c>
    7b60:	30800317 	ldw	r2,12(r6)
    7b64:	30c00217 	ldw	r3,8(r6)
    7b68:	01400904 	movi	r5,36
    7b6c:	99bfff04 	addi	r6,r19,-4
    7b70:	18800315 	stw	r2,12(r3)
    7b74:	10c00215 	stw	r3,8(r2)
    7b78:	b9000317 	ldw	r4,12(r23)
    7b7c:	b8800217 	ldw	r2,8(r23)
    7b80:	b82b883a 	mov	r21,r23
    7b84:	bc000204 	addi	r16,r23,8
    7b88:	20800215 	stw	r2,8(r4)
    7b8c:	11000315 	stw	r4,12(r2)
    7b90:	2980e436 	bltu	r5,r6,7f24 <_realloc_r+0x548>
    7b94:	008004c4 	movi	r2,19
    7b98:	9009883a 	mov	r4,r18
    7b9c:	8011883a 	mov	r8,r16
    7ba0:	11800f2e 	bgeu	r2,r6,7be0 <_realloc_r+0x204>
    7ba4:	90800017 	ldw	r2,0(r18)
    7ba8:	ba000404 	addi	r8,r23,16
    7bac:	91000204 	addi	r4,r18,8
    7bb0:	b8800215 	stw	r2,8(r23)
    7bb4:	90c00117 	ldw	r3,4(r18)
    7bb8:	008006c4 	movi	r2,27
    7bbc:	b8c00315 	stw	r3,12(r23)
    7bc0:	1180072e 	bgeu	r2,r6,7be0 <_realloc_r+0x204>
    7bc4:	90c00217 	ldw	r3,8(r18)
    7bc8:	ba000604 	addi	r8,r23,24
    7bcc:	91000404 	addi	r4,r18,16
    7bd0:	b8c00415 	stw	r3,16(r23)
    7bd4:	90800317 	ldw	r2,12(r18)
    7bd8:	b8800515 	stw	r2,20(r23)
    7bdc:	3140e726 	beq	r6,r5,7f7c <_realloc_r+0x5a0>
    7be0:	20800017 	ldw	r2,0(r4)
    7be4:	dd000017 	ldw	r20,0(sp)
    7be8:	b80f883a 	mov	r7,r23
    7bec:	40800015 	stw	r2,0(r8)
    7bf0:	20c00117 	ldw	r3,4(r4)
    7bf4:	40c00115 	stw	r3,4(r8)
    7bf8:	20800217 	ldw	r2,8(r4)
    7bfc:	40800215 	stw	r2,8(r8)
    7c00:	003f9706 	br	7a60 <_realloc_r+0x84>
    7c04:	98a9883a 	add	r20,r19,r2
    7c08:	a1c01f16 	blt	r20,r7,7c88 <_realloc_r+0x2ac>
    7c0c:	b8c00317 	ldw	r3,12(r23)
    7c10:	b8800217 	ldw	r2,8(r23)
    7c14:	99bfff04 	addi	r6,r19,-4
    7c18:	01400904 	movi	r5,36
    7c1c:	b82b883a 	mov	r21,r23
    7c20:	18800215 	stw	r2,8(r3)
    7c24:	10c00315 	stw	r3,12(r2)
    7c28:	bc000204 	addi	r16,r23,8
    7c2c:	2980c336 	bltu	r5,r6,7f3c <_realloc_r+0x560>
    7c30:	008004c4 	movi	r2,19
    7c34:	9009883a 	mov	r4,r18
    7c38:	8011883a 	mov	r8,r16
    7c3c:	11800f2e 	bgeu	r2,r6,7c7c <_realloc_r+0x2a0>
    7c40:	90800017 	ldw	r2,0(r18)
    7c44:	ba000404 	addi	r8,r23,16
    7c48:	91000204 	addi	r4,r18,8
    7c4c:	b8800215 	stw	r2,8(r23)
    7c50:	90c00117 	ldw	r3,4(r18)
    7c54:	008006c4 	movi	r2,27
    7c58:	b8c00315 	stw	r3,12(r23)
    7c5c:	1180072e 	bgeu	r2,r6,7c7c <_realloc_r+0x2a0>
    7c60:	90c00217 	ldw	r3,8(r18)
    7c64:	ba000604 	addi	r8,r23,24
    7c68:	91000404 	addi	r4,r18,16
    7c6c:	b8c00415 	stw	r3,16(r23)
    7c70:	90800317 	ldw	r2,12(r18)
    7c74:	b8800515 	stw	r2,20(r23)
    7c78:	3140c726 	beq	r6,r5,7f98 <_realloc_r+0x5bc>
    7c7c:	20800017 	ldw	r2,0(r4)
    7c80:	b80f883a 	mov	r7,r23
    7c84:	003fd906 	br	7bec <_realloc_r+0x210>
    7c88:	880b883a 	mov	r5,r17
    7c8c:	b009883a 	mov	r4,r22
    7c90:	0000ef40 	call	ef4 <_malloc_r>
    7c94:	1023883a 	mov	r17,r2
    7c98:	10002526 	beq	r2,zero,7d30 <_realloc_r+0x354>
    7c9c:	80800117 	ldw	r2,4(r16)
    7ca0:	00ffff84 	movi	r3,-2
    7ca4:	893ffe04 	addi	r4,r17,-8
    7ca8:	10c4703a 	and	r2,r2,r3
    7cac:	8085883a 	add	r2,r16,r2
    7cb0:	20809526 	beq	r4,r2,7f08 <_realloc_r+0x52c>
    7cb4:	99bfff04 	addi	r6,r19,-4
    7cb8:	01c00904 	movi	r7,36
    7cbc:	39804536 	bltu	r7,r6,7dd4 <_realloc_r+0x3f8>
    7cc0:	008004c4 	movi	r2,19
    7cc4:	9009883a 	mov	r4,r18
    7cc8:	880b883a 	mov	r5,r17
    7ccc:	11800f2e 	bgeu	r2,r6,7d0c <_realloc_r+0x330>
    7cd0:	90800017 	ldw	r2,0(r18)
    7cd4:	89400204 	addi	r5,r17,8
    7cd8:	91000204 	addi	r4,r18,8
    7cdc:	88800015 	stw	r2,0(r17)
    7ce0:	90c00117 	ldw	r3,4(r18)
    7ce4:	008006c4 	movi	r2,27
    7ce8:	88c00115 	stw	r3,4(r17)
    7cec:	1180072e 	bgeu	r2,r6,7d0c <_realloc_r+0x330>
    7cf0:	90c00217 	ldw	r3,8(r18)
    7cf4:	89400404 	addi	r5,r17,16
    7cf8:	91000404 	addi	r4,r18,16
    7cfc:	88c00215 	stw	r3,8(r17)
    7d00:	90800317 	ldw	r2,12(r18)
    7d04:	88800315 	stw	r2,12(r17)
    7d08:	31c09126 	beq	r6,r7,7f50 <_realloc_r+0x574>
    7d0c:	20800017 	ldw	r2,0(r4)
    7d10:	28800015 	stw	r2,0(r5)
    7d14:	20c00117 	ldw	r3,4(r4)
    7d18:	28c00115 	stw	r3,4(r5)
    7d1c:	20800217 	ldw	r2,8(r4)
    7d20:	28800215 	stw	r2,8(r5)
    7d24:	900b883a 	mov	r5,r18
    7d28:	b009883a 	mov	r4,r22
    7d2c:	00058e00 	call	58e0 <_free_r>
    7d30:	b009883a 	mov	r4,r22
    7d34:	000b6d80 	call	b6d8 <__malloc_unlock>
    7d38:	003f5e06 	br	7ab4 <_realloc_r+0xd8>
    7d3c:	300b883a 	mov	r5,r6
    7d40:	dfc00b17 	ldw	ra,44(sp)
    7d44:	df000a17 	ldw	fp,40(sp)
    7d48:	ddc00917 	ldw	r23,36(sp)
    7d4c:	dd800817 	ldw	r22,32(sp)
    7d50:	dd400717 	ldw	r21,28(sp)
    7d54:	dd000617 	ldw	r20,24(sp)
    7d58:	dcc00517 	ldw	r19,20(sp)
    7d5c:	dc800417 	ldw	r18,16(sp)
    7d60:	dc400317 	ldw	r17,12(sp)
    7d64:	dc000217 	ldw	r16,8(sp)
    7d68:	dec00c04 	addi	sp,sp,48
    7d6c:	0000ef41 	jmpi	ef4 <_malloc_r>
    7d70:	38800117 	ldw	r2,4(r7)
    7d74:	e54b883a 	add	r5,fp,r21
    7d78:	31000054 	ori	r4,r6,1
    7d7c:	1080004c 	andi	r2,r2,1
    7d80:	1704b03a 	or	r2,r2,fp
    7d84:	38800115 	stw	r2,4(r7)
    7d88:	29000115 	stw	r4,4(r5)
    7d8c:	2987883a 	add	r3,r5,r6
    7d90:	18800117 	ldw	r2,4(r3)
    7d94:	29400204 	addi	r5,r5,8
    7d98:	b009883a 	mov	r4,r22
    7d9c:	10800054 	ori	r2,r2,1
    7da0:	18800115 	stw	r2,4(r3)
    7da4:	00058e00 	call	58e0 <_free_r>
    7da8:	003f3806 	br	7a8c <_realloc_r+0xb0>
    7dac:	000d883a 	mov	r6,zero
    7db0:	0009883a 	mov	r4,zero
    7db4:	003f5d06 	br	7b2c <_realloc_r+0x150>
    7db8:	30c00217 	ldw	r3,8(r6)
    7dbc:	30800317 	ldw	r2,12(r6)
    7dc0:	800f883a 	mov	r7,r16
    7dc4:	84000204 	addi	r16,r16,8
    7dc8:	10c00215 	stw	r3,8(r2)
    7dcc:	18800315 	stw	r2,12(r3)
    7dd0:	003f2306 	br	7a60 <_realloc_r+0x84>
    7dd4:	8809883a 	mov	r4,r17
    7dd8:	900b883a 	mov	r5,r18
    7ddc:	00065ec0 	call	65ec <memmove>
    7de0:	003fd006 	br	7d24 <_realloc_r+0x348>
    7de4:	30800117 	ldw	r2,4(r6)
    7de8:	e0c00404 	addi	r3,fp,16
    7dec:	1108703a 	and	r4,r2,r4
    7df0:	9905883a 	add	r2,r19,r4
    7df4:	10ff4d16 	blt	r2,r3,7b2c <_realloc_r+0x150>
    7df8:	1705c83a 	sub	r2,r2,fp
    7dfc:	870b883a 	add	r5,r16,fp
    7e00:	10800054 	ori	r2,r2,1
    7e04:	28800115 	stw	r2,4(r5)
    7e08:	80c00117 	ldw	r3,4(r16)
    7e0c:	00800074 	movhi	r2,1
    7e10:	10b81304 	addi	r2,r2,-8116
    7e14:	b009883a 	mov	r4,r22
    7e18:	18c0004c 	andi	r3,r3,1
    7e1c:	e0c6b03a 	or	r3,fp,r3
    7e20:	11400215 	stw	r5,8(r2)
    7e24:	80c00115 	stw	r3,4(r16)
    7e28:	000b6d80 	call	b6d8 <__malloc_unlock>
    7e2c:	84400204 	addi	r17,r16,8
    7e30:	003f2006 	br	7ab4 <_realloc_r+0xd8>
    7e34:	98a9883a 	add	r20,r19,r2
    7e38:	2509883a 	add	r4,r4,r20
    7e3c:	e0800404 	addi	r2,fp,16
    7e40:	d9000115 	stw	r4,4(sp)
    7e44:	20bf7016 	blt	r4,r2,7c08 <_realloc_r+0x22c>
    7e48:	b8c00317 	ldw	r3,12(r23)
    7e4c:	b8800217 	ldw	r2,8(r23)
    7e50:	99bfff04 	addi	r6,r19,-4
    7e54:	01400904 	movi	r5,36
    7e58:	18800215 	stw	r2,8(r3)
    7e5c:	10c00315 	stw	r3,12(r2)
    7e60:	bc400204 	addi	r17,r23,8
    7e64:	29804136 	bltu	r5,r6,7f6c <_realloc_r+0x590>
    7e68:	008004c4 	movi	r2,19
    7e6c:	9009883a 	mov	r4,r18
    7e70:	880f883a 	mov	r7,r17
    7e74:	11800f2e 	bgeu	r2,r6,7eb4 <_realloc_r+0x4d8>
    7e78:	90800017 	ldw	r2,0(r18)
    7e7c:	b9c00404 	addi	r7,r23,16
    7e80:	91000204 	addi	r4,r18,8
    7e84:	b8800215 	stw	r2,8(r23)
    7e88:	90c00117 	ldw	r3,4(r18)
    7e8c:	008006c4 	movi	r2,27
    7e90:	b8c00315 	stw	r3,12(r23)
    7e94:	1180072e 	bgeu	r2,r6,7eb4 <_realloc_r+0x4d8>
    7e98:	90c00217 	ldw	r3,8(r18)
    7e9c:	b9c00604 	addi	r7,r23,24
    7ea0:	91000404 	addi	r4,r18,16
    7ea4:	b8c00415 	stw	r3,16(r23)
    7ea8:	90800317 	ldw	r2,12(r18)
    7eac:	b8800515 	stw	r2,20(r23)
    7eb0:	31404026 	beq	r6,r5,7fb4 <_realloc_r+0x5d8>
    7eb4:	20800017 	ldw	r2,0(r4)
    7eb8:	38800015 	stw	r2,0(r7)
    7ebc:	20c00117 	ldw	r3,4(r4)
    7ec0:	38c00115 	stw	r3,4(r7)
    7ec4:	20800217 	ldw	r2,8(r4)
    7ec8:	38800215 	stw	r2,8(r7)
    7ecc:	d8c00117 	ldw	r3,4(sp)
    7ed0:	bf0b883a 	add	r5,r23,fp
    7ed4:	b009883a 	mov	r4,r22
    7ed8:	1f05c83a 	sub	r2,r3,fp
    7edc:	10800054 	ori	r2,r2,1
    7ee0:	28800115 	stw	r2,4(r5)
    7ee4:	b8c00117 	ldw	r3,4(r23)
    7ee8:	00800074 	movhi	r2,1
    7eec:	10b81304 	addi	r2,r2,-8116
    7ef0:	11400215 	stw	r5,8(r2)
    7ef4:	18c0004c 	andi	r3,r3,1
    7ef8:	e0c6b03a 	or	r3,fp,r3
    7efc:	b8c00115 	stw	r3,4(r23)
    7f00:	000b6d80 	call	b6d8 <__malloc_unlock>
    7f04:	003eeb06 	br	7ab4 <_realloc_r+0xd8>
    7f08:	20800117 	ldw	r2,4(r4)
    7f0c:	00ffff04 	movi	r3,-4
    7f10:	800f883a 	mov	r7,r16
    7f14:	10c4703a 	and	r2,r2,r3
    7f18:	98a9883a 	add	r20,r19,r2
    7f1c:	84000204 	addi	r16,r16,8
    7f20:	003ecf06 	br	7a60 <_realloc_r+0x84>
    7f24:	900b883a 	mov	r5,r18
    7f28:	8009883a 	mov	r4,r16
    7f2c:	00065ec0 	call	65ec <memmove>
    7f30:	dd000017 	ldw	r20,0(sp)
    7f34:	b80f883a 	mov	r7,r23
    7f38:	003ec906 	br	7a60 <_realloc_r+0x84>
    7f3c:	900b883a 	mov	r5,r18
    7f40:	8009883a 	mov	r4,r16
    7f44:	00065ec0 	call	65ec <memmove>
    7f48:	b80f883a 	mov	r7,r23
    7f4c:	003ec406 	br	7a60 <_realloc_r+0x84>
    7f50:	90c00417 	ldw	r3,16(r18)
    7f54:	89400604 	addi	r5,r17,24
    7f58:	91000604 	addi	r4,r18,24
    7f5c:	88c00415 	stw	r3,16(r17)
    7f60:	90800517 	ldw	r2,20(r18)
    7f64:	88800515 	stw	r2,20(r17)
    7f68:	003f6806 	br	7d0c <_realloc_r+0x330>
    7f6c:	900b883a 	mov	r5,r18
    7f70:	8809883a 	mov	r4,r17
    7f74:	00065ec0 	call	65ec <memmove>
    7f78:	003fd406 	br	7ecc <_realloc_r+0x4f0>
    7f7c:	90c00417 	ldw	r3,16(r18)
    7f80:	91000604 	addi	r4,r18,24
    7f84:	ba000804 	addi	r8,r23,32
    7f88:	b8c00615 	stw	r3,24(r23)
    7f8c:	90800517 	ldw	r2,20(r18)
    7f90:	b8800715 	stw	r2,28(r23)
    7f94:	003f1206 	br	7be0 <_realloc_r+0x204>
    7f98:	90c00417 	ldw	r3,16(r18)
    7f9c:	91000604 	addi	r4,r18,24
    7fa0:	ba000804 	addi	r8,r23,32
    7fa4:	b8c00615 	stw	r3,24(r23)
    7fa8:	90800517 	ldw	r2,20(r18)
    7fac:	b8800715 	stw	r2,28(r23)
    7fb0:	003f3206 	br	7c7c <_realloc_r+0x2a0>
    7fb4:	90c00417 	ldw	r3,16(r18)
    7fb8:	91000604 	addi	r4,r18,24
    7fbc:	b9c00804 	addi	r7,r23,32
    7fc0:	b8c00615 	stw	r3,24(r23)
    7fc4:	90800517 	ldw	r2,20(r18)
    7fc8:	b8800715 	stw	r2,28(r23)
    7fcc:	003fb906 	br	7eb4 <_realloc_r+0x4d8>

00007fd0 <__isinfd>:
    7fd0:	200d883a 	mov	r6,r4
    7fd4:	0109c83a 	sub	r4,zero,r4
    7fd8:	2188b03a 	or	r4,r4,r6
    7fdc:	2008d7fa 	srli	r4,r4,31
    7fe0:	00a00034 	movhi	r2,32768
    7fe4:	10bfffc4 	addi	r2,r2,-1
    7fe8:	1144703a 	and	r2,r2,r5
    7fec:	2088b03a 	or	r4,r4,r2
    7ff0:	009ffc34 	movhi	r2,32752
    7ff4:	1105c83a 	sub	r2,r2,r4
    7ff8:	0087c83a 	sub	r3,zero,r2
    7ffc:	10c4b03a 	or	r2,r2,r3
    8000:	1004d7fa 	srli	r2,r2,31
    8004:	00c00044 	movi	r3,1
    8008:	1885c83a 	sub	r2,r3,r2
    800c:	f800283a 	ret

00008010 <__isnand>:
    8010:	200d883a 	mov	r6,r4
    8014:	0109c83a 	sub	r4,zero,r4
    8018:	2188b03a 	or	r4,r4,r6
    801c:	2008d7fa 	srli	r4,r4,31
    8020:	00a00034 	movhi	r2,32768
    8024:	10bfffc4 	addi	r2,r2,-1
    8028:	1144703a 	and	r2,r2,r5
    802c:	2088b03a 	or	r4,r4,r2
    8030:	009ffc34 	movhi	r2,32752
    8034:	1105c83a 	sub	r2,r2,r4
    8038:	1004d7fa 	srli	r2,r2,31
    803c:	f800283a 	ret

00008040 <__sclose>:
    8040:	2940038f 	ldh	r5,14(r5)
    8044:	00084d41 	jmpi	84d4 <_close_r>

00008048 <__sseek>:
    8048:	defffe04 	addi	sp,sp,-8
    804c:	dc000015 	stw	r16,0(sp)
    8050:	2821883a 	mov	r16,r5
    8054:	2940038f 	ldh	r5,14(r5)
    8058:	dfc00115 	stw	ra,4(sp)
    805c:	000874c0 	call	874c <_lseek_r>
    8060:	1007883a 	mov	r3,r2
    8064:	00bfffc4 	movi	r2,-1
    8068:	18800926 	beq	r3,r2,8090 <__sseek+0x48>
    806c:	8080030b 	ldhu	r2,12(r16)
    8070:	80c01415 	stw	r3,80(r16)
    8074:	10840014 	ori	r2,r2,4096
    8078:	8080030d 	sth	r2,12(r16)
    807c:	1805883a 	mov	r2,r3
    8080:	dfc00117 	ldw	ra,4(sp)
    8084:	dc000017 	ldw	r16,0(sp)
    8088:	dec00204 	addi	sp,sp,8
    808c:	f800283a 	ret
    8090:	8080030b 	ldhu	r2,12(r16)
    8094:	10bbffcc 	andi	r2,r2,61439
    8098:	8080030d 	sth	r2,12(r16)
    809c:	1805883a 	mov	r2,r3
    80a0:	dfc00117 	ldw	ra,4(sp)
    80a4:	dc000017 	ldw	r16,0(sp)
    80a8:	dec00204 	addi	sp,sp,8
    80ac:	f800283a 	ret

000080b0 <__swrite>:
    80b0:	2880030b 	ldhu	r2,12(r5)
    80b4:	defffb04 	addi	sp,sp,-20
    80b8:	dcc00315 	stw	r19,12(sp)
    80bc:	1080400c 	andi	r2,r2,256
    80c0:	dc800215 	stw	r18,8(sp)
    80c4:	dc400115 	stw	r17,4(sp)
    80c8:	dc000015 	stw	r16,0(sp)
    80cc:	3027883a 	mov	r19,r6
    80d0:	3825883a 	mov	r18,r7
    80d4:	dfc00415 	stw	ra,16(sp)
    80d8:	2821883a 	mov	r16,r5
    80dc:	000d883a 	mov	r6,zero
    80e0:	01c00084 	movi	r7,2
    80e4:	2023883a 	mov	r17,r4
    80e8:	10000226 	beq	r2,zero,80f4 <__swrite+0x44>
    80ec:	2940038f 	ldh	r5,14(r5)
    80f0:	000874c0 	call	874c <_lseek_r>
    80f4:	8080030b 	ldhu	r2,12(r16)
    80f8:	8140038f 	ldh	r5,14(r16)
    80fc:	8809883a 	mov	r4,r17
    8100:	10bbffcc 	andi	r2,r2,61439
    8104:	980d883a 	mov	r6,r19
    8108:	900f883a 	mov	r7,r18
    810c:	8080030d 	sth	r2,12(r16)
    8110:	dfc00417 	ldw	ra,16(sp)
    8114:	dcc00317 	ldw	r19,12(sp)
    8118:	dc800217 	ldw	r18,8(sp)
    811c:	dc400117 	ldw	r17,4(sp)
    8120:	dc000017 	ldw	r16,0(sp)
    8124:	dec00504 	addi	sp,sp,20
    8128:	00083941 	jmpi	8394 <_write_r>

0000812c <__sread>:
    812c:	defffe04 	addi	sp,sp,-8
    8130:	dc000015 	stw	r16,0(sp)
    8134:	2821883a 	mov	r16,r5
    8138:	2940038f 	ldh	r5,14(r5)
    813c:	dfc00115 	stw	ra,4(sp)
    8140:	00087c40 	call	87c4 <_read_r>
    8144:	1007883a 	mov	r3,r2
    8148:	10000816 	blt	r2,zero,816c <__sread+0x40>
    814c:	80801417 	ldw	r2,80(r16)
    8150:	10c5883a 	add	r2,r2,r3
    8154:	80801415 	stw	r2,80(r16)
    8158:	1805883a 	mov	r2,r3
    815c:	dfc00117 	ldw	ra,4(sp)
    8160:	dc000017 	ldw	r16,0(sp)
    8164:	dec00204 	addi	sp,sp,8
    8168:	f800283a 	ret
    816c:	8080030b 	ldhu	r2,12(r16)
    8170:	10bbffcc 	andi	r2,r2,61439
    8174:	8080030d 	sth	r2,12(r16)
    8178:	1805883a 	mov	r2,r3
    817c:	dfc00117 	ldw	ra,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00204 	addi	sp,sp,8
    8188:	f800283a 	ret

0000818c <strcmp>:
    818c:	2144b03a 	or	r2,r4,r5
    8190:	108000cc 	andi	r2,r2,3
    8194:	10001d1e 	bne	r2,zero,820c <strcmp+0x80>
    8198:	200f883a 	mov	r7,r4
    819c:	28800017 	ldw	r2,0(r5)
    81a0:	21000017 	ldw	r4,0(r4)
    81a4:	280d883a 	mov	r6,r5
    81a8:	2080161e 	bne	r4,r2,8204 <strcmp+0x78>
    81ac:	023fbff4 	movhi	r8,65279
    81b0:	423fbfc4 	addi	r8,r8,-257
    81b4:	2207883a 	add	r3,r4,r8
    81b8:	01602074 	movhi	r5,32897
    81bc:	29602004 	addi	r5,r5,-32640
    81c0:	1946703a 	and	r3,r3,r5
    81c4:	0104303a 	nor	r2,zero,r4
    81c8:	10c4703a 	and	r2,r2,r3
    81cc:	10001c1e 	bne	r2,zero,8240 <strcmp+0xb4>
    81d0:	4013883a 	mov	r9,r8
    81d4:	2811883a 	mov	r8,r5
    81d8:	00000106 	br	81e0 <strcmp+0x54>
    81dc:	1800181e 	bne	r3,zero,8240 <strcmp+0xb4>
    81e0:	39c00104 	addi	r7,r7,4
    81e4:	39000017 	ldw	r4,0(r7)
    81e8:	31800104 	addi	r6,r6,4
    81ec:	31400017 	ldw	r5,0(r6)
    81f0:	2245883a 	add	r2,r4,r9
    81f4:	1204703a 	and	r2,r2,r8
    81f8:	0106303a 	nor	r3,zero,r4
    81fc:	1886703a 	and	r3,r3,r2
    8200:	217ff626 	beq	r4,r5,81dc <strcmp+0x50>
    8204:	3809883a 	mov	r4,r7
    8208:	300b883a 	mov	r5,r6
    820c:	20c00007 	ldb	r3,0(r4)
    8210:	1800051e 	bne	r3,zero,8228 <strcmp+0x9c>
    8214:	00000606 	br	8230 <strcmp+0xa4>
    8218:	21000044 	addi	r4,r4,1
    821c:	20c00007 	ldb	r3,0(r4)
    8220:	29400044 	addi	r5,r5,1
    8224:	18000226 	beq	r3,zero,8230 <strcmp+0xa4>
    8228:	28800007 	ldb	r2,0(r5)
    822c:	18bffa26 	beq	r3,r2,8218 <strcmp+0x8c>
    8230:	20c00003 	ldbu	r3,0(r4)
    8234:	28800003 	ldbu	r2,0(r5)
    8238:	1885c83a 	sub	r2,r3,r2
    823c:	f800283a 	ret
    8240:	0005883a 	mov	r2,zero
    8244:	f800283a 	ret

00008248 <__swbuf_r>:
    8248:	defffc04 	addi	sp,sp,-16
    824c:	dc400215 	stw	r17,8(sp)
    8250:	dc000115 	stw	r16,4(sp)
    8254:	dfc00315 	stw	ra,12(sp)
    8258:	2023883a 	mov	r17,r4
    825c:	2821883a 	mov	r16,r5
    8260:	20000226 	beq	r4,zero,826c <__swbuf_r+0x24>
    8264:	20800e17 	ldw	r2,56(r4)
    8268:	10002f26 	beq	r2,zero,8328 <__swbuf_r+0xe0>
    826c:	3080030b 	ldhu	r2,12(r6)
    8270:	30c00617 	ldw	r3,24(r6)
    8274:	1080020c 	andi	r2,r2,8
    8278:	30c00215 	stw	r3,8(r6)
    827c:	10002226 	beq	r2,zero,8308 <__swbuf_r+0xc0>
    8280:	30c00417 	ldw	r3,16(r6)
    8284:	18002026 	beq	r3,zero,8308 <__swbuf_r+0xc0>
    8288:	31000017 	ldw	r4,0(r6)
    828c:	30800517 	ldw	r2,20(r6)
    8290:	20c7c83a 	sub	r3,r4,r3
    8294:	18802f0e 	bge	r3,r2,8354 <__swbuf_r+0x10c>
    8298:	19400044 	addi	r5,r3,1
    829c:	30800217 	ldw	r2,8(r6)
    82a0:	84003fcc 	andi	r16,r16,255
    82a4:	20c00044 	addi	r3,r4,1
    82a8:	10bfffc4 	addi	r2,r2,-1
    82ac:	30800215 	stw	r2,8(r6)
    82b0:	24000005 	stb	r16,0(r4)
    82b4:	30800517 	ldw	r2,20(r6)
    82b8:	30c00015 	stw	r3,0(r6)
    82bc:	11400c26 	beq	r2,r5,82f0 <__swbuf_r+0xa8>
    82c0:	3080030b 	ldhu	r2,12(r6)
    82c4:	1080004c 	andi	r2,r2,1
    82c8:	1005003a 	cmpeq	r2,r2,zero
    82cc:	10000626 	beq	r2,zero,82e8 <__swbuf_r+0xa0>
    82d0:	8005883a 	mov	r2,r16
    82d4:	dfc00317 	ldw	ra,12(sp)
    82d8:	dc400217 	ldw	r17,8(sp)
    82dc:	dc000117 	ldw	r16,4(sp)
    82e0:	dec00404 	addi	sp,sp,16
    82e4:	f800283a 	ret
    82e8:	00800284 	movi	r2,10
    82ec:	80bff81e 	bne	r16,r2,82d0 <__swbuf_r+0x88>
    82f0:	8809883a 	mov	r4,r17
    82f4:	300b883a 	mov	r5,r6
    82f8:	00052900 	call	5290 <_fflush_r>
    82fc:	103ff426 	beq	r2,zero,82d0 <__swbuf_r+0x88>
    8300:	043fffc4 	movi	r16,-1
    8304:	003ff206 	br	82d0 <__swbuf_r+0x88>
    8308:	300b883a 	mov	r5,r6
    830c:	8809883a 	mov	r4,r17
    8310:	d9800015 	stw	r6,0(sp)
    8314:	00037a80 	call	37a8 <__swsetup_r>
    8318:	d9800017 	ldw	r6,0(sp)
    831c:	1000061e 	bne	r2,zero,8338 <__swbuf_r+0xf0>
    8320:	30c00417 	ldw	r3,16(r6)
    8324:	003fd806 	br	8288 <__swbuf_r+0x40>
    8328:	d9800015 	stw	r6,0(sp)
    832c:	00055280 	call	5528 <__sinit>
    8330:	d9800017 	ldw	r6,0(sp)
    8334:	003fcd06 	br	826c <__swbuf_r+0x24>
    8338:	3080030b 	ldhu	r2,12(r6)
    833c:	00c00244 	movi	r3,9
    8340:	043fffc4 	movi	r16,-1
    8344:	10801014 	ori	r2,r2,64
    8348:	3080030d 	sth	r2,12(r6)
    834c:	88c00015 	stw	r3,0(r17)
    8350:	003fdf06 	br	82d0 <__swbuf_r+0x88>
    8354:	300b883a 	mov	r5,r6
    8358:	8809883a 	mov	r4,r17
    835c:	d9800015 	stw	r6,0(sp)
    8360:	00052900 	call	5290 <_fflush_r>
    8364:	d9800017 	ldw	r6,0(sp)
    8368:	103fe51e 	bne	r2,zero,8300 <__swbuf_r+0xb8>
    836c:	31000017 	ldw	r4,0(r6)
    8370:	01400044 	movi	r5,1
    8374:	003fc906 	br	829c <__swbuf_r+0x54>

00008378 <__swbuf>:
    8378:	01800074 	movhi	r6,1
    837c:	31bd9a04 	addi	r6,r6,-2456
    8380:	2007883a 	mov	r3,r4
    8384:	31000017 	ldw	r4,0(r6)
    8388:	280d883a 	mov	r6,r5
    838c:	180b883a 	mov	r5,r3
    8390:	00082481 	jmpi	8248 <__swbuf_r>

00008394 <_write_r>:
    8394:	defffd04 	addi	sp,sp,-12
    8398:	dc000015 	stw	r16,0(sp)
    839c:	04000074 	movhi	r16,1
    83a0:	84044a04 	addi	r16,r16,4392
    83a4:	dc400115 	stw	r17,4(sp)
    83a8:	80000015 	stw	zero,0(r16)
    83ac:	2023883a 	mov	r17,r4
    83b0:	2809883a 	mov	r4,r5
    83b4:	300b883a 	mov	r5,r6
    83b8:	380d883a 	mov	r6,r7
    83bc:	dfc00215 	stw	ra,8(sp)
    83c0:	000bb540 	call	bb54 <write>
    83c4:	1007883a 	mov	r3,r2
    83c8:	00bfffc4 	movi	r2,-1
    83cc:	18800626 	beq	r3,r2,83e8 <_write_r+0x54>
    83d0:	1805883a 	mov	r2,r3
    83d4:	dfc00217 	ldw	ra,8(sp)
    83d8:	dc400117 	ldw	r17,4(sp)
    83dc:	dc000017 	ldw	r16,0(sp)
    83e0:	dec00304 	addi	sp,sp,12
    83e4:	f800283a 	ret
    83e8:	80800017 	ldw	r2,0(r16)
    83ec:	103ff826 	beq	r2,zero,83d0 <_write_r+0x3c>
    83f0:	88800015 	stw	r2,0(r17)
    83f4:	1805883a 	mov	r2,r3
    83f8:	dfc00217 	ldw	ra,8(sp)
    83fc:	dc400117 	ldw	r17,4(sp)
    8400:	dc000017 	ldw	r16,0(sp)
    8404:	dec00304 	addi	sp,sp,12
    8408:	f800283a 	ret

0000840c <_calloc_r>:
    840c:	defffe04 	addi	sp,sp,-8
    8410:	dc400015 	stw	r17,0(sp)
    8414:	2023883a 	mov	r17,r4
    8418:	2809883a 	mov	r4,r5
    841c:	300b883a 	mov	r5,r6
    8420:	dfc00115 	stw	ra,4(sp)
    8424:	000a7800 	call	a780 <__mulsi3>
    8428:	100b883a 	mov	r5,r2
    842c:	8809883a 	mov	r4,r17
    8430:	0000ef40 	call	ef4 <_malloc_r>
    8434:	1023883a 	mov	r17,r2
    8438:	01c00904 	movi	r7,36
    843c:	10000d26 	beq	r2,zero,8474 <_calloc_r+0x68>
    8440:	10ffff17 	ldw	r3,-4(r2)
    8444:	1009883a 	mov	r4,r2
    8448:	00bfff04 	movi	r2,-4
    844c:	1886703a 	and	r3,r3,r2
    8450:	1887883a 	add	r3,r3,r2
    8454:	180d883a 	mov	r6,r3
    8458:	000b883a 	mov	r5,zero
    845c:	38c01736 	bltu	r7,r3,84bc <_calloc_r+0xb0>
    8460:	008004c4 	movi	r2,19
    8464:	10c00836 	bltu	r2,r3,8488 <_calloc_r+0x7c>
    8468:	20000215 	stw	zero,8(r4)
    846c:	20000015 	stw	zero,0(r4)
    8470:	20000115 	stw	zero,4(r4)
    8474:	8805883a 	mov	r2,r17
    8478:	dfc00117 	ldw	ra,4(sp)
    847c:	dc400017 	ldw	r17,0(sp)
    8480:	dec00204 	addi	sp,sp,8
    8484:	f800283a 	ret
    8488:	008006c4 	movi	r2,27
    848c:	88000015 	stw	zero,0(r17)
    8490:	88000115 	stw	zero,4(r17)
    8494:	89000204 	addi	r4,r17,8
    8498:	10fff32e 	bgeu	r2,r3,8468 <_calloc_r+0x5c>
    849c:	88000215 	stw	zero,8(r17)
    84a0:	88000315 	stw	zero,12(r17)
    84a4:	89000404 	addi	r4,r17,16
    84a8:	19ffef1e 	bne	r3,r7,8468 <_calloc_r+0x5c>
    84ac:	89000604 	addi	r4,r17,24
    84b0:	88000415 	stw	zero,16(r17)
    84b4:	88000515 	stw	zero,20(r17)
    84b8:	003feb06 	br	8468 <_calloc_r+0x5c>
    84bc:	00066cc0 	call	66cc <memset>
    84c0:	8805883a 	mov	r2,r17
    84c4:	dfc00117 	ldw	ra,4(sp)
    84c8:	dc400017 	ldw	r17,0(sp)
    84cc:	dec00204 	addi	sp,sp,8
    84d0:	f800283a 	ret

000084d4 <_close_r>:
    84d4:	defffd04 	addi	sp,sp,-12
    84d8:	dc000015 	stw	r16,0(sp)
    84dc:	04000074 	movhi	r16,1
    84e0:	84044a04 	addi	r16,r16,4392
    84e4:	dc400115 	stw	r17,4(sp)
    84e8:	80000015 	stw	zero,0(r16)
    84ec:	2023883a 	mov	r17,r4
    84f0:	2809883a 	mov	r4,r5
    84f4:	dfc00215 	stw	ra,8(sp)
    84f8:	000afc40 	call	afc4 <close>
    84fc:	1007883a 	mov	r3,r2
    8500:	00bfffc4 	movi	r2,-1
    8504:	18800626 	beq	r3,r2,8520 <_close_r+0x4c>
    8508:	1805883a 	mov	r2,r3
    850c:	dfc00217 	ldw	ra,8(sp)
    8510:	dc400117 	ldw	r17,4(sp)
    8514:	dc000017 	ldw	r16,0(sp)
    8518:	dec00304 	addi	sp,sp,12
    851c:	f800283a 	ret
    8520:	80800017 	ldw	r2,0(r16)
    8524:	103ff826 	beq	r2,zero,8508 <_close_r+0x34>
    8528:	88800015 	stw	r2,0(r17)
    852c:	1805883a 	mov	r2,r3
    8530:	dfc00217 	ldw	ra,8(sp)
    8534:	dc400117 	ldw	r17,4(sp)
    8538:	dc000017 	ldw	r16,0(sp)
    853c:	dec00304 	addi	sp,sp,12
    8540:	f800283a 	ret

00008544 <_fclose_r>:
    8544:	defffc04 	addi	sp,sp,-16
    8548:	dc400115 	stw	r17,4(sp)
    854c:	dc000015 	stw	r16,0(sp)
    8550:	dfc00315 	stw	ra,12(sp)
    8554:	dc800215 	stw	r18,8(sp)
    8558:	2821883a 	mov	r16,r5
    855c:	2023883a 	mov	r17,r4
    8560:	28002926 	beq	r5,zero,8608 <_fclose_r+0xc4>
    8564:	00055180 	call	5518 <__sfp_lock_acquire>
    8568:	88000226 	beq	r17,zero,8574 <_fclose_r+0x30>
    856c:	88800e17 	ldw	r2,56(r17)
    8570:	10002d26 	beq	r2,zero,8628 <_fclose_r+0xe4>
    8574:	8080030f 	ldh	r2,12(r16)
    8578:	10002226 	beq	r2,zero,8604 <_fclose_r+0xc0>
    857c:	8809883a 	mov	r4,r17
    8580:	800b883a 	mov	r5,r16
    8584:	00052900 	call	5290 <_fflush_r>
    8588:	1025883a 	mov	r18,r2
    858c:	80800b17 	ldw	r2,44(r16)
    8590:	10000426 	beq	r2,zero,85a4 <_fclose_r+0x60>
    8594:	81400717 	ldw	r5,28(r16)
    8598:	8809883a 	mov	r4,r17
    859c:	103ee83a 	callr	r2
    85a0:	10002a16 	blt	r2,zero,864c <_fclose_r+0x108>
    85a4:	8080030b 	ldhu	r2,12(r16)
    85a8:	1080200c 	andi	r2,r2,128
    85ac:	1000231e 	bne	r2,zero,863c <_fclose_r+0xf8>
    85b0:	81400c17 	ldw	r5,48(r16)
    85b4:	28000526 	beq	r5,zero,85cc <_fclose_r+0x88>
    85b8:	80801004 	addi	r2,r16,64
    85bc:	28800226 	beq	r5,r2,85c8 <_fclose_r+0x84>
    85c0:	8809883a 	mov	r4,r17
    85c4:	00058e00 	call	58e0 <_free_r>
    85c8:	80000c15 	stw	zero,48(r16)
    85cc:	81401117 	ldw	r5,68(r16)
    85d0:	28000326 	beq	r5,zero,85e0 <_fclose_r+0x9c>
    85d4:	8809883a 	mov	r4,r17
    85d8:	00058e00 	call	58e0 <_free_r>
    85dc:	80001115 	stw	zero,68(r16)
    85e0:	8000030d 	sth	zero,12(r16)
    85e4:	000551c0 	call	551c <__sfp_lock_release>
    85e8:	9005883a 	mov	r2,r18
    85ec:	dfc00317 	ldw	ra,12(sp)
    85f0:	dc800217 	ldw	r18,8(sp)
    85f4:	dc400117 	ldw	r17,4(sp)
    85f8:	dc000017 	ldw	r16,0(sp)
    85fc:	dec00404 	addi	sp,sp,16
    8600:	f800283a 	ret
    8604:	000551c0 	call	551c <__sfp_lock_release>
    8608:	0025883a 	mov	r18,zero
    860c:	9005883a 	mov	r2,r18
    8610:	dfc00317 	ldw	ra,12(sp)
    8614:	dc800217 	ldw	r18,8(sp)
    8618:	dc400117 	ldw	r17,4(sp)
    861c:	dc000017 	ldw	r16,0(sp)
    8620:	dec00404 	addi	sp,sp,16
    8624:	f800283a 	ret
    8628:	8809883a 	mov	r4,r17
    862c:	00055280 	call	5528 <__sinit>
    8630:	8080030f 	ldh	r2,12(r16)
    8634:	103fd11e 	bne	r2,zero,857c <_fclose_r+0x38>
    8638:	003ff206 	br	8604 <_fclose_r+0xc0>
    863c:	81400417 	ldw	r5,16(r16)
    8640:	8809883a 	mov	r4,r17
    8644:	00058e00 	call	58e0 <_free_r>
    8648:	003fd906 	br	85b0 <_fclose_r+0x6c>
    864c:	04bfffc4 	movi	r18,-1
    8650:	003fd406 	br	85a4 <_fclose_r+0x60>

00008654 <fclose>:
    8654:	00800074 	movhi	r2,1
    8658:	10bd9a04 	addi	r2,r2,-2456
    865c:	200b883a 	mov	r5,r4
    8660:	11000017 	ldw	r4,0(r2)
    8664:	00085441 	jmpi	8544 <_fclose_r>

00008668 <_fstat_r>:
    8668:	defffd04 	addi	sp,sp,-12
    866c:	dc000015 	stw	r16,0(sp)
    8670:	04000074 	movhi	r16,1
    8674:	84044a04 	addi	r16,r16,4392
    8678:	dc400115 	stw	r17,4(sp)
    867c:	80000015 	stw	zero,0(r16)
    8680:	2023883a 	mov	r17,r4
    8684:	2809883a 	mov	r4,r5
    8688:	300b883a 	mov	r5,r6
    868c:	dfc00215 	stw	ra,8(sp)
    8690:	000b1b00 	call	b1b0 <fstat>
    8694:	1007883a 	mov	r3,r2
    8698:	00bfffc4 	movi	r2,-1
    869c:	18800626 	beq	r3,r2,86b8 <_fstat_r+0x50>
    86a0:	1805883a 	mov	r2,r3
    86a4:	dfc00217 	ldw	ra,8(sp)
    86a8:	dc400117 	ldw	r17,4(sp)
    86ac:	dc000017 	ldw	r16,0(sp)
    86b0:	dec00304 	addi	sp,sp,12
    86b4:	f800283a 	ret
    86b8:	80800017 	ldw	r2,0(r16)
    86bc:	103ff826 	beq	r2,zero,86a0 <_fstat_r+0x38>
    86c0:	88800015 	stw	r2,0(r17)
    86c4:	1805883a 	mov	r2,r3
    86c8:	dfc00217 	ldw	ra,8(sp)
    86cc:	dc400117 	ldw	r17,4(sp)
    86d0:	dc000017 	ldw	r16,0(sp)
    86d4:	dec00304 	addi	sp,sp,12
    86d8:	f800283a 	ret

000086dc <_isatty_r>:
    86dc:	defffd04 	addi	sp,sp,-12
    86e0:	dc000015 	stw	r16,0(sp)
    86e4:	04000074 	movhi	r16,1
    86e8:	84044a04 	addi	r16,r16,4392
    86ec:	dc400115 	stw	r17,4(sp)
    86f0:	80000015 	stw	zero,0(r16)
    86f4:	2023883a 	mov	r17,r4
    86f8:	2809883a 	mov	r4,r5
    86fc:	dfc00215 	stw	ra,8(sp)
    8700:	000b2e80 	call	b2e8 <isatty>
    8704:	1007883a 	mov	r3,r2
    8708:	00bfffc4 	movi	r2,-1
    870c:	18800626 	beq	r3,r2,8728 <_isatty_r+0x4c>
    8710:	1805883a 	mov	r2,r3
    8714:	dfc00217 	ldw	ra,8(sp)
    8718:	dc400117 	ldw	r17,4(sp)
    871c:	dc000017 	ldw	r16,0(sp)
    8720:	dec00304 	addi	sp,sp,12
    8724:	f800283a 	ret
    8728:	80800017 	ldw	r2,0(r16)
    872c:	103ff826 	beq	r2,zero,8710 <_isatty_r+0x34>
    8730:	88800015 	stw	r2,0(r17)
    8734:	1805883a 	mov	r2,r3
    8738:	dfc00217 	ldw	ra,8(sp)
    873c:	dc400117 	ldw	r17,4(sp)
    8740:	dc000017 	ldw	r16,0(sp)
    8744:	dec00304 	addi	sp,sp,12
    8748:	f800283a 	ret

0000874c <_lseek_r>:
    874c:	defffd04 	addi	sp,sp,-12
    8750:	dc000015 	stw	r16,0(sp)
    8754:	04000074 	movhi	r16,1
    8758:	84044a04 	addi	r16,r16,4392
    875c:	dc400115 	stw	r17,4(sp)
    8760:	80000015 	stw	zero,0(r16)
    8764:	2023883a 	mov	r17,r4
    8768:	2809883a 	mov	r4,r5
    876c:	300b883a 	mov	r5,r6
    8770:	380d883a 	mov	r6,r7
    8774:	dfc00215 	stw	ra,8(sp)
    8778:	000b4f80 	call	b4f8 <lseek>
    877c:	1007883a 	mov	r3,r2
    8780:	00bfffc4 	movi	r2,-1
    8784:	18800626 	beq	r3,r2,87a0 <_lseek_r+0x54>
    8788:	1805883a 	mov	r2,r3
    878c:	dfc00217 	ldw	ra,8(sp)
    8790:	dc400117 	ldw	r17,4(sp)
    8794:	dc000017 	ldw	r16,0(sp)
    8798:	dec00304 	addi	sp,sp,12
    879c:	f800283a 	ret
    87a0:	80800017 	ldw	r2,0(r16)
    87a4:	103ff826 	beq	r2,zero,8788 <_lseek_r+0x3c>
    87a8:	88800015 	stw	r2,0(r17)
    87ac:	1805883a 	mov	r2,r3
    87b0:	dfc00217 	ldw	ra,8(sp)
    87b4:	dc400117 	ldw	r17,4(sp)
    87b8:	dc000017 	ldw	r16,0(sp)
    87bc:	dec00304 	addi	sp,sp,12
    87c0:	f800283a 	ret

000087c4 <_read_r>:
    87c4:	defffd04 	addi	sp,sp,-12
    87c8:	dc000015 	stw	r16,0(sp)
    87cc:	04000074 	movhi	r16,1
    87d0:	84044a04 	addi	r16,r16,4392
    87d4:	dc400115 	stw	r17,4(sp)
    87d8:	80000015 	stw	zero,0(r16)
    87dc:	2023883a 	mov	r17,r4
    87e0:	2809883a 	mov	r4,r5
    87e4:	300b883a 	mov	r5,r6
    87e8:	380d883a 	mov	r6,r7
    87ec:	dfc00215 	stw	ra,8(sp)
    87f0:	000b6f80 	call	b6f8 <read>
    87f4:	1007883a 	mov	r3,r2
    87f8:	00bfffc4 	movi	r2,-1
    87fc:	18800626 	beq	r3,r2,8818 <_read_r+0x54>
    8800:	1805883a 	mov	r2,r3
    8804:	dfc00217 	ldw	ra,8(sp)
    8808:	dc400117 	ldw	r17,4(sp)
    880c:	dc000017 	ldw	r16,0(sp)
    8810:	dec00304 	addi	sp,sp,12
    8814:	f800283a 	ret
    8818:	80800017 	ldw	r2,0(r16)
    881c:	103ff826 	beq	r2,zero,8800 <_read_r+0x3c>
    8820:	88800015 	stw	r2,0(r17)
    8824:	1805883a 	mov	r2,r3
    8828:	dfc00217 	ldw	ra,8(sp)
    882c:	dc400117 	ldw	r17,4(sp)
    8830:	dc000017 	ldw	r16,0(sp)
    8834:	dec00304 	addi	sp,sp,12
    8838:	f800283a 	ret

0000883c <__udivdi3>:
    883c:	defff104 	addi	sp,sp,-60
    8840:	0015883a 	mov	r10,zero
    8844:	2005883a 	mov	r2,r4
    8848:	3011883a 	mov	r8,r6
    884c:	df000d15 	stw	fp,52(sp)
    8850:	dd400a15 	stw	r21,40(sp)
    8854:	dcc00815 	stw	r19,32(sp)
    8858:	dfc00e15 	stw	ra,56(sp)
    885c:	ddc00c15 	stw	r23,48(sp)
    8860:	dd800b15 	stw	r22,44(sp)
    8864:	dd000915 	stw	r20,36(sp)
    8868:	dc800715 	stw	r18,28(sp)
    886c:	dc400615 	stw	r17,24(sp)
    8870:	dc000515 	stw	r16,20(sp)
    8874:	da800315 	stw	r10,12(sp)
    8878:	4027883a 	mov	r19,r8
    887c:	1039883a 	mov	fp,r2
    8880:	282b883a 	mov	r21,r5
    8884:	da800415 	stw	r10,16(sp)
    8888:	3800401e 	bne	r7,zero,898c <__udivdi3+0x150>
    888c:	2a006536 	bltu	r5,r8,8a24 <__udivdi3+0x1e8>
    8890:	4000b526 	beq	r8,zero,8b68 <__udivdi3+0x32c>
    8894:	00bfffd4 	movui	r2,65535
    8898:	14c0ad36 	bltu	r2,r19,8b50 <__udivdi3+0x314>
    889c:	00803fc4 	movi	r2,255
    88a0:	14c15e36 	bltu	r2,r19,8e1c <__udivdi3+0x5e0>
    88a4:	000b883a 	mov	r5,zero
    88a8:	0005883a 	mov	r2,zero
    88ac:	9884d83a 	srl	r2,r19,r2
    88b0:	01000074 	movhi	r4,1
    88b4:	2136c804 	addi	r4,r4,-9440
    88b8:	01800804 	movi	r6,32
    88bc:	1105883a 	add	r2,r2,r4
    88c0:	10c00003 	ldbu	r3,0(r2)
    88c4:	28c7883a 	add	r3,r5,r3
    88c8:	30e9c83a 	sub	r20,r6,r3
    88cc:	a0010a1e 	bne	r20,zero,8cf8 <__udivdi3+0x4bc>
    88d0:	982ed43a 	srli	r23,r19,16
    88d4:	acebc83a 	sub	r21,r21,r19
    88d8:	9dbfffcc 	andi	r22,r19,65535
    88dc:	05000044 	movi	r20,1
    88e0:	a809883a 	mov	r4,r21
    88e4:	b80b883a 	mov	r5,r23
    88e8:	000a7700 	call	a770 <__udivsi3>
    88ec:	100b883a 	mov	r5,r2
    88f0:	b009883a 	mov	r4,r22
    88f4:	1021883a 	mov	r16,r2
    88f8:	000a7800 	call	a780 <__mulsi3>
    88fc:	a809883a 	mov	r4,r21
    8900:	b80b883a 	mov	r5,r23
    8904:	1023883a 	mov	r17,r2
    8908:	000a7780 	call	a778 <__umodsi3>
    890c:	1004943a 	slli	r2,r2,16
    8910:	e006d43a 	srli	r3,fp,16
    8914:	10c4b03a 	or	r2,r2,r3
    8918:	1440042e 	bgeu	r2,r17,892c <__udivdi3+0xf0>
    891c:	14c5883a 	add	r2,r2,r19
    8920:	843fffc4 	addi	r16,r16,-1
    8924:	14c00136 	bltu	r2,r19,892c <__udivdi3+0xf0>
    8928:	14415c36 	bltu	r2,r17,8e9c <__udivdi3+0x660>
    892c:	1463c83a 	sub	r17,r2,r17
    8930:	8809883a 	mov	r4,r17
    8934:	b80b883a 	mov	r5,r23
    8938:	000a7700 	call	a770 <__udivsi3>
    893c:	100b883a 	mov	r5,r2
    8940:	b009883a 	mov	r4,r22
    8944:	102b883a 	mov	r21,r2
    8948:	000a7800 	call	a780 <__mulsi3>
    894c:	8809883a 	mov	r4,r17
    8950:	b80b883a 	mov	r5,r23
    8954:	1025883a 	mov	r18,r2
    8958:	000a7780 	call	a778 <__umodsi3>
    895c:	1004943a 	slli	r2,r2,16
    8960:	e0ffffcc 	andi	r3,fp,65535
    8964:	10c4b03a 	or	r2,r2,r3
    8968:	1480042e 	bgeu	r2,r18,897c <__udivdi3+0x140>
    896c:	9885883a 	add	r2,r19,r2
    8970:	ad7fffc4 	addi	r21,r21,-1
    8974:	14c00136 	bltu	r2,r19,897c <__udivdi3+0x140>
    8978:	14813c36 	bltu	r2,r18,8e6c <__udivdi3+0x630>
    897c:	8004943a 	slli	r2,r16,16
    8980:	a009883a 	mov	r4,r20
    8984:	a884b03a 	or	r2,r21,r2
    8988:	00001506 	br	89e0 <__udivdi3+0x1a4>
    898c:	380d883a 	mov	r6,r7
    8990:	29c06c36 	bltu	r5,r7,8b44 <__udivdi3+0x308>
    8994:	00bfffd4 	movui	r2,65535
    8998:	11c06436 	bltu	r2,r7,8b2c <__udivdi3+0x2f0>
    899c:	00803fc4 	movi	r2,255
    89a0:	11c11836 	bltu	r2,r7,8e04 <__udivdi3+0x5c8>
    89a4:	000b883a 	mov	r5,zero
    89a8:	0005883a 	mov	r2,zero
    89ac:	3084d83a 	srl	r2,r6,r2
    89b0:	01000074 	movhi	r4,1
    89b4:	2136c804 	addi	r4,r4,-9440
    89b8:	01c00804 	movi	r7,32
    89bc:	1105883a 	add	r2,r2,r4
    89c0:	10c00003 	ldbu	r3,0(r2)
    89c4:	28c7883a 	add	r3,r5,r3
    89c8:	38edc83a 	sub	r22,r7,r3
    89cc:	b000731e 	bne	r22,zero,8b9c <__udivdi3+0x360>
    89d0:	35400136 	bltu	r6,r21,89d8 <__udivdi3+0x19c>
    89d4:	e4c05b36 	bltu	fp,r19,8b44 <__udivdi3+0x308>
    89d8:	00800044 	movi	r2,1
    89dc:	0009883a 	mov	r4,zero
    89e0:	d8800315 	stw	r2,12(sp)
    89e4:	d9400317 	ldw	r5,12(sp)
    89e8:	d9000415 	stw	r4,16(sp)
    89ec:	2007883a 	mov	r3,r4
    89f0:	2805883a 	mov	r2,r5
    89f4:	dfc00e17 	ldw	ra,56(sp)
    89f8:	df000d17 	ldw	fp,52(sp)
    89fc:	ddc00c17 	ldw	r23,48(sp)
    8a00:	dd800b17 	ldw	r22,44(sp)
    8a04:	dd400a17 	ldw	r21,40(sp)
    8a08:	dd000917 	ldw	r20,36(sp)
    8a0c:	dcc00817 	ldw	r19,32(sp)
    8a10:	dc800717 	ldw	r18,28(sp)
    8a14:	dc400617 	ldw	r17,24(sp)
    8a18:	dc000517 	ldw	r16,20(sp)
    8a1c:	dec00f04 	addi	sp,sp,60
    8a20:	f800283a 	ret
    8a24:	00bfffd4 	movui	r2,65535
    8a28:	12005636 	bltu	r2,r8,8b84 <__udivdi3+0x348>
    8a2c:	00803fc4 	movi	r2,255
    8a30:	12010036 	bltu	r2,r8,8e34 <__udivdi3+0x5f8>
    8a34:	000b883a 	mov	r5,zero
    8a38:	0005883a 	mov	r2,zero
    8a3c:	9884d83a 	srl	r2,r19,r2
    8a40:	01000074 	movhi	r4,1
    8a44:	2136c804 	addi	r4,r4,-9440
    8a48:	01800804 	movi	r6,32
    8a4c:	1105883a 	add	r2,r2,r4
    8a50:	10c00003 	ldbu	r3,0(r2)
    8a54:	28c7883a 	add	r3,r5,r3
    8a58:	30cbc83a 	sub	r5,r6,r3
    8a5c:	28000626 	beq	r5,zero,8a78 <__udivdi3+0x23c>
    8a60:	3145c83a 	sub	r2,r6,r5
    8a64:	e084d83a 	srl	r2,fp,r2
    8a68:	a946983a 	sll	r3,r21,r5
    8a6c:	e178983a 	sll	fp,fp,r5
    8a70:	9966983a 	sll	r19,r19,r5
    8a74:	18aab03a 	or	r21,r3,r2
    8a78:	982ed43a 	srli	r23,r19,16
    8a7c:	a809883a 	mov	r4,r21
    8a80:	9cbfffcc 	andi	r18,r19,65535
    8a84:	b80b883a 	mov	r5,r23
    8a88:	000a7700 	call	a770 <__udivsi3>
    8a8c:	100b883a 	mov	r5,r2
    8a90:	9009883a 	mov	r4,r18
    8a94:	1021883a 	mov	r16,r2
    8a98:	000a7800 	call	a780 <__mulsi3>
    8a9c:	a809883a 	mov	r4,r21
    8aa0:	b80b883a 	mov	r5,r23
    8aa4:	1023883a 	mov	r17,r2
    8aa8:	000a7780 	call	a778 <__umodsi3>
    8aac:	1004943a 	slli	r2,r2,16
    8ab0:	e006d43a 	srli	r3,fp,16
    8ab4:	10c4b03a 	or	r2,r2,r3
    8ab8:	1440042e 	bgeu	r2,r17,8acc <__udivdi3+0x290>
    8abc:	14c5883a 	add	r2,r2,r19
    8ac0:	843fffc4 	addi	r16,r16,-1
    8ac4:	14c00136 	bltu	r2,r19,8acc <__udivdi3+0x290>
    8ac8:	1440ea36 	bltu	r2,r17,8e74 <__udivdi3+0x638>
    8acc:	1463c83a 	sub	r17,r2,r17
    8ad0:	8809883a 	mov	r4,r17
    8ad4:	b80b883a 	mov	r5,r23
    8ad8:	000a7700 	call	a770 <__udivsi3>
    8adc:	100b883a 	mov	r5,r2
    8ae0:	9009883a 	mov	r4,r18
    8ae4:	102b883a 	mov	r21,r2
    8ae8:	000a7800 	call	a780 <__mulsi3>
    8aec:	8809883a 	mov	r4,r17
    8af0:	b80b883a 	mov	r5,r23
    8af4:	1025883a 	mov	r18,r2
    8af8:	000a7780 	call	a778 <__umodsi3>
    8afc:	1004943a 	slli	r2,r2,16
    8b00:	e0ffffcc 	andi	r3,fp,65535
    8b04:	10c4b03a 	or	r2,r2,r3
    8b08:	1480042e 	bgeu	r2,r18,8b1c <__udivdi3+0x2e0>
    8b0c:	9885883a 	add	r2,r19,r2
    8b10:	ad7fffc4 	addi	r21,r21,-1
    8b14:	14c00136 	bltu	r2,r19,8b1c <__udivdi3+0x2e0>
    8b18:	1480d936 	bltu	r2,r18,8e80 <__udivdi3+0x644>
    8b1c:	8004943a 	slli	r2,r16,16
    8b20:	0009883a 	mov	r4,zero
    8b24:	a884b03a 	or	r2,r21,r2
    8b28:	003fad06 	br	89e0 <__udivdi3+0x1a4>
    8b2c:	00804034 	movhi	r2,256
    8b30:	10bfffc4 	addi	r2,r2,-1
    8b34:	11c0b636 	bltu	r2,r7,8e10 <__udivdi3+0x5d4>
    8b38:	01400404 	movi	r5,16
    8b3c:	2805883a 	mov	r2,r5
    8b40:	003f9a06 	br	89ac <__udivdi3+0x170>
    8b44:	0005883a 	mov	r2,zero
    8b48:	0009883a 	mov	r4,zero
    8b4c:	003fa406 	br	89e0 <__udivdi3+0x1a4>
    8b50:	00804034 	movhi	r2,256
    8b54:	10bfffc4 	addi	r2,r2,-1
    8b58:	14c0b336 	bltu	r2,r19,8e28 <__udivdi3+0x5ec>
    8b5c:	01400404 	movi	r5,16
    8b60:	2805883a 	mov	r2,r5
    8b64:	003f5106 	br	88ac <__udivdi3+0x70>
    8b68:	01000044 	movi	r4,1
    8b6c:	000b883a 	mov	r5,zero
    8b70:	000a7700 	call	a770 <__udivsi3>
    8b74:	1027883a 	mov	r19,r2
    8b78:	00bfffd4 	movui	r2,65535
    8b7c:	14fff436 	bltu	r2,r19,8b50 <__udivdi3+0x314>
    8b80:	003f4606 	br	889c <__udivdi3+0x60>
    8b84:	00804034 	movhi	r2,256
    8b88:	10bfffc4 	addi	r2,r2,-1
    8b8c:	1200ac36 	bltu	r2,r8,8e40 <__udivdi3+0x604>
    8b90:	01400404 	movi	r5,16
    8b94:	2805883a 	mov	r2,r5
    8b98:	003fa806 	br	8a3c <__udivdi3+0x200>
    8b9c:	3d85c83a 	sub	r2,r7,r22
    8ba0:	3588983a 	sll	r4,r6,r22
    8ba4:	9886d83a 	srl	r3,r19,r2
    8ba8:	a8a2d83a 	srl	r17,r21,r2
    8bac:	e084d83a 	srl	r2,fp,r2
    8bb0:	20eeb03a 	or	r23,r4,r3
    8bb4:	b824d43a 	srli	r18,r23,16
    8bb8:	ad86983a 	sll	r3,r21,r22
    8bbc:	8809883a 	mov	r4,r17
    8bc0:	900b883a 	mov	r5,r18
    8bc4:	1886b03a 	or	r3,r3,r2
    8bc8:	d8c00115 	stw	r3,4(sp)
    8bcc:	bc3fffcc 	andi	r16,r23,65535
    8bd0:	000a7700 	call	a770 <__udivsi3>
    8bd4:	100b883a 	mov	r5,r2
    8bd8:	8009883a 	mov	r4,r16
    8bdc:	1029883a 	mov	r20,r2
    8be0:	000a7800 	call	a780 <__mulsi3>
    8be4:	900b883a 	mov	r5,r18
    8be8:	8809883a 	mov	r4,r17
    8bec:	102b883a 	mov	r21,r2
    8bf0:	000a7780 	call	a778 <__umodsi3>
    8bf4:	d9400117 	ldw	r5,4(sp)
    8bf8:	1004943a 	slli	r2,r2,16
    8bfc:	9da6983a 	sll	r19,r19,r22
    8c00:	2806d43a 	srli	r3,r5,16
    8c04:	10c4b03a 	or	r2,r2,r3
    8c08:	1540032e 	bgeu	r2,r21,8c18 <__udivdi3+0x3dc>
    8c0c:	15c5883a 	add	r2,r2,r23
    8c10:	a53fffc4 	addi	r20,r20,-1
    8c14:	15c0912e 	bgeu	r2,r23,8e5c <__udivdi3+0x620>
    8c18:	1563c83a 	sub	r17,r2,r21
    8c1c:	8809883a 	mov	r4,r17
    8c20:	900b883a 	mov	r5,r18
    8c24:	000a7700 	call	a770 <__udivsi3>
    8c28:	100b883a 	mov	r5,r2
    8c2c:	8009883a 	mov	r4,r16
    8c30:	102b883a 	mov	r21,r2
    8c34:	000a7800 	call	a780 <__mulsi3>
    8c38:	8809883a 	mov	r4,r17
    8c3c:	900b883a 	mov	r5,r18
    8c40:	1021883a 	mov	r16,r2
    8c44:	000a7780 	call	a778 <__umodsi3>
    8c48:	da800117 	ldw	r10,4(sp)
    8c4c:	1004943a 	slli	r2,r2,16
    8c50:	50ffffcc 	andi	r3,r10,65535
    8c54:	10c6b03a 	or	r3,r2,r3
    8c58:	1c00032e 	bgeu	r3,r16,8c68 <__udivdi3+0x42c>
    8c5c:	1dc7883a 	add	r3,r3,r23
    8c60:	ad7fffc4 	addi	r21,r21,-1
    8c64:	1dc0792e 	bgeu	r3,r23,8e4c <__udivdi3+0x610>
    8c68:	a004943a 	slli	r2,r20,16
    8c6c:	982ed43a 	srli	r23,r19,16
    8c70:	9cffffcc 	andi	r19,r19,65535
    8c74:	a8a4b03a 	or	r18,r21,r2
    8c78:	947fffcc 	andi	r17,r18,65535
    8c7c:	902ad43a 	srli	r21,r18,16
    8c80:	8809883a 	mov	r4,r17
    8c84:	980b883a 	mov	r5,r19
    8c88:	1c21c83a 	sub	r16,r3,r16
    8c8c:	000a7800 	call	a780 <__mulsi3>
    8c90:	8809883a 	mov	r4,r17
    8c94:	b80b883a 	mov	r5,r23
    8c98:	1029883a 	mov	r20,r2
    8c9c:	000a7800 	call	a780 <__mulsi3>
    8ca0:	980b883a 	mov	r5,r19
    8ca4:	a809883a 	mov	r4,r21
    8ca8:	1023883a 	mov	r17,r2
    8cac:	000a7800 	call	a780 <__mulsi3>
    8cb0:	a809883a 	mov	r4,r21
    8cb4:	b80b883a 	mov	r5,r23
    8cb8:	1027883a 	mov	r19,r2
    8cbc:	000a7800 	call	a780 <__mulsi3>
    8cc0:	1009883a 	mov	r4,r2
    8cc4:	a004d43a 	srli	r2,r20,16
    8cc8:	8ce3883a 	add	r17,r17,r19
    8ccc:	1447883a 	add	r3,r2,r17
    8cd0:	1cc0022e 	bgeu	r3,r19,8cdc <__udivdi3+0x4a0>
    8cd4:	00800074 	movhi	r2,1
    8cd8:	2089883a 	add	r4,r4,r2
    8cdc:	1804d43a 	srli	r2,r3,16
    8ce0:	2085883a 	add	r2,r4,r2
    8ce4:	80804436 	bltu	r16,r2,8df8 <__udivdi3+0x5bc>
    8ce8:	80803e26 	beq	r16,r2,8de4 <__udivdi3+0x5a8>
    8cec:	9005883a 	mov	r2,r18
    8cf0:	0009883a 	mov	r4,zero
    8cf4:	003f3a06 	br	89e0 <__udivdi3+0x1a4>
    8cf8:	9d26983a 	sll	r19,r19,r20
    8cfc:	3505c83a 	sub	r2,r6,r20
    8d00:	a8a2d83a 	srl	r17,r21,r2
    8d04:	982ed43a 	srli	r23,r19,16
    8d08:	e084d83a 	srl	r2,fp,r2
    8d0c:	ad06983a 	sll	r3,r21,r20
    8d10:	8809883a 	mov	r4,r17
    8d14:	b80b883a 	mov	r5,r23
    8d18:	1886b03a 	or	r3,r3,r2
    8d1c:	d8c00015 	stw	r3,0(sp)
    8d20:	9dbfffcc 	andi	r22,r19,65535
    8d24:	000a7700 	call	a770 <__udivsi3>
    8d28:	100b883a 	mov	r5,r2
    8d2c:	b009883a 	mov	r4,r22
    8d30:	d8800215 	stw	r2,8(sp)
    8d34:	000a7800 	call	a780 <__mulsi3>
    8d38:	8809883a 	mov	r4,r17
    8d3c:	b80b883a 	mov	r5,r23
    8d40:	102b883a 	mov	r21,r2
    8d44:	000a7780 	call	a778 <__umodsi3>
    8d48:	d9000017 	ldw	r4,0(sp)
    8d4c:	1004943a 	slli	r2,r2,16
    8d50:	2006d43a 	srli	r3,r4,16
    8d54:	10c4b03a 	or	r2,r2,r3
    8d58:	1540052e 	bgeu	r2,r21,8d70 <__udivdi3+0x534>
    8d5c:	d9400217 	ldw	r5,8(sp)
    8d60:	14c5883a 	add	r2,r2,r19
    8d64:	297fffc4 	addi	r5,r5,-1
    8d68:	d9400215 	stw	r5,8(sp)
    8d6c:	14c0462e 	bgeu	r2,r19,8e88 <__udivdi3+0x64c>
    8d70:	1563c83a 	sub	r17,r2,r21
    8d74:	8809883a 	mov	r4,r17
    8d78:	b80b883a 	mov	r5,r23
    8d7c:	000a7700 	call	a770 <__udivsi3>
    8d80:	100b883a 	mov	r5,r2
    8d84:	b009883a 	mov	r4,r22
    8d88:	1025883a 	mov	r18,r2
    8d8c:	000a7800 	call	a780 <__mulsi3>
    8d90:	8809883a 	mov	r4,r17
    8d94:	b80b883a 	mov	r5,r23
    8d98:	1021883a 	mov	r16,r2
    8d9c:	000a7780 	call	a778 <__umodsi3>
    8da0:	da800017 	ldw	r10,0(sp)
    8da4:	1004943a 	slli	r2,r2,16
    8da8:	50ffffcc 	andi	r3,r10,65535
    8dac:	10c6b03a 	or	r3,r2,r3
    8db0:	1c00062e 	bgeu	r3,r16,8dcc <__udivdi3+0x590>
    8db4:	1cc7883a 	add	r3,r3,r19
    8db8:	94bfffc4 	addi	r18,r18,-1
    8dbc:	1cc00336 	bltu	r3,r19,8dcc <__udivdi3+0x590>
    8dc0:	1c00022e 	bgeu	r3,r16,8dcc <__udivdi3+0x590>
    8dc4:	94bfffc4 	addi	r18,r18,-1
    8dc8:	1cc7883a 	add	r3,r3,r19
    8dcc:	d9000217 	ldw	r4,8(sp)
    8dd0:	e538983a 	sll	fp,fp,r20
    8dd4:	1c2bc83a 	sub	r21,r3,r16
    8dd8:	2004943a 	slli	r2,r4,16
    8ddc:	90a8b03a 	or	r20,r18,r2
    8de0:	003ebf06 	br	88e0 <__udivdi3+0xa4>
    8de4:	1804943a 	slli	r2,r3,16
    8de8:	e588983a 	sll	r4,fp,r22
    8dec:	a0ffffcc 	andi	r3,r20,65535
    8df0:	10c5883a 	add	r2,r2,r3
    8df4:	20bfbd2e 	bgeu	r4,r2,8cec <__udivdi3+0x4b0>
    8df8:	90bfffc4 	addi	r2,r18,-1
    8dfc:	0009883a 	mov	r4,zero
    8e00:	003ef706 	br	89e0 <__udivdi3+0x1a4>
    8e04:	01400204 	movi	r5,8
    8e08:	2805883a 	mov	r2,r5
    8e0c:	003ee706 	br	89ac <__udivdi3+0x170>
    8e10:	01400604 	movi	r5,24
    8e14:	2805883a 	mov	r2,r5
    8e18:	003ee406 	br	89ac <__udivdi3+0x170>
    8e1c:	01400204 	movi	r5,8
    8e20:	2805883a 	mov	r2,r5
    8e24:	003ea106 	br	88ac <__udivdi3+0x70>
    8e28:	01400604 	movi	r5,24
    8e2c:	2805883a 	mov	r2,r5
    8e30:	003e9e06 	br	88ac <__udivdi3+0x70>
    8e34:	01400204 	movi	r5,8
    8e38:	2805883a 	mov	r2,r5
    8e3c:	003eff06 	br	8a3c <__udivdi3+0x200>
    8e40:	01400604 	movi	r5,24
    8e44:	2805883a 	mov	r2,r5
    8e48:	003efc06 	br	8a3c <__udivdi3+0x200>
    8e4c:	1c3f862e 	bgeu	r3,r16,8c68 <__udivdi3+0x42c>
    8e50:	1dc7883a 	add	r3,r3,r23
    8e54:	ad7fffc4 	addi	r21,r21,-1
    8e58:	003f8306 	br	8c68 <__udivdi3+0x42c>
    8e5c:	157f6e2e 	bgeu	r2,r21,8c18 <__udivdi3+0x3dc>
    8e60:	a53fffc4 	addi	r20,r20,-1
    8e64:	15c5883a 	add	r2,r2,r23
    8e68:	003f6b06 	br	8c18 <__udivdi3+0x3dc>
    8e6c:	ad7fffc4 	addi	r21,r21,-1
    8e70:	003ec206 	br	897c <__udivdi3+0x140>
    8e74:	843fffc4 	addi	r16,r16,-1
    8e78:	14c5883a 	add	r2,r2,r19
    8e7c:	003f1306 	br	8acc <__udivdi3+0x290>
    8e80:	ad7fffc4 	addi	r21,r21,-1
    8e84:	003f2506 	br	8b1c <__udivdi3+0x2e0>
    8e88:	157fb92e 	bgeu	r2,r21,8d70 <__udivdi3+0x534>
    8e8c:	297fffc4 	addi	r5,r5,-1
    8e90:	14c5883a 	add	r2,r2,r19
    8e94:	d9400215 	stw	r5,8(sp)
    8e98:	003fb506 	br	8d70 <__udivdi3+0x534>
    8e9c:	843fffc4 	addi	r16,r16,-1
    8ea0:	14c5883a 	add	r2,r2,r19
    8ea4:	003ea106 	br	892c <__udivdi3+0xf0>

00008ea8 <__umoddi3>:
    8ea8:	defff004 	addi	sp,sp,-64
    8eac:	3011883a 	mov	r8,r6
    8eb0:	000d883a 	mov	r6,zero
    8eb4:	dd400b15 	stw	r21,44(sp)
    8eb8:	dcc00915 	stw	r19,36(sp)
    8ebc:	dc000615 	stw	r16,24(sp)
    8ec0:	dfc00f15 	stw	ra,60(sp)
    8ec4:	df000e15 	stw	fp,56(sp)
    8ec8:	ddc00d15 	stw	r23,52(sp)
    8ecc:	dd800c15 	stw	r22,48(sp)
    8ed0:	dd000a15 	stw	r20,40(sp)
    8ed4:	dc800815 	stw	r18,32(sp)
    8ed8:	dc400715 	stw	r17,28(sp)
    8edc:	2817883a 	mov	r11,r5
    8ee0:	d9800415 	stw	r6,16(sp)
    8ee4:	4027883a 	mov	r19,r8
    8ee8:	d9800515 	stw	r6,20(sp)
    8eec:	2021883a 	mov	r16,r4
    8ef0:	282b883a 	mov	r21,r5
    8ef4:	38002c1e 	bne	r7,zero,8fa8 <__umoddi3+0x100>
    8ef8:	2a005636 	bltu	r5,r8,9054 <__umoddi3+0x1ac>
    8efc:	40009a26 	beq	r8,zero,9168 <__umoddi3+0x2c0>
    8f00:	00bfffd4 	movui	r2,65535
    8f04:	14c09236 	bltu	r2,r19,9150 <__umoddi3+0x2a8>
    8f08:	00803fc4 	movi	r2,255
    8f0c:	14c15c36 	bltu	r2,r19,9480 <__umoddi3+0x5d8>
    8f10:	000b883a 	mov	r5,zero
    8f14:	0005883a 	mov	r2,zero
    8f18:	9884d83a 	srl	r2,r19,r2
    8f1c:	01000074 	movhi	r4,1
    8f20:	2136c804 	addi	r4,r4,-9440
    8f24:	01800804 	movi	r6,32
    8f28:	1105883a 	add	r2,r2,r4
    8f2c:	10c00003 	ldbu	r3,0(r2)
    8f30:	28c7883a 	add	r3,r5,r3
    8f34:	30e5c83a 	sub	r18,r6,r3
    8f38:	9000a41e 	bne	r18,zero,91cc <__umoddi3+0x324>
    8f3c:	982ed43a 	srli	r23,r19,16
    8f40:	acebc83a 	sub	r21,r21,r19
    8f44:	9d3fffcc 	andi	r20,r19,65535
    8f48:	002d883a 	mov	r22,zero
    8f4c:	a809883a 	mov	r4,r21
    8f50:	b80b883a 	mov	r5,r23
    8f54:	000a7700 	call	a770 <__udivsi3>
    8f58:	100b883a 	mov	r5,r2
    8f5c:	a009883a 	mov	r4,r20
    8f60:	000a7800 	call	a780 <__mulsi3>
    8f64:	a809883a 	mov	r4,r21
    8f68:	b80b883a 	mov	r5,r23
    8f6c:	1023883a 	mov	r17,r2
    8f70:	000a7780 	call	a778 <__umodsi3>
    8f74:	1004943a 	slli	r2,r2,16
    8f78:	8006d43a 	srli	r3,r16,16
    8f7c:	10c4b03a 	or	r2,r2,r3
    8f80:	1440032e 	bgeu	r2,r17,8f90 <__umoddi3+0xe8>
    8f84:	14c5883a 	add	r2,r2,r19
    8f88:	14c00136 	bltu	r2,r19,8f90 <__umoddi3+0xe8>
    8f8c:	14415836 	bltu	r2,r17,94f0 <__umoddi3+0x648>
    8f90:	1463c83a 	sub	r17,r2,r17
    8f94:	8809883a 	mov	r4,r17
    8f98:	b80b883a 	mov	r5,r23
    8f9c:	000a7700 	call	a770 <__udivsi3>
    8fa0:	a009883a 	mov	r4,r20
    8fa4:	00005306 	br	90f4 <__umoddi3+0x24c>
    8fa8:	380d883a 	mov	r6,r7
    8fac:	29c0132e 	bgeu	r5,r7,8ffc <__umoddi3+0x154>
    8fb0:	d9000415 	stw	r4,16(sp)
    8fb4:	d9400515 	stw	r5,20(sp)
    8fb8:	d9400417 	ldw	r5,16(sp)
    8fbc:	5813883a 	mov	r9,r11
    8fc0:	2811883a 	mov	r8,r5
    8fc4:	4005883a 	mov	r2,r8
    8fc8:	4807883a 	mov	r3,r9
    8fcc:	dfc00f17 	ldw	ra,60(sp)
    8fd0:	df000e17 	ldw	fp,56(sp)
    8fd4:	ddc00d17 	ldw	r23,52(sp)
    8fd8:	dd800c17 	ldw	r22,48(sp)
    8fdc:	dd400b17 	ldw	r21,44(sp)
    8fe0:	dd000a17 	ldw	r20,40(sp)
    8fe4:	dcc00917 	ldw	r19,36(sp)
    8fe8:	dc800817 	ldw	r18,32(sp)
    8fec:	dc400717 	ldw	r17,28(sp)
    8ff0:	dc000617 	ldw	r16,24(sp)
    8ff4:	dec01004 	addi	sp,sp,64
    8ff8:	f800283a 	ret
    8ffc:	00bfffd4 	movui	r2,65535
    9000:	11c06636 	bltu	r2,r7,919c <__umoddi3+0x2f4>
    9004:	00803fc4 	movi	r2,255
    9008:	11c12036 	bltu	r2,r7,948c <__umoddi3+0x5e4>
    900c:	000b883a 	mov	r5,zero
    9010:	0005883a 	mov	r2,zero
    9014:	3084d83a 	srl	r2,r6,r2
    9018:	01000074 	movhi	r4,1
    901c:	2136c804 	addi	r4,r4,-9440
    9020:	01c00804 	movi	r7,32
    9024:	1105883a 	add	r2,r2,r4
    9028:	10c00003 	ldbu	r3,0(r2)
    902c:	28c7883a 	add	r3,r5,r3
    9030:	38e5c83a 	sub	r18,r7,r3
    9034:	9000941e 	bne	r18,zero,9288 <__umoddi3+0x3e0>
    9038:	35405e36 	bltu	r6,r21,91b4 <__umoddi3+0x30c>
    903c:	84c05d2e 	bgeu	r16,r19,91b4 <__umoddi3+0x30c>
    9040:	8011883a 	mov	r8,r16
    9044:	a813883a 	mov	r9,r21
    9048:	dc000415 	stw	r16,16(sp)
    904c:	dd400515 	stw	r21,20(sp)
    9050:	003fdc06 	br	8fc4 <__umoddi3+0x11c>
    9054:	00bfffd4 	movui	r2,65535
    9058:	12004a36 	bltu	r2,r8,9184 <__umoddi3+0x2dc>
    905c:	00803fc4 	movi	r2,255
    9060:	12010d36 	bltu	r2,r8,9498 <__umoddi3+0x5f0>
    9064:	000b883a 	mov	r5,zero
    9068:	0005883a 	mov	r2,zero
    906c:	9884d83a 	srl	r2,r19,r2
    9070:	01000074 	movhi	r4,1
    9074:	2136c804 	addi	r4,r4,-9440
    9078:	01800804 	movi	r6,32
    907c:	1105883a 	add	r2,r2,r4
    9080:	10c00003 	ldbu	r3,0(r2)
    9084:	28c7883a 	add	r3,r5,r3
    9088:	30c7c83a 	sub	r3,r6,r3
    908c:	1800dc1e 	bne	r3,zero,9400 <__umoddi3+0x558>
    9090:	002d883a 	mov	r22,zero
    9094:	982ed43a 	srli	r23,r19,16
    9098:	a809883a 	mov	r4,r21
    909c:	9cbfffcc 	andi	r18,r19,65535
    90a0:	b80b883a 	mov	r5,r23
    90a4:	000a7700 	call	a770 <__udivsi3>
    90a8:	100b883a 	mov	r5,r2
    90ac:	9009883a 	mov	r4,r18
    90b0:	000a7800 	call	a780 <__mulsi3>
    90b4:	a809883a 	mov	r4,r21
    90b8:	b80b883a 	mov	r5,r23
    90bc:	1023883a 	mov	r17,r2
    90c0:	000a7780 	call	a778 <__umodsi3>
    90c4:	1004943a 	slli	r2,r2,16
    90c8:	8006d43a 	srli	r3,r16,16
    90cc:	10c4b03a 	or	r2,r2,r3
    90d0:	1440032e 	bgeu	r2,r17,90e0 <__umoddi3+0x238>
    90d4:	14c5883a 	add	r2,r2,r19
    90d8:	14c00136 	bltu	r2,r19,90e0 <__umoddi3+0x238>
    90dc:	14410236 	bltu	r2,r17,94e8 <__umoddi3+0x640>
    90e0:	1463c83a 	sub	r17,r2,r17
    90e4:	8809883a 	mov	r4,r17
    90e8:	b80b883a 	mov	r5,r23
    90ec:	000a7700 	call	a770 <__udivsi3>
    90f0:	9009883a 	mov	r4,r18
    90f4:	100b883a 	mov	r5,r2
    90f8:	000a7800 	call	a780 <__mulsi3>
    90fc:	8809883a 	mov	r4,r17
    9100:	b80b883a 	mov	r5,r23
    9104:	102b883a 	mov	r21,r2
    9108:	000a7780 	call	a778 <__umodsi3>
    910c:	1004943a 	slli	r2,r2,16
    9110:	80ffffcc 	andi	r3,r16,65535
    9114:	10c4b03a 	or	r2,r2,r3
    9118:	1540042e 	bgeu	r2,r21,912c <__umoddi3+0x284>
    911c:	14c5883a 	add	r2,r2,r19
    9120:	14c00236 	bltu	r2,r19,912c <__umoddi3+0x284>
    9124:	1540012e 	bgeu	r2,r21,912c <__umoddi3+0x284>
    9128:	14c5883a 	add	r2,r2,r19
    912c:	1545c83a 	sub	r2,r2,r21
    9130:	1584d83a 	srl	r2,r2,r22
    9134:	0013883a 	mov	r9,zero
    9138:	d8800415 	stw	r2,16(sp)
    913c:	d8c00417 	ldw	r3,16(sp)
    9140:	0005883a 	mov	r2,zero
    9144:	d8800515 	stw	r2,20(sp)
    9148:	1811883a 	mov	r8,r3
    914c:	003f9d06 	br	8fc4 <__umoddi3+0x11c>
    9150:	00804034 	movhi	r2,256
    9154:	10bfffc4 	addi	r2,r2,-1
    9158:	14c0c636 	bltu	r2,r19,9474 <__umoddi3+0x5cc>
    915c:	01400404 	movi	r5,16
    9160:	2805883a 	mov	r2,r5
    9164:	003f6c06 	br	8f18 <__umoddi3+0x70>
    9168:	01000044 	movi	r4,1
    916c:	000b883a 	mov	r5,zero
    9170:	000a7700 	call	a770 <__udivsi3>
    9174:	1027883a 	mov	r19,r2
    9178:	00bfffd4 	movui	r2,65535
    917c:	14fff436 	bltu	r2,r19,9150 <__umoddi3+0x2a8>
    9180:	003f6106 	br	8f08 <__umoddi3+0x60>
    9184:	00804034 	movhi	r2,256
    9188:	10bfffc4 	addi	r2,r2,-1
    918c:	1200c536 	bltu	r2,r8,94a4 <__umoddi3+0x5fc>
    9190:	01400404 	movi	r5,16
    9194:	2805883a 	mov	r2,r5
    9198:	003fb406 	br	906c <__umoddi3+0x1c4>
    919c:	00804034 	movhi	r2,256
    91a0:	10bfffc4 	addi	r2,r2,-1
    91a4:	11c0c236 	bltu	r2,r7,94b0 <__umoddi3+0x608>
    91a8:	01400404 	movi	r5,16
    91ac:	2805883a 	mov	r2,r5
    91b0:	003f9806 	br	9014 <__umoddi3+0x16c>
    91b4:	84c9c83a 	sub	r4,r16,r19
    91b8:	8105803a 	cmpltu	r2,r16,r4
    91bc:	a987c83a 	sub	r3,r21,r6
    91c0:	18abc83a 	sub	r21,r3,r2
    91c4:	2021883a 	mov	r16,r4
    91c8:	003f9d06 	br	9040 <__umoddi3+0x198>
    91cc:	9ca6983a 	sll	r19,r19,r18
    91d0:	3485c83a 	sub	r2,r6,r18
    91d4:	a8a2d83a 	srl	r17,r21,r2
    91d8:	982ed43a 	srli	r23,r19,16
    91dc:	ac86983a 	sll	r3,r21,r18
    91e0:	8084d83a 	srl	r2,r16,r2
    91e4:	8809883a 	mov	r4,r17
    91e8:	b80b883a 	mov	r5,r23
    91ec:	18b8b03a 	or	fp,r3,r2
    91f0:	9d3fffcc 	andi	r20,r19,65535
    91f4:	000a7700 	call	a770 <__udivsi3>
    91f8:	100b883a 	mov	r5,r2
    91fc:	a009883a 	mov	r4,r20
    9200:	000a7800 	call	a780 <__mulsi3>
    9204:	8809883a 	mov	r4,r17
    9208:	b80b883a 	mov	r5,r23
    920c:	102b883a 	mov	r21,r2
    9210:	000a7780 	call	a778 <__umodsi3>
    9214:	1004943a 	slli	r2,r2,16
    9218:	e006d43a 	srli	r3,fp,16
    921c:	902d883a 	mov	r22,r18
    9220:	10c4b03a 	or	r2,r2,r3
    9224:	1540022e 	bgeu	r2,r21,9230 <__umoddi3+0x388>
    9228:	14c5883a 	add	r2,r2,r19
    922c:	14c0ab2e 	bgeu	r2,r19,94dc <__umoddi3+0x634>
    9230:	1563c83a 	sub	r17,r2,r21
    9234:	8809883a 	mov	r4,r17
    9238:	b80b883a 	mov	r5,r23
    923c:	000a7700 	call	a770 <__udivsi3>
    9240:	100b883a 	mov	r5,r2
    9244:	a009883a 	mov	r4,r20
    9248:	000a7800 	call	a780 <__mulsi3>
    924c:	8809883a 	mov	r4,r17
    9250:	b80b883a 	mov	r5,r23
    9254:	102b883a 	mov	r21,r2
    9258:	000a7780 	call	a778 <__umodsi3>
    925c:	1004943a 	slli	r2,r2,16
    9260:	e0ffffcc 	andi	r3,fp,65535
    9264:	10c4b03a 	or	r2,r2,r3
    9268:	1540042e 	bgeu	r2,r21,927c <__umoddi3+0x3d4>
    926c:	14c5883a 	add	r2,r2,r19
    9270:	14c00236 	bltu	r2,r19,927c <__umoddi3+0x3d4>
    9274:	1540012e 	bgeu	r2,r21,927c <__umoddi3+0x3d4>
    9278:	14c5883a 	add	r2,r2,r19
    927c:	84a0983a 	sll	r16,r16,r18
    9280:	156bc83a 	sub	r21,r2,r21
    9284:	003f3106 	br	8f4c <__umoddi3+0xa4>
    9288:	3c8fc83a 	sub	r7,r7,r18
    928c:	3486983a 	sll	r3,r6,r18
    9290:	99c4d83a 	srl	r2,r19,r7
    9294:	a9e2d83a 	srl	r17,r21,r7
    9298:	ac8c983a 	sll	r6,r21,r18
    929c:	18acb03a 	or	r22,r3,r2
    92a0:	b02ed43a 	srli	r23,r22,16
    92a4:	81c4d83a 	srl	r2,r16,r7
    92a8:	8809883a 	mov	r4,r17
    92ac:	b80b883a 	mov	r5,r23
    92b0:	308cb03a 	or	r6,r6,r2
    92b4:	d9c00315 	stw	r7,12(sp)
    92b8:	d9800215 	stw	r6,8(sp)
    92bc:	b53fffcc 	andi	r20,r22,65535
    92c0:	000a7700 	call	a770 <__udivsi3>
    92c4:	100b883a 	mov	r5,r2
    92c8:	a009883a 	mov	r4,r20
    92cc:	1039883a 	mov	fp,r2
    92d0:	000a7800 	call	a780 <__mulsi3>
    92d4:	8809883a 	mov	r4,r17
    92d8:	b80b883a 	mov	r5,r23
    92dc:	102b883a 	mov	r21,r2
    92e0:	000a7780 	call	a778 <__umodsi3>
    92e4:	d9000217 	ldw	r4,8(sp)
    92e8:	1004943a 	slli	r2,r2,16
    92ec:	9ca6983a 	sll	r19,r19,r18
    92f0:	2006d43a 	srli	r3,r4,16
    92f4:	84a0983a 	sll	r16,r16,r18
    92f8:	dcc00015 	stw	r19,0(sp)
    92fc:	10c4b03a 	or	r2,r2,r3
    9300:	dc000115 	stw	r16,4(sp)
    9304:	1540032e 	bgeu	r2,r21,9314 <__umoddi3+0x46c>
    9308:	1585883a 	add	r2,r2,r22
    930c:	e73fffc4 	addi	fp,fp,-1
    9310:	15806e2e 	bgeu	r2,r22,94cc <__umoddi3+0x624>
    9314:	1563c83a 	sub	r17,r2,r21
    9318:	8809883a 	mov	r4,r17
    931c:	b80b883a 	mov	r5,r23
    9320:	000a7700 	call	a770 <__udivsi3>
    9324:	100b883a 	mov	r5,r2
    9328:	a009883a 	mov	r4,r20
    932c:	1021883a 	mov	r16,r2
    9330:	000a7800 	call	a780 <__mulsi3>
    9334:	b80b883a 	mov	r5,r23
    9338:	8809883a 	mov	r4,r17
    933c:	1029883a 	mov	r20,r2
    9340:	000a7780 	call	a778 <__umodsi3>
    9344:	d9400217 	ldw	r5,8(sp)
    9348:	1004943a 	slli	r2,r2,16
    934c:	28ffffcc 	andi	r3,r5,65535
    9350:	10c4b03a 	or	r2,r2,r3
    9354:	1500032e 	bgeu	r2,r20,9364 <__umoddi3+0x4bc>
    9358:	1585883a 	add	r2,r2,r22
    935c:	843fffc4 	addi	r16,r16,-1
    9360:	1580562e 	bgeu	r2,r22,94bc <__umoddi3+0x614>
    9364:	d9800017 	ldw	r6,0(sp)
    9368:	e022943a 	slli	r17,fp,16
    936c:	302ed43a 	srli	r23,r6,16
    9370:	8462b03a 	or	r17,r16,r17
    9374:	34ffffcc 	andi	r19,r6,65535
    9378:	882ad43a 	srli	r21,r17,16
    937c:	8c7fffcc 	andi	r17,r17,65535
    9380:	8809883a 	mov	r4,r17
    9384:	980b883a 	mov	r5,r19
    9388:	1521c83a 	sub	r16,r2,r20
    938c:	000a7800 	call	a780 <__mulsi3>
    9390:	8809883a 	mov	r4,r17
    9394:	b80b883a 	mov	r5,r23
    9398:	1029883a 	mov	r20,r2
    939c:	000a7800 	call	a780 <__mulsi3>
    93a0:	980b883a 	mov	r5,r19
    93a4:	a809883a 	mov	r4,r21
    93a8:	1023883a 	mov	r17,r2
    93ac:	000a7800 	call	a780 <__mulsi3>
    93b0:	a809883a 	mov	r4,r21
    93b4:	b80b883a 	mov	r5,r23
    93b8:	1027883a 	mov	r19,r2
    93bc:	000a7800 	call	a780 <__mulsi3>
    93c0:	100b883a 	mov	r5,r2
    93c4:	a004d43a 	srli	r2,r20,16
    93c8:	8ce3883a 	add	r17,r17,r19
    93cc:	1449883a 	add	r4,r2,r17
    93d0:	24c0022e 	bgeu	r4,r19,93dc <__umoddi3+0x534>
    93d4:	00800074 	movhi	r2,1
    93d8:	288b883a 	add	r5,r5,r2
    93dc:	2004d43a 	srli	r2,r4,16
    93e0:	2008943a 	slli	r4,r4,16
    93e4:	a0ffffcc 	andi	r3,r20,65535
    93e8:	288d883a 	add	r6,r5,r2
    93ec:	20c9883a 	add	r4,r4,r3
    93f0:	81800b36 	bltu	r16,r6,9420 <__umoddi3+0x578>
    93f4:	81804026 	beq	r16,r6,94f8 <__umoddi3+0x650>
    93f8:	818dc83a 	sub	r6,r16,r6
    93fc:	00000f06 	br	943c <__umoddi3+0x594>
    9400:	30c5c83a 	sub	r2,r6,r3
    9404:	182d883a 	mov	r22,r3
    9408:	8084d83a 	srl	r2,r16,r2
    940c:	a8c6983a 	sll	r3,r21,r3
    9410:	9da6983a 	sll	r19,r19,r22
    9414:	85a0983a 	sll	r16,r16,r22
    9418:	18aab03a 	or	r21,r3,r2
    941c:	003f1d06 	br	9094 <__umoddi3+0x1ec>
    9420:	d8c00017 	ldw	r3,0(sp)
    9424:	20c5c83a 	sub	r2,r4,r3
    9428:	2089803a 	cmpltu	r4,r4,r2
    942c:	3587c83a 	sub	r3,r6,r22
    9430:	1907c83a 	sub	r3,r3,r4
    9434:	80cdc83a 	sub	r6,r16,r3
    9438:	1009883a 	mov	r4,r2
    943c:	d9400117 	ldw	r5,4(sp)
    9440:	2905c83a 	sub	r2,r5,r4
    9444:	2887803a 	cmpltu	r3,r5,r2
    9448:	30c7c83a 	sub	r3,r6,r3
    944c:	d9800317 	ldw	r6,12(sp)
    9450:	1484d83a 	srl	r2,r2,r18
    9454:	1988983a 	sll	r4,r3,r6
    9458:	1c86d83a 	srl	r3,r3,r18
    945c:	2088b03a 	or	r4,r4,r2
    9460:	2011883a 	mov	r8,r4
    9464:	1813883a 	mov	r9,r3
    9468:	d9000415 	stw	r4,16(sp)
    946c:	d8c00515 	stw	r3,20(sp)
    9470:	003ed406 	br	8fc4 <__umoddi3+0x11c>
    9474:	01400604 	movi	r5,24
    9478:	2805883a 	mov	r2,r5
    947c:	003ea606 	br	8f18 <__umoddi3+0x70>
    9480:	01400204 	movi	r5,8
    9484:	2805883a 	mov	r2,r5
    9488:	003ea306 	br	8f18 <__umoddi3+0x70>
    948c:	01400204 	movi	r5,8
    9490:	2805883a 	mov	r2,r5
    9494:	003edf06 	br	9014 <__umoddi3+0x16c>
    9498:	01400204 	movi	r5,8
    949c:	2805883a 	mov	r2,r5
    94a0:	003ef206 	br	906c <__umoddi3+0x1c4>
    94a4:	01400604 	movi	r5,24
    94a8:	2805883a 	mov	r2,r5
    94ac:	003eef06 	br	906c <__umoddi3+0x1c4>
    94b0:	01400604 	movi	r5,24
    94b4:	2805883a 	mov	r2,r5
    94b8:	003ed606 	br	9014 <__umoddi3+0x16c>
    94bc:	153fa92e 	bgeu	r2,r20,9364 <__umoddi3+0x4bc>
    94c0:	843fffc4 	addi	r16,r16,-1
    94c4:	1585883a 	add	r2,r2,r22
    94c8:	003fa606 	br	9364 <__umoddi3+0x4bc>
    94cc:	157f912e 	bgeu	r2,r21,9314 <__umoddi3+0x46c>
    94d0:	e73fffc4 	addi	fp,fp,-1
    94d4:	1585883a 	add	r2,r2,r22
    94d8:	003f8e06 	br	9314 <__umoddi3+0x46c>
    94dc:	157f542e 	bgeu	r2,r21,9230 <__umoddi3+0x388>
    94e0:	14c5883a 	add	r2,r2,r19
    94e4:	003f5206 	br	9230 <__umoddi3+0x388>
    94e8:	14c5883a 	add	r2,r2,r19
    94ec:	003efc06 	br	90e0 <__umoddi3+0x238>
    94f0:	14c5883a 	add	r2,r2,r19
    94f4:	003ea606 	br	8f90 <__umoddi3+0xe8>
    94f8:	d8800117 	ldw	r2,4(sp)
    94fc:	113fc836 	bltu	r2,r4,9420 <__umoddi3+0x578>
    9500:	000d883a 	mov	r6,zero
    9504:	003fcd06 	br	943c <__umoddi3+0x594>

00009508 <_fpadd_parts>:
    9508:	defff804 	addi	sp,sp,-32
    950c:	dcc00315 	stw	r19,12(sp)
    9510:	2027883a 	mov	r19,r4
    9514:	21000017 	ldw	r4,0(r4)
    9518:	00c00044 	movi	r3,1
    951c:	dd400515 	stw	r21,20(sp)
    9520:	dd000415 	stw	r20,16(sp)
    9524:	ddc00715 	stw	r23,28(sp)
    9528:	dd800615 	stw	r22,24(sp)
    952c:	dc800215 	stw	r18,8(sp)
    9530:	dc400115 	stw	r17,4(sp)
    9534:	dc000015 	stw	r16,0(sp)
    9538:	282b883a 	mov	r21,r5
    953c:	3029883a 	mov	r20,r6
    9540:	1900632e 	bgeu	r3,r4,96d0 <_fpadd_parts+0x1c8>
    9544:	28800017 	ldw	r2,0(r5)
    9548:	1880812e 	bgeu	r3,r2,9750 <_fpadd_parts+0x248>
    954c:	00c00104 	movi	r3,4
    9550:	20c0dc26 	beq	r4,r3,98c4 <_fpadd_parts+0x3bc>
    9554:	10c07e26 	beq	r2,r3,9750 <_fpadd_parts+0x248>
    9558:	00c00084 	movi	r3,2
    955c:	10c06726 	beq	r2,r3,96fc <_fpadd_parts+0x1f4>
    9560:	20c07b26 	beq	r4,r3,9750 <_fpadd_parts+0x248>
    9564:	9dc00217 	ldw	r23,8(r19)
    9568:	28c00217 	ldw	r3,8(r5)
    956c:	9c400317 	ldw	r17,12(r19)
    9570:	2bc00317 	ldw	r15,12(r5)
    9574:	b8cdc83a 	sub	r6,r23,r3
    9578:	9c800417 	ldw	r18,16(r19)
    957c:	2c000417 	ldw	r16,16(r5)
    9580:	3009883a 	mov	r4,r6
    9584:	30009716 	blt	r6,zero,97e4 <_fpadd_parts+0x2dc>
    9588:	00800fc4 	movi	r2,63
    958c:	11806b16 	blt	r2,r6,973c <_fpadd_parts+0x234>
    9590:	0100a40e 	bge	zero,r4,9824 <_fpadd_parts+0x31c>
    9594:	35bff804 	addi	r22,r6,-32
    9598:	b000bc16 	blt	r22,zero,988c <_fpadd_parts+0x384>
    959c:	8596d83a 	srl	r11,r16,r22
    95a0:	0019883a 	mov	r12,zero
    95a4:	0013883a 	mov	r9,zero
    95a8:	01000044 	movi	r4,1
    95ac:	0015883a 	mov	r10,zero
    95b0:	b000be16 	blt	r22,zero,98ac <_fpadd_parts+0x3a4>
    95b4:	2590983a 	sll	r8,r4,r22
    95b8:	000f883a 	mov	r7,zero
    95bc:	00bfffc4 	movi	r2,-1
    95c0:	3889883a 	add	r4,r7,r2
    95c4:	408b883a 	add	r5,r8,r2
    95c8:	21cd803a 	cmpltu	r6,r4,r7
    95cc:	314b883a 	add	r5,r6,r5
    95d0:	7904703a 	and	r2,r15,r4
    95d4:	8146703a 	and	r3,r16,r5
    95d8:	10c4b03a 	or	r2,r2,r3
    95dc:	10000226 	beq	r2,zero,95e8 <_fpadd_parts+0xe0>
    95e0:	02400044 	movi	r9,1
    95e4:	0015883a 	mov	r10,zero
    95e8:	5a5eb03a 	or	r15,r11,r9
    95ec:	62a0b03a 	or	r16,r12,r10
    95f0:	99400117 	ldw	r5,4(r19)
    95f4:	a8800117 	ldw	r2,4(r21)
    95f8:	28806e26 	beq	r5,r2,97b4 <_fpadd_parts+0x2ac>
    95fc:	28006626 	beq	r5,zero,9798 <_fpadd_parts+0x290>
    9600:	7c45c83a 	sub	r2,r15,r17
    9604:	7889803a 	cmpltu	r4,r15,r2
    9608:	8487c83a 	sub	r3,r16,r18
    960c:	1909c83a 	sub	r4,r3,r4
    9610:	100d883a 	mov	r6,r2
    9614:	200f883a 	mov	r7,r4
    9618:	38007716 	blt	r7,zero,97f8 <_fpadd_parts+0x2f0>
    961c:	a5c00215 	stw	r23,8(r20)
    9620:	a1c00415 	stw	r7,16(r20)
    9624:	a0000115 	stw	zero,4(r20)
    9628:	a1800315 	stw	r6,12(r20)
    962c:	a2000317 	ldw	r8,12(r20)
    9630:	a2400417 	ldw	r9,16(r20)
    9634:	00bfffc4 	movi	r2,-1
    9638:	408b883a 	add	r5,r8,r2
    963c:	2a09803a 	cmpltu	r4,r5,r8
    9640:	488d883a 	add	r6,r9,r2
    9644:	01c40034 	movhi	r7,4096
    9648:	39ffffc4 	addi	r7,r7,-1
    964c:	218d883a 	add	r6,r4,r6
    9650:	39801736 	bltu	r7,r6,96b0 <_fpadd_parts+0x1a8>
    9654:	31c06526 	beq	r6,r7,97ec <_fpadd_parts+0x2e4>
    9658:	a3000217 	ldw	r12,8(r20)
    965c:	4209883a 	add	r4,r8,r8
    9660:	00bfffc4 	movi	r2,-1
    9664:	220f803a 	cmpltu	r7,r4,r8
    9668:	4a4b883a 	add	r5,r9,r9
    966c:	394f883a 	add	r7,r7,r5
    9670:	2095883a 	add	r10,r4,r2
    9674:	3897883a 	add	r11,r7,r2
    9678:	510d803a 	cmpltu	r6,r10,r4
    967c:	6099883a 	add	r12,r12,r2
    9680:	32d7883a 	add	r11,r6,r11
    9684:	00840034 	movhi	r2,4096
    9688:	10bfffc4 	addi	r2,r2,-1
    968c:	2011883a 	mov	r8,r4
    9690:	3813883a 	mov	r9,r7
    9694:	a1000315 	stw	r4,12(r20)
    9698:	a1c00415 	stw	r7,16(r20)
    969c:	a3000215 	stw	r12,8(r20)
    96a0:	12c00336 	bltu	r2,r11,96b0 <_fpadd_parts+0x1a8>
    96a4:	58bfed1e 	bne	r11,r2,965c <_fpadd_parts+0x154>
    96a8:	00bfff84 	movi	r2,-2
    96ac:	12bfeb2e 	bgeu	r2,r10,965c <_fpadd_parts+0x154>
    96b0:	a2800417 	ldw	r10,16(r20)
    96b4:	008000c4 	movi	r2,3
    96b8:	00c80034 	movhi	r3,8192
    96bc:	18ffffc4 	addi	r3,r3,-1
    96c0:	a2400317 	ldw	r9,12(r20)
    96c4:	a0800015 	stw	r2,0(r20)
    96c8:	1a802336 	bltu	r3,r10,9758 <_fpadd_parts+0x250>
    96cc:	a027883a 	mov	r19,r20
    96d0:	9805883a 	mov	r2,r19
    96d4:	ddc00717 	ldw	r23,28(sp)
    96d8:	dd800617 	ldw	r22,24(sp)
    96dc:	dd400517 	ldw	r21,20(sp)
    96e0:	dd000417 	ldw	r20,16(sp)
    96e4:	dcc00317 	ldw	r19,12(sp)
    96e8:	dc800217 	ldw	r18,8(sp)
    96ec:	dc400117 	ldw	r17,4(sp)
    96f0:	dc000017 	ldw	r16,0(sp)
    96f4:	dec00804 	addi	sp,sp,32
    96f8:	f800283a 	ret
    96fc:	20fff41e 	bne	r4,r3,96d0 <_fpadd_parts+0x1c8>
    9700:	31000015 	stw	r4,0(r6)
    9704:	98800117 	ldw	r2,4(r19)
    9708:	30800115 	stw	r2,4(r6)
    970c:	98c00217 	ldw	r3,8(r19)
    9710:	30c00215 	stw	r3,8(r6)
    9714:	98800317 	ldw	r2,12(r19)
    9718:	30800315 	stw	r2,12(r6)
    971c:	98c00417 	ldw	r3,16(r19)
    9720:	30c00415 	stw	r3,16(r6)
    9724:	98800117 	ldw	r2,4(r19)
    9728:	28c00117 	ldw	r3,4(r5)
    972c:	3027883a 	mov	r19,r6
    9730:	10c4703a 	and	r2,r2,r3
    9734:	30800115 	stw	r2,4(r6)
    9738:	003fe506 	br	96d0 <_fpadd_parts+0x1c8>
    973c:	1dc02616 	blt	r3,r23,97d8 <_fpadd_parts+0x2d0>
    9740:	0023883a 	mov	r17,zero
    9744:	182f883a 	mov	r23,r3
    9748:	0025883a 	mov	r18,zero
    974c:	003fa806 	br	95f0 <_fpadd_parts+0xe8>
    9750:	a827883a 	mov	r19,r21
    9754:	003fde06 	br	96d0 <_fpadd_parts+0x1c8>
    9758:	01800044 	movi	r6,1
    975c:	500497fa 	slli	r2,r10,31
    9760:	4808d07a 	srli	r4,r9,1
    9764:	518ad83a 	srl	r5,r10,r6
    9768:	a2000217 	ldw	r8,8(r20)
    976c:	1108b03a 	or	r4,r2,r4
    9770:	0007883a 	mov	r3,zero
    9774:	4984703a 	and	r2,r9,r6
    9778:	208cb03a 	or	r6,r4,r2
    977c:	28ceb03a 	or	r7,r5,r3
    9780:	42000044 	addi	r8,r8,1
    9784:	a027883a 	mov	r19,r20
    9788:	a1c00415 	stw	r7,16(r20)
    978c:	a2000215 	stw	r8,8(r20)
    9790:	a1800315 	stw	r6,12(r20)
    9794:	003fce06 	br	96d0 <_fpadd_parts+0x1c8>
    9798:	8bc5c83a 	sub	r2,r17,r15
    979c:	8889803a 	cmpltu	r4,r17,r2
    97a0:	9407c83a 	sub	r3,r18,r16
    97a4:	1909c83a 	sub	r4,r3,r4
    97a8:	100d883a 	mov	r6,r2
    97ac:	200f883a 	mov	r7,r4
    97b0:	003f9906 	br	9618 <_fpadd_parts+0x110>
    97b4:	7c45883a 	add	r2,r15,r17
    97b8:	13c9803a 	cmpltu	r4,r2,r15
    97bc:	8487883a 	add	r3,r16,r18
    97c0:	20c9883a 	add	r4,r4,r3
    97c4:	a1400115 	stw	r5,4(r20)
    97c8:	a5c00215 	stw	r23,8(r20)
    97cc:	a0800315 	stw	r2,12(r20)
    97d0:	a1000415 	stw	r4,16(r20)
    97d4:	003fb606 	br	96b0 <_fpadd_parts+0x1a8>
    97d8:	001f883a 	mov	r15,zero
    97dc:	0021883a 	mov	r16,zero
    97e0:	003f8306 	br	95f0 <_fpadd_parts+0xe8>
    97e4:	018dc83a 	sub	r6,zero,r6
    97e8:	003f6706 	br	9588 <_fpadd_parts+0x80>
    97ec:	00bfff84 	movi	r2,-2
    97f0:	117faf36 	bltu	r2,r5,96b0 <_fpadd_parts+0x1a8>
    97f4:	003f9806 	br	9658 <_fpadd_parts+0x150>
    97f8:	0005883a 	mov	r2,zero
    97fc:	1189c83a 	sub	r4,r2,r6
    9800:	1105803a 	cmpltu	r2,r2,r4
    9804:	01cbc83a 	sub	r5,zero,r7
    9808:	2885c83a 	sub	r2,r5,r2
    980c:	01800044 	movi	r6,1
    9810:	a1800115 	stw	r6,4(r20)
    9814:	a5c00215 	stw	r23,8(r20)
    9818:	a1000315 	stw	r4,12(r20)
    981c:	a0800415 	stw	r2,16(r20)
    9820:	003f8206 	br	962c <_fpadd_parts+0x124>
    9824:	203f7226 	beq	r4,zero,95f0 <_fpadd_parts+0xe8>
    9828:	35bff804 	addi	r22,r6,-32
    982c:	b9af883a 	add	r23,r23,r6
    9830:	b0003116 	blt	r22,zero,98f8 <_fpadd_parts+0x3f0>
    9834:	959ad83a 	srl	r13,r18,r22
    9838:	001d883a 	mov	r14,zero
    983c:	000f883a 	mov	r7,zero
    9840:	01000044 	movi	r4,1
    9844:	0011883a 	mov	r8,zero
    9848:	b0002516 	blt	r22,zero,98e0 <_fpadd_parts+0x3d8>
    984c:	2594983a 	sll	r10,r4,r22
    9850:	0013883a 	mov	r9,zero
    9854:	00bfffc4 	movi	r2,-1
    9858:	4889883a 	add	r4,r9,r2
    985c:	508b883a 	add	r5,r10,r2
    9860:	224d803a 	cmpltu	r6,r4,r9
    9864:	314b883a 	add	r5,r6,r5
    9868:	8904703a 	and	r2,r17,r4
    986c:	9146703a 	and	r3,r18,r5
    9870:	10c4b03a 	or	r2,r2,r3
    9874:	10000226 	beq	r2,zero,9880 <_fpadd_parts+0x378>
    9878:	01c00044 	movi	r7,1
    987c:	0011883a 	mov	r8,zero
    9880:	69e2b03a 	or	r17,r13,r7
    9884:	7224b03a 	or	r18,r14,r8
    9888:	003f5906 	br	95f0 <_fpadd_parts+0xe8>
    988c:	8407883a 	add	r3,r16,r16
    9890:	008007c4 	movi	r2,31
    9894:	1185c83a 	sub	r2,r2,r6
    9898:	1886983a 	sll	r3,r3,r2
    989c:	7996d83a 	srl	r11,r15,r6
    98a0:	8198d83a 	srl	r12,r16,r6
    98a4:	1ad6b03a 	or	r11,r3,r11
    98a8:	003f3e06 	br	95a4 <_fpadd_parts+0x9c>
    98ac:	2006d07a 	srli	r3,r4,1
    98b0:	008007c4 	movi	r2,31
    98b4:	1185c83a 	sub	r2,r2,r6
    98b8:	1890d83a 	srl	r8,r3,r2
    98bc:	218e983a 	sll	r7,r4,r6
    98c0:	003f3e06 	br	95bc <_fpadd_parts+0xb4>
    98c4:	113f821e 	bne	r2,r4,96d0 <_fpadd_parts+0x1c8>
    98c8:	28c00117 	ldw	r3,4(r5)
    98cc:	98800117 	ldw	r2,4(r19)
    98d0:	10ff7f26 	beq	r2,r3,96d0 <_fpadd_parts+0x1c8>
    98d4:	04c00074 	movhi	r19,1
    98d8:	9cf6c304 	addi	r19,r19,-9460
    98dc:	003f7c06 	br	96d0 <_fpadd_parts+0x1c8>
    98e0:	2006d07a 	srli	r3,r4,1
    98e4:	008007c4 	movi	r2,31
    98e8:	1185c83a 	sub	r2,r2,r6
    98ec:	1894d83a 	srl	r10,r3,r2
    98f0:	2192983a 	sll	r9,r4,r6
    98f4:	003fd706 	br	9854 <_fpadd_parts+0x34c>
    98f8:	9487883a 	add	r3,r18,r18
    98fc:	008007c4 	movi	r2,31
    9900:	1185c83a 	sub	r2,r2,r6
    9904:	1886983a 	sll	r3,r3,r2
    9908:	899ad83a 	srl	r13,r17,r6
    990c:	919cd83a 	srl	r14,r18,r6
    9910:	1b5ab03a 	or	r13,r3,r13
    9914:	003fc906 	br	983c <_fpadd_parts+0x334>

00009918 <__subdf3>:
    9918:	deffea04 	addi	sp,sp,-88
    991c:	dcc01415 	stw	r19,80(sp)
    9920:	dcc00404 	addi	r19,sp,16
    9924:	2011883a 	mov	r8,r4
    9928:	2813883a 	mov	r9,r5
    992c:	dc401315 	stw	r17,76(sp)
    9930:	d809883a 	mov	r4,sp
    9934:	980b883a 	mov	r5,r19
    9938:	dc400904 	addi	r17,sp,36
    993c:	dfc01515 	stw	ra,84(sp)
    9940:	da400115 	stw	r9,4(sp)
    9944:	d9c00315 	stw	r7,12(sp)
    9948:	da000015 	stw	r8,0(sp)
    994c:	d9800215 	stw	r6,8(sp)
    9950:	000ac700 	call	ac70 <__unpack_d>
    9954:	d9000204 	addi	r4,sp,8
    9958:	880b883a 	mov	r5,r17
    995c:	000ac700 	call	ac70 <__unpack_d>
    9960:	d8800a17 	ldw	r2,40(sp)
    9964:	880b883a 	mov	r5,r17
    9968:	9809883a 	mov	r4,r19
    996c:	d9800e04 	addi	r6,sp,56
    9970:	1080005c 	xori	r2,r2,1
    9974:	d8800a15 	stw	r2,40(sp)
    9978:	00095080 	call	9508 <_fpadd_parts>
    997c:	1009883a 	mov	r4,r2
    9980:	000a95c0 	call	a95c <__pack_d>
    9984:	dfc01517 	ldw	ra,84(sp)
    9988:	dcc01417 	ldw	r19,80(sp)
    998c:	dc401317 	ldw	r17,76(sp)
    9990:	dec01604 	addi	sp,sp,88
    9994:	f800283a 	ret

00009998 <__adddf3>:
    9998:	deffea04 	addi	sp,sp,-88
    999c:	dcc01415 	stw	r19,80(sp)
    99a0:	dcc00404 	addi	r19,sp,16
    99a4:	2011883a 	mov	r8,r4
    99a8:	2813883a 	mov	r9,r5
    99ac:	dc401315 	stw	r17,76(sp)
    99b0:	d809883a 	mov	r4,sp
    99b4:	980b883a 	mov	r5,r19
    99b8:	dc400904 	addi	r17,sp,36
    99bc:	dfc01515 	stw	ra,84(sp)
    99c0:	da400115 	stw	r9,4(sp)
    99c4:	d9c00315 	stw	r7,12(sp)
    99c8:	da000015 	stw	r8,0(sp)
    99cc:	d9800215 	stw	r6,8(sp)
    99d0:	000ac700 	call	ac70 <__unpack_d>
    99d4:	d9000204 	addi	r4,sp,8
    99d8:	880b883a 	mov	r5,r17
    99dc:	000ac700 	call	ac70 <__unpack_d>
    99e0:	d9800e04 	addi	r6,sp,56
    99e4:	9809883a 	mov	r4,r19
    99e8:	880b883a 	mov	r5,r17
    99ec:	00095080 	call	9508 <_fpadd_parts>
    99f0:	1009883a 	mov	r4,r2
    99f4:	000a95c0 	call	a95c <__pack_d>
    99f8:	dfc01517 	ldw	ra,84(sp)
    99fc:	dcc01417 	ldw	r19,80(sp)
    9a00:	dc401317 	ldw	r17,76(sp)
    9a04:	dec01604 	addi	sp,sp,88
    9a08:	f800283a 	ret

00009a0c <__muldf3>:
    9a0c:	deffe004 	addi	sp,sp,-128
    9a10:	dc401815 	stw	r17,96(sp)
    9a14:	dc400404 	addi	r17,sp,16
    9a18:	2011883a 	mov	r8,r4
    9a1c:	2813883a 	mov	r9,r5
    9a20:	dc001715 	stw	r16,92(sp)
    9a24:	d809883a 	mov	r4,sp
    9a28:	880b883a 	mov	r5,r17
    9a2c:	dc000904 	addi	r16,sp,36
    9a30:	dfc01f15 	stw	ra,124(sp)
    9a34:	da400115 	stw	r9,4(sp)
    9a38:	d9c00315 	stw	r7,12(sp)
    9a3c:	da000015 	stw	r8,0(sp)
    9a40:	d9800215 	stw	r6,8(sp)
    9a44:	ddc01e15 	stw	r23,120(sp)
    9a48:	dd801d15 	stw	r22,116(sp)
    9a4c:	dd401c15 	stw	r21,112(sp)
    9a50:	dd001b15 	stw	r20,108(sp)
    9a54:	dcc01a15 	stw	r19,104(sp)
    9a58:	dc801915 	stw	r18,100(sp)
    9a5c:	000ac700 	call	ac70 <__unpack_d>
    9a60:	d9000204 	addi	r4,sp,8
    9a64:	800b883a 	mov	r5,r16
    9a68:	000ac700 	call	ac70 <__unpack_d>
    9a6c:	d9000417 	ldw	r4,16(sp)
    9a70:	00800044 	movi	r2,1
    9a74:	1100102e 	bgeu	r2,r4,9ab8 <__muldf3+0xac>
    9a78:	d8c00917 	ldw	r3,36(sp)
    9a7c:	10c0062e 	bgeu	r2,r3,9a98 <__muldf3+0x8c>
    9a80:	00800104 	movi	r2,4
    9a84:	20800a26 	beq	r4,r2,9ab0 <__muldf3+0xa4>
    9a88:	1880cc26 	beq	r3,r2,9dbc <__muldf3+0x3b0>
    9a8c:	00800084 	movi	r2,2
    9a90:	20800926 	beq	r4,r2,9ab8 <__muldf3+0xac>
    9a94:	1880191e 	bne	r3,r2,9afc <__muldf3+0xf0>
    9a98:	d8c00a17 	ldw	r3,40(sp)
    9a9c:	d8800517 	ldw	r2,20(sp)
    9aa0:	8009883a 	mov	r4,r16
    9aa4:	10c4c03a 	cmpne	r2,r2,r3
    9aa8:	d8800a15 	stw	r2,40(sp)
    9aac:	00000706 	br	9acc <__muldf3+0xc0>
    9ab0:	00800084 	movi	r2,2
    9ab4:	1880c326 	beq	r3,r2,9dc4 <__muldf3+0x3b8>
    9ab8:	d8800517 	ldw	r2,20(sp)
    9abc:	d8c00a17 	ldw	r3,40(sp)
    9ac0:	8809883a 	mov	r4,r17
    9ac4:	10c4c03a 	cmpne	r2,r2,r3
    9ac8:	d8800515 	stw	r2,20(sp)
    9acc:	000a95c0 	call	a95c <__pack_d>
    9ad0:	dfc01f17 	ldw	ra,124(sp)
    9ad4:	ddc01e17 	ldw	r23,120(sp)
    9ad8:	dd801d17 	ldw	r22,116(sp)
    9adc:	dd401c17 	ldw	r21,112(sp)
    9ae0:	dd001b17 	ldw	r20,108(sp)
    9ae4:	dcc01a17 	ldw	r19,104(sp)
    9ae8:	dc801917 	ldw	r18,100(sp)
    9aec:	dc401817 	ldw	r17,96(sp)
    9af0:	dc001717 	ldw	r16,92(sp)
    9af4:	dec02004 	addi	sp,sp,128
    9af8:	f800283a 	ret
    9afc:	dd800717 	ldw	r22,28(sp)
    9b00:	dc800c17 	ldw	r18,48(sp)
    9b04:	002b883a 	mov	r21,zero
    9b08:	0023883a 	mov	r17,zero
    9b0c:	a80b883a 	mov	r5,r21
    9b10:	b00d883a 	mov	r6,r22
    9b14:	880f883a 	mov	r7,r17
    9b18:	ddc00817 	ldw	r23,32(sp)
    9b1c:	dcc00d17 	ldw	r19,52(sp)
    9b20:	9009883a 	mov	r4,r18
    9b24:	000a7b80 	call	a7b8 <__muldi3>
    9b28:	001b883a 	mov	r13,zero
    9b2c:	680f883a 	mov	r7,r13
    9b30:	b009883a 	mov	r4,r22
    9b34:	000b883a 	mov	r5,zero
    9b38:	980d883a 	mov	r6,r19
    9b3c:	b82d883a 	mov	r22,r23
    9b40:	002f883a 	mov	r23,zero
    9b44:	db401615 	stw	r13,88(sp)
    9b48:	d8801315 	stw	r2,76(sp)
    9b4c:	d8c01415 	stw	r3,80(sp)
    9b50:	dcc01515 	stw	r19,84(sp)
    9b54:	000a7b80 	call	a7b8 <__muldi3>
    9b58:	b00d883a 	mov	r6,r22
    9b5c:	000b883a 	mov	r5,zero
    9b60:	9009883a 	mov	r4,r18
    9b64:	b80f883a 	mov	r7,r23
    9b68:	1021883a 	mov	r16,r2
    9b6c:	1823883a 	mov	r17,r3
    9b70:	000a7b80 	call	a7b8 <__muldi3>
    9b74:	8085883a 	add	r2,r16,r2
    9b78:	140d803a 	cmpltu	r6,r2,r16
    9b7c:	88c7883a 	add	r3,r17,r3
    9b80:	30cd883a 	add	r6,r6,r3
    9b84:	1029883a 	mov	r20,r2
    9b88:	302b883a 	mov	r21,r6
    9b8c:	da801317 	ldw	r10,76(sp)
    9b90:	dac01417 	ldw	r11,80(sp)
    9b94:	db001517 	ldw	r12,84(sp)
    9b98:	db401617 	ldw	r13,88(sp)
    9b9c:	3440612e 	bgeu	r6,r17,9d24 <__muldf3+0x318>
    9ba0:	0009883a 	mov	r4,zero
    9ba4:	5105883a 	add	r2,r10,r4
    9ba8:	128d803a 	cmpltu	r6,r2,r10
    9bac:	5d07883a 	add	r3,r11,r20
    9bb0:	30cd883a 	add	r6,r6,r3
    9bb4:	0021883a 	mov	r16,zero
    9bb8:	04400044 	movi	r17,1
    9bbc:	1025883a 	mov	r18,r2
    9bc0:	3027883a 	mov	r19,r6
    9bc4:	32c06236 	bltu	r6,r11,9d50 <__muldf3+0x344>
    9bc8:	59807a26 	beq	r11,r6,9db4 <__muldf3+0x3a8>
    9bcc:	680b883a 	mov	r5,r13
    9bd0:	b80f883a 	mov	r7,r23
    9bd4:	6009883a 	mov	r4,r12
    9bd8:	b00d883a 	mov	r6,r22
    9bdc:	000a7b80 	call	a7b8 <__muldi3>
    9be0:	1009883a 	mov	r4,r2
    9be4:	000f883a 	mov	r7,zero
    9be8:	1545883a 	add	r2,r2,r21
    9bec:	1111803a 	cmpltu	r8,r2,r4
    9bf0:	19c7883a 	add	r3,r3,r7
    9bf4:	40c7883a 	add	r3,r8,r3
    9bf8:	88cb883a 	add	r5,r17,r3
    9bfc:	d8c00617 	ldw	r3,24(sp)
    9c00:	8089883a 	add	r4,r16,r2
    9c04:	d8800b17 	ldw	r2,44(sp)
    9c08:	18c00104 	addi	r3,r3,4
    9c0c:	240d803a 	cmpltu	r6,r4,r16
    9c10:	10c7883a 	add	r3,r2,r3
    9c14:	2013883a 	mov	r9,r4
    9c18:	d8800a17 	ldw	r2,40(sp)
    9c1c:	d9000517 	ldw	r4,20(sp)
    9c20:	314d883a 	add	r6,r6,r5
    9c24:	3015883a 	mov	r10,r6
    9c28:	2088c03a 	cmpne	r4,r4,r2
    9c2c:	00880034 	movhi	r2,8192
    9c30:	10bfffc4 	addi	r2,r2,-1
    9c34:	d9000f15 	stw	r4,60(sp)
    9c38:	d8c01015 	stw	r3,64(sp)
    9c3c:	1180162e 	bgeu	r2,r6,9c98 <__muldf3+0x28c>
    9c40:	1811883a 	mov	r8,r3
    9c44:	101f883a 	mov	r15,r2
    9c48:	980497fa 	slli	r2,r19,31
    9c4c:	9016d07a 	srli	r11,r18,1
    9c50:	500697fa 	slli	r3,r10,31
    9c54:	480cd07a 	srli	r6,r9,1
    9c58:	500ed07a 	srli	r7,r10,1
    9c5c:	12d6b03a 	or	r11,r2,r11
    9c60:	00800044 	movi	r2,1
    9c64:	198cb03a 	or	r6,r3,r6
    9c68:	4888703a 	and	r4,r9,r2
    9c6c:	9818d07a 	srli	r12,r19,1
    9c70:	001b883a 	mov	r13,zero
    9c74:	03a00034 	movhi	r14,32768
    9c78:	3013883a 	mov	r9,r6
    9c7c:	3815883a 	mov	r10,r7
    9c80:	4091883a 	add	r8,r8,r2
    9c84:	20000226 	beq	r4,zero,9c90 <__muldf3+0x284>
    9c88:	5b64b03a 	or	r18,r11,r13
    9c8c:	63a6b03a 	or	r19,r12,r14
    9c90:	7abfed36 	bltu	r15,r10,9c48 <__muldf3+0x23c>
    9c94:	da001015 	stw	r8,64(sp)
    9c98:	00840034 	movhi	r2,4096
    9c9c:	10bfffc4 	addi	r2,r2,-1
    9ca0:	12801436 	bltu	r2,r10,9cf4 <__muldf3+0x2e8>
    9ca4:	da001017 	ldw	r8,64(sp)
    9ca8:	101f883a 	mov	r15,r2
    9cac:	4a45883a 	add	r2,r9,r9
    9cb0:	124d803a 	cmpltu	r6,r2,r9
    9cb4:	5287883a 	add	r3,r10,r10
    9cb8:	9497883a 	add	r11,r18,r18
    9cbc:	5c8f803a 	cmpltu	r7,r11,r18
    9cc0:	9cd9883a 	add	r12,r19,r19
    9cc4:	01000044 	movi	r4,1
    9cc8:	30cd883a 	add	r6,r6,r3
    9ccc:	3b0f883a 	add	r7,r7,r12
    9cd0:	423fffc4 	addi	r8,r8,-1
    9cd4:	1013883a 	mov	r9,r2
    9cd8:	3015883a 	mov	r10,r6
    9cdc:	111ab03a 	or	r13,r2,r4
    9ce0:	98003016 	blt	r19,zero,9da4 <__muldf3+0x398>
    9ce4:	5825883a 	mov	r18,r11
    9ce8:	3827883a 	mov	r19,r7
    9cec:	7abfef2e 	bgeu	r15,r10,9cac <__muldf3+0x2a0>
    9cf0:	da001015 	stw	r8,64(sp)
    9cf4:	00803fc4 	movi	r2,255
    9cf8:	488e703a 	and	r7,r9,r2
    9cfc:	00802004 	movi	r2,128
    9d00:	0007883a 	mov	r3,zero
    9d04:	0011883a 	mov	r8,zero
    9d08:	38801826 	beq	r7,r2,9d6c <__muldf3+0x360>
    9d0c:	008000c4 	movi	r2,3
    9d10:	d9000e04 	addi	r4,sp,56
    9d14:	da801215 	stw	r10,72(sp)
    9d18:	d8800e15 	stw	r2,56(sp)
    9d1c:	da401115 	stw	r9,68(sp)
    9d20:	003f6a06 	br	9acc <__muldf3+0xc0>
    9d24:	89802126 	beq	r17,r6,9dac <__muldf3+0x3a0>
    9d28:	0009883a 	mov	r4,zero
    9d2c:	5105883a 	add	r2,r10,r4
    9d30:	128d803a 	cmpltu	r6,r2,r10
    9d34:	5d07883a 	add	r3,r11,r20
    9d38:	30cd883a 	add	r6,r6,r3
    9d3c:	0021883a 	mov	r16,zero
    9d40:	0023883a 	mov	r17,zero
    9d44:	1025883a 	mov	r18,r2
    9d48:	3027883a 	mov	r19,r6
    9d4c:	32ff9e2e 	bgeu	r6,r11,9bc8 <__muldf3+0x1bc>
    9d50:	00800044 	movi	r2,1
    9d54:	8089883a 	add	r4,r16,r2
    9d58:	240d803a 	cmpltu	r6,r4,r16
    9d5c:	344d883a 	add	r6,r6,r17
    9d60:	2021883a 	mov	r16,r4
    9d64:	3023883a 	mov	r17,r6
    9d68:	003f9806 	br	9bcc <__muldf3+0x1c0>
    9d6c:	403fe71e 	bne	r8,zero,9d0c <__muldf3+0x300>
    9d70:	01004004 	movi	r4,256
    9d74:	4904703a 	and	r2,r9,r4
    9d78:	10c4b03a 	or	r2,r2,r3
    9d7c:	103fe31e 	bne	r2,zero,9d0c <__muldf3+0x300>
    9d80:	94c4b03a 	or	r2,r18,r19
    9d84:	103fe126 	beq	r2,zero,9d0c <__muldf3+0x300>
    9d88:	49c5883a 	add	r2,r9,r7
    9d8c:	1251803a 	cmpltu	r8,r2,r9
    9d90:	4291883a 	add	r8,r8,r10
    9d94:	013fc004 	movi	r4,-256
    9d98:	1112703a 	and	r9,r2,r4
    9d9c:	4015883a 	mov	r10,r8
    9da0:	003fda06 	br	9d0c <__muldf3+0x300>
    9da4:	6813883a 	mov	r9,r13
    9da8:	003fce06 	br	9ce4 <__muldf3+0x2d8>
    9dac:	143f7c36 	bltu	r2,r16,9ba0 <__muldf3+0x194>
    9db0:	003fdd06 	br	9d28 <__muldf3+0x31c>
    9db4:	12bf852e 	bgeu	r2,r10,9bcc <__muldf3+0x1c0>
    9db8:	003fe506 	br	9d50 <__muldf3+0x344>
    9dbc:	00800084 	movi	r2,2
    9dc0:	20bf351e 	bne	r4,r2,9a98 <__muldf3+0x8c>
    9dc4:	01000074 	movhi	r4,1
    9dc8:	2136c304 	addi	r4,r4,-9460
    9dcc:	003f3f06 	br	9acc <__muldf3+0xc0>

00009dd0 <__divdf3>:
    9dd0:	deffed04 	addi	sp,sp,-76
    9dd4:	dcc01115 	stw	r19,68(sp)
    9dd8:	dcc00404 	addi	r19,sp,16
    9ddc:	2011883a 	mov	r8,r4
    9de0:	2813883a 	mov	r9,r5
    9de4:	dc000e15 	stw	r16,56(sp)
    9de8:	d809883a 	mov	r4,sp
    9dec:	980b883a 	mov	r5,r19
    9df0:	dc000904 	addi	r16,sp,36
    9df4:	dfc01215 	stw	ra,72(sp)
    9df8:	da400115 	stw	r9,4(sp)
    9dfc:	d9c00315 	stw	r7,12(sp)
    9e00:	da000015 	stw	r8,0(sp)
    9e04:	d9800215 	stw	r6,8(sp)
    9e08:	dc801015 	stw	r18,64(sp)
    9e0c:	dc400f15 	stw	r17,60(sp)
    9e10:	000ac700 	call	ac70 <__unpack_d>
    9e14:	d9000204 	addi	r4,sp,8
    9e18:	800b883a 	mov	r5,r16
    9e1c:	000ac700 	call	ac70 <__unpack_d>
    9e20:	d9000417 	ldw	r4,16(sp)
    9e24:	00800044 	movi	r2,1
    9e28:	11000b2e 	bgeu	r2,r4,9e58 <__divdf3+0x88>
    9e2c:	d9400917 	ldw	r5,36(sp)
    9e30:	1140762e 	bgeu	r2,r5,a00c <__divdf3+0x23c>
    9e34:	d8800517 	ldw	r2,20(sp)
    9e38:	d8c00a17 	ldw	r3,40(sp)
    9e3c:	01800104 	movi	r6,4
    9e40:	10c4f03a 	xor	r2,r2,r3
    9e44:	d8800515 	stw	r2,20(sp)
    9e48:	21800226 	beq	r4,r6,9e54 <__divdf3+0x84>
    9e4c:	00800084 	movi	r2,2
    9e50:	2080141e 	bne	r4,r2,9ea4 <__divdf3+0xd4>
    9e54:	29000926 	beq	r5,r4,9e7c <__divdf3+0xac>
    9e58:	9809883a 	mov	r4,r19
    9e5c:	000a95c0 	call	a95c <__pack_d>
    9e60:	dfc01217 	ldw	ra,72(sp)
    9e64:	dcc01117 	ldw	r19,68(sp)
    9e68:	dc801017 	ldw	r18,64(sp)
    9e6c:	dc400f17 	ldw	r17,60(sp)
    9e70:	dc000e17 	ldw	r16,56(sp)
    9e74:	dec01304 	addi	sp,sp,76
    9e78:	f800283a 	ret
    9e7c:	01000074 	movhi	r4,1
    9e80:	2136c304 	addi	r4,r4,-9460
    9e84:	000a95c0 	call	a95c <__pack_d>
    9e88:	dfc01217 	ldw	ra,72(sp)
    9e8c:	dcc01117 	ldw	r19,68(sp)
    9e90:	dc801017 	ldw	r18,64(sp)
    9e94:	dc400f17 	ldw	r17,60(sp)
    9e98:	dc000e17 	ldw	r16,56(sp)
    9e9c:	dec01304 	addi	sp,sp,76
    9ea0:	f800283a 	ret
    9ea4:	29805b26 	beq	r5,r6,a014 <__divdf3+0x244>
    9ea8:	28802d26 	beq	r5,r2,9f60 <__divdf3+0x190>
    9eac:	d8c00617 	ldw	r3,24(sp)
    9eb0:	d8800b17 	ldw	r2,44(sp)
    9eb4:	d9c00817 	ldw	r7,32(sp)
    9eb8:	dc400d17 	ldw	r17,52(sp)
    9ebc:	188bc83a 	sub	r5,r3,r2
    9ec0:	d9800717 	ldw	r6,28(sp)
    9ec4:	dc000c17 	ldw	r16,48(sp)
    9ec8:	d9400615 	stw	r5,24(sp)
    9ecc:	3c403836 	bltu	r7,r17,9fb0 <__divdf3+0x1e0>
    9ed0:	89c03626 	beq	r17,r7,9fac <__divdf3+0x1dc>
    9ed4:	0015883a 	mov	r10,zero
    9ed8:	001d883a 	mov	r14,zero
    9edc:	02c40034 	movhi	r11,4096
    9ee0:	001f883a 	mov	r15,zero
    9ee4:	003f883a 	mov	ra,zero
    9ee8:	04800f44 	movi	r18,61
    9eec:	00000f06 	br	9f2c <__divdf3+0x15c>
    9ef0:	601d883a 	mov	r14,r12
    9ef4:	681f883a 	mov	r15,r13
    9ef8:	400d883a 	mov	r6,r8
    9efc:	100f883a 	mov	r7,r2
    9f00:	3191883a 	add	r8,r6,r6
    9f04:	5808d07a 	srli	r4,r11,1
    9f08:	4185803a 	cmpltu	r2,r8,r6
    9f0c:	39d3883a 	add	r9,r7,r7
    9f10:	28c6b03a 	or	r3,r5,r3
    9f14:	1245883a 	add	r2,r2,r9
    9f18:	1815883a 	mov	r10,r3
    9f1c:	2017883a 	mov	r11,r4
    9f20:	400d883a 	mov	r6,r8
    9f24:	100f883a 	mov	r7,r2
    9f28:	fc801726 	beq	ra,r18,9f88 <__divdf3+0x1b8>
    9f2c:	580a97fa 	slli	r5,r11,31
    9f30:	5006d07a 	srli	r3,r10,1
    9f34:	ffc00044 	addi	ra,ra,1
    9f38:	3c7ff136 	bltu	r7,r17,9f00 <__divdf3+0x130>
    9f3c:	3411c83a 	sub	r8,r6,r16
    9f40:	3205803a 	cmpltu	r2,r6,r8
    9f44:	3c53c83a 	sub	r9,r7,r17
    9f48:	7298b03a 	or	r12,r14,r10
    9f4c:	7adab03a 	or	r13,r15,r11
    9f50:	4885c83a 	sub	r2,r9,r2
    9f54:	89ffe61e 	bne	r17,r7,9ef0 <__divdf3+0x120>
    9f58:	343fe936 	bltu	r6,r16,9f00 <__divdf3+0x130>
    9f5c:	003fe406 	br	9ef0 <__divdf3+0x120>
    9f60:	9809883a 	mov	r4,r19
    9f64:	d9800415 	stw	r6,16(sp)
    9f68:	000a95c0 	call	a95c <__pack_d>
    9f6c:	dfc01217 	ldw	ra,72(sp)
    9f70:	dcc01117 	ldw	r19,68(sp)
    9f74:	dc801017 	ldw	r18,64(sp)
    9f78:	dc400f17 	ldw	r17,60(sp)
    9f7c:	dc000e17 	ldw	r16,56(sp)
    9f80:	dec01304 	addi	sp,sp,76
    9f84:	f800283a 	ret
    9f88:	00803fc4 	movi	r2,255
    9f8c:	7090703a 	and	r8,r14,r2
    9f90:	00802004 	movi	r2,128
    9f94:	0007883a 	mov	r3,zero
    9f98:	0013883a 	mov	r9,zero
    9f9c:	40800d26 	beq	r8,r2,9fd4 <__divdf3+0x204>
    9fa0:	dbc00815 	stw	r15,32(sp)
    9fa4:	db800715 	stw	r14,28(sp)
    9fa8:	003fab06 	br	9e58 <__divdf3+0x88>
    9fac:	343fc92e 	bgeu	r6,r16,9ed4 <__divdf3+0x104>
    9fb0:	3185883a 	add	r2,r6,r6
    9fb4:	1189803a 	cmpltu	r4,r2,r6
    9fb8:	39c7883a 	add	r3,r7,r7
    9fbc:	20c9883a 	add	r4,r4,r3
    9fc0:	297fffc4 	addi	r5,r5,-1
    9fc4:	100d883a 	mov	r6,r2
    9fc8:	200f883a 	mov	r7,r4
    9fcc:	d9400615 	stw	r5,24(sp)
    9fd0:	003fc006 	br	9ed4 <__divdf3+0x104>
    9fd4:	483ff21e 	bne	r9,zero,9fa0 <__divdf3+0x1d0>
    9fd8:	01004004 	movi	r4,256
    9fdc:	7104703a 	and	r2,r14,r4
    9fe0:	10c4b03a 	or	r2,r2,r3
    9fe4:	103fee1e 	bne	r2,zero,9fa0 <__divdf3+0x1d0>
    9fe8:	31c4b03a 	or	r2,r6,r7
    9fec:	103fec26 	beq	r2,zero,9fa0 <__divdf3+0x1d0>
    9ff0:	7205883a 	add	r2,r14,r8
    9ff4:	1391803a 	cmpltu	r8,r2,r14
    9ff8:	43d1883a 	add	r8,r8,r15
    9ffc:	013fc004 	movi	r4,-256
    a000:	111c703a 	and	r14,r2,r4
    a004:	401f883a 	mov	r15,r8
    a008:	003fe506 	br	9fa0 <__divdf3+0x1d0>
    a00c:	8009883a 	mov	r4,r16
    a010:	003f9206 	br	9e5c <__divdf3+0x8c>
    a014:	9809883a 	mov	r4,r19
    a018:	d8000715 	stw	zero,28(sp)
    a01c:	d8000815 	stw	zero,32(sp)
    a020:	d8000615 	stw	zero,24(sp)
    a024:	003f8d06 	br	9e5c <__divdf3+0x8c>

0000a028 <__eqdf2>:
    a028:	deffef04 	addi	sp,sp,-68
    a02c:	dc400f15 	stw	r17,60(sp)
    a030:	dc400404 	addi	r17,sp,16
    a034:	2005883a 	mov	r2,r4
    a038:	2807883a 	mov	r3,r5
    a03c:	dc000e15 	stw	r16,56(sp)
    a040:	d809883a 	mov	r4,sp
    a044:	880b883a 	mov	r5,r17
    a048:	dc000904 	addi	r16,sp,36
    a04c:	d8c00115 	stw	r3,4(sp)
    a050:	d8800015 	stw	r2,0(sp)
    a054:	d9800215 	stw	r6,8(sp)
    a058:	dfc01015 	stw	ra,64(sp)
    a05c:	d9c00315 	stw	r7,12(sp)
    a060:	000ac700 	call	ac70 <__unpack_d>
    a064:	d9000204 	addi	r4,sp,8
    a068:	800b883a 	mov	r5,r16
    a06c:	000ac700 	call	ac70 <__unpack_d>
    a070:	d8800417 	ldw	r2,16(sp)
    a074:	00c00044 	movi	r3,1
    a078:	180d883a 	mov	r6,r3
    a07c:	1880062e 	bgeu	r3,r2,a098 <__eqdf2+0x70>
    a080:	d8800917 	ldw	r2,36(sp)
    a084:	8809883a 	mov	r4,r17
    a088:	800b883a 	mov	r5,r16
    a08c:	1880022e 	bgeu	r3,r2,a098 <__eqdf2+0x70>
    a090:	000ada80 	call	ada8 <__fpcmp_parts_d>
    a094:	100d883a 	mov	r6,r2
    a098:	3005883a 	mov	r2,r6
    a09c:	dfc01017 	ldw	ra,64(sp)
    a0a0:	dc400f17 	ldw	r17,60(sp)
    a0a4:	dc000e17 	ldw	r16,56(sp)
    a0a8:	dec01104 	addi	sp,sp,68
    a0ac:	f800283a 	ret

0000a0b0 <__nedf2>:
    a0b0:	deffef04 	addi	sp,sp,-68
    a0b4:	dc400f15 	stw	r17,60(sp)
    a0b8:	dc400404 	addi	r17,sp,16
    a0bc:	2005883a 	mov	r2,r4
    a0c0:	2807883a 	mov	r3,r5
    a0c4:	dc000e15 	stw	r16,56(sp)
    a0c8:	d809883a 	mov	r4,sp
    a0cc:	880b883a 	mov	r5,r17
    a0d0:	dc000904 	addi	r16,sp,36
    a0d4:	d8c00115 	stw	r3,4(sp)
    a0d8:	d8800015 	stw	r2,0(sp)
    a0dc:	d9800215 	stw	r6,8(sp)
    a0e0:	dfc01015 	stw	ra,64(sp)
    a0e4:	d9c00315 	stw	r7,12(sp)
    a0e8:	000ac700 	call	ac70 <__unpack_d>
    a0ec:	d9000204 	addi	r4,sp,8
    a0f0:	800b883a 	mov	r5,r16
    a0f4:	000ac700 	call	ac70 <__unpack_d>
    a0f8:	d8800417 	ldw	r2,16(sp)
    a0fc:	00c00044 	movi	r3,1
    a100:	180d883a 	mov	r6,r3
    a104:	1880062e 	bgeu	r3,r2,a120 <__nedf2+0x70>
    a108:	d8800917 	ldw	r2,36(sp)
    a10c:	8809883a 	mov	r4,r17
    a110:	800b883a 	mov	r5,r16
    a114:	1880022e 	bgeu	r3,r2,a120 <__nedf2+0x70>
    a118:	000ada80 	call	ada8 <__fpcmp_parts_d>
    a11c:	100d883a 	mov	r6,r2
    a120:	3005883a 	mov	r2,r6
    a124:	dfc01017 	ldw	ra,64(sp)
    a128:	dc400f17 	ldw	r17,60(sp)
    a12c:	dc000e17 	ldw	r16,56(sp)
    a130:	dec01104 	addi	sp,sp,68
    a134:	f800283a 	ret

0000a138 <__gtdf2>:
    a138:	deffef04 	addi	sp,sp,-68
    a13c:	dc400f15 	stw	r17,60(sp)
    a140:	dc400404 	addi	r17,sp,16
    a144:	2005883a 	mov	r2,r4
    a148:	2807883a 	mov	r3,r5
    a14c:	dc000e15 	stw	r16,56(sp)
    a150:	d809883a 	mov	r4,sp
    a154:	880b883a 	mov	r5,r17
    a158:	dc000904 	addi	r16,sp,36
    a15c:	d8c00115 	stw	r3,4(sp)
    a160:	d8800015 	stw	r2,0(sp)
    a164:	d9800215 	stw	r6,8(sp)
    a168:	dfc01015 	stw	ra,64(sp)
    a16c:	d9c00315 	stw	r7,12(sp)
    a170:	000ac700 	call	ac70 <__unpack_d>
    a174:	d9000204 	addi	r4,sp,8
    a178:	800b883a 	mov	r5,r16
    a17c:	000ac700 	call	ac70 <__unpack_d>
    a180:	d8800417 	ldw	r2,16(sp)
    a184:	00c00044 	movi	r3,1
    a188:	01bfffc4 	movi	r6,-1
    a18c:	1880062e 	bgeu	r3,r2,a1a8 <__gtdf2+0x70>
    a190:	d8800917 	ldw	r2,36(sp)
    a194:	8809883a 	mov	r4,r17
    a198:	800b883a 	mov	r5,r16
    a19c:	1880022e 	bgeu	r3,r2,a1a8 <__gtdf2+0x70>
    a1a0:	000ada80 	call	ada8 <__fpcmp_parts_d>
    a1a4:	100d883a 	mov	r6,r2
    a1a8:	3005883a 	mov	r2,r6
    a1ac:	dfc01017 	ldw	ra,64(sp)
    a1b0:	dc400f17 	ldw	r17,60(sp)
    a1b4:	dc000e17 	ldw	r16,56(sp)
    a1b8:	dec01104 	addi	sp,sp,68
    a1bc:	f800283a 	ret

0000a1c0 <__gedf2>:
    a1c0:	deffef04 	addi	sp,sp,-68
    a1c4:	dc400f15 	stw	r17,60(sp)
    a1c8:	dc400404 	addi	r17,sp,16
    a1cc:	2005883a 	mov	r2,r4
    a1d0:	2807883a 	mov	r3,r5
    a1d4:	dc000e15 	stw	r16,56(sp)
    a1d8:	d809883a 	mov	r4,sp
    a1dc:	880b883a 	mov	r5,r17
    a1e0:	dc000904 	addi	r16,sp,36
    a1e4:	d8c00115 	stw	r3,4(sp)
    a1e8:	d8800015 	stw	r2,0(sp)
    a1ec:	d9800215 	stw	r6,8(sp)
    a1f0:	dfc01015 	stw	ra,64(sp)
    a1f4:	d9c00315 	stw	r7,12(sp)
    a1f8:	000ac700 	call	ac70 <__unpack_d>
    a1fc:	d9000204 	addi	r4,sp,8
    a200:	800b883a 	mov	r5,r16
    a204:	000ac700 	call	ac70 <__unpack_d>
    a208:	d8800417 	ldw	r2,16(sp)
    a20c:	00c00044 	movi	r3,1
    a210:	01bfffc4 	movi	r6,-1
    a214:	1880062e 	bgeu	r3,r2,a230 <__gedf2+0x70>
    a218:	d8800917 	ldw	r2,36(sp)
    a21c:	8809883a 	mov	r4,r17
    a220:	800b883a 	mov	r5,r16
    a224:	1880022e 	bgeu	r3,r2,a230 <__gedf2+0x70>
    a228:	000ada80 	call	ada8 <__fpcmp_parts_d>
    a22c:	100d883a 	mov	r6,r2
    a230:	3005883a 	mov	r2,r6
    a234:	dfc01017 	ldw	ra,64(sp)
    a238:	dc400f17 	ldw	r17,60(sp)
    a23c:	dc000e17 	ldw	r16,56(sp)
    a240:	dec01104 	addi	sp,sp,68
    a244:	f800283a 	ret

0000a248 <__ltdf2>:
    a248:	deffef04 	addi	sp,sp,-68
    a24c:	dc400f15 	stw	r17,60(sp)
    a250:	dc400404 	addi	r17,sp,16
    a254:	2005883a 	mov	r2,r4
    a258:	2807883a 	mov	r3,r5
    a25c:	dc000e15 	stw	r16,56(sp)
    a260:	d809883a 	mov	r4,sp
    a264:	880b883a 	mov	r5,r17
    a268:	dc000904 	addi	r16,sp,36
    a26c:	d8c00115 	stw	r3,4(sp)
    a270:	d8800015 	stw	r2,0(sp)
    a274:	d9800215 	stw	r6,8(sp)
    a278:	dfc01015 	stw	ra,64(sp)
    a27c:	d9c00315 	stw	r7,12(sp)
    a280:	000ac700 	call	ac70 <__unpack_d>
    a284:	d9000204 	addi	r4,sp,8
    a288:	800b883a 	mov	r5,r16
    a28c:	000ac700 	call	ac70 <__unpack_d>
    a290:	d8800417 	ldw	r2,16(sp)
    a294:	00c00044 	movi	r3,1
    a298:	180d883a 	mov	r6,r3
    a29c:	1880062e 	bgeu	r3,r2,a2b8 <__ltdf2+0x70>
    a2a0:	d8800917 	ldw	r2,36(sp)
    a2a4:	8809883a 	mov	r4,r17
    a2a8:	800b883a 	mov	r5,r16
    a2ac:	1880022e 	bgeu	r3,r2,a2b8 <__ltdf2+0x70>
    a2b0:	000ada80 	call	ada8 <__fpcmp_parts_d>
    a2b4:	100d883a 	mov	r6,r2
    a2b8:	3005883a 	mov	r2,r6
    a2bc:	dfc01017 	ldw	ra,64(sp)
    a2c0:	dc400f17 	ldw	r17,60(sp)
    a2c4:	dc000e17 	ldw	r16,56(sp)
    a2c8:	dec01104 	addi	sp,sp,68
    a2cc:	f800283a 	ret

0000a2d0 <__floatsidf>:
    a2d0:	2006d7fa 	srli	r3,r4,31
    a2d4:	defff604 	addi	sp,sp,-40
    a2d8:	008000c4 	movi	r2,3
    a2dc:	dfc00915 	stw	ra,36(sp)
    a2e0:	dcc00815 	stw	r19,32(sp)
    a2e4:	dc800715 	stw	r18,28(sp)
    a2e8:	dc400615 	stw	r17,24(sp)
    a2ec:	dc000515 	stw	r16,20(sp)
    a2f0:	d8800015 	stw	r2,0(sp)
    a2f4:	d8c00115 	stw	r3,4(sp)
    a2f8:	20000f1e 	bne	r4,zero,a338 <__floatsidf+0x68>
    a2fc:	00800084 	movi	r2,2
    a300:	d8800015 	stw	r2,0(sp)
    a304:	d809883a 	mov	r4,sp
    a308:	000a95c0 	call	a95c <__pack_d>
    a30c:	1009883a 	mov	r4,r2
    a310:	180b883a 	mov	r5,r3
    a314:	2005883a 	mov	r2,r4
    a318:	2807883a 	mov	r3,r5
    a31c:	dfc00917 	ldw	ra,36(sp)
    a320:	dcc00817 	ldw	r19,32(sp)
    a324:	dc800717 	ldw	r18,28(sp)
    a328:	dc400617 	ldw	r17,24(sp)
    a32c:	dc000517 	ldw	r16,20(sp)
    a330:	dec00a04 	addi	sp,sp,40
    a334:	f800283a 	ret
    a338:	00800f04 	movi	r2,60
    a33c:	1807003a 	cmpeq	r3,r3,zero
    a340:	d8800215 	stw	r2,8(sp)
    a344:	18001126 	beq	r3,zero,a38c <__floatsidf+0xbc>
    a348:	0027883a 	mov	r19,zero
    a34c:	2025883a 	mov	r18,r4
    a350:	d9000315 	stw	r4,12(sp)
    a354:	dcc00415 	stw	r19,16(sp)
    a358:	000a8dc0 	call	a8dc <__clzsi2>
    a35c:	11000744 	addi	r4,r2,29
    a360:	013fe80e 	bge	zero,r4,a304 <__floatsidf+0x34>
    a364:	10bfff44 	addi	r2,r2,-3
    a368:	10000c16 	blt	r2,zero,a39c <__floatsidf+0xcc>
    a36c:	90a2983a 	sll	r17,r18,r2
    a370:	0021883a 	mov	r16,zero
    a374:	d8800217 	ldw	r2,8(sp)
    a378:	dc400415 	stw	r17,16(sp)
    a37c:	dc000315 	stw	r16,12(sp)
    a380:	1105c83a 	sub	r2,r2,r4
    a384:	d8800215 	stw	r2,8(sp)
    a388:	003fde06 	br	a304 <__floatsidf+0x34>
    a38c:	00a00034 	movhi	r2,32768
    a390:	20800a26 	beq	r4,r2,a3bc <__floatsidf+0xec>
    a394:	0109c83a 	sub	r4,zero,r4
    a398:	003feb06 	br	a348 <__floatsidf+0x78>
    a39c:	9006d07a 	srli	r3,r18,1
    a3a0:	008007c4 	movi	r2,31
    a3a4:	1105c83a 	sub	r2,r2,r4
    a3a8:	1886d83a 	srl	r3,r3,r2
    a3ac:	9922983a 	sll	r17,r19,r4
    a3b0:	9120983a 	sll	r16,r18,r4
    a3b4:	1c62b03a 	or	r17,r3,r17
    a3b8:	003fee06 	br	a374 <__floatsidf+0xa4>
    a3bc:	0009883a 	mov	r4,zero
    a3c0:	01707834 	movhi	r5,49632
    a3c4:	003fd306 	br	a314 <__floatsidf+0x44>

0000a3c8 <__fixdfsi>:
    a3c8:	defff804 	addi	sp,sp,-32
    a3cc:	2005883a 	mov	r2,r4
    a3d0:	2807883a 	mov	r3,r5
    a3d4:	d809883a 	mov	r4,sp
    a3d8:	d9400204 	addi	r5,sp,8
    a3dc:	d8c00115 	stw	r3,4(sp)
    a3e0:	d8800015 	stw	r2,0(sp)
    a3e4:	dfc00715 	stw	ra,28(sp)
    a3e8:	000ac700 	call	ac70 <__unpack_d>
    a3ec:	d8c00217 	ldw	r3,8(sp)
    a3f0:	00800084 	movi	r2,2
    a3f4:	1880051e 	bne	r3,r2,a40c <__fixdfsi+0x44>
    a3f8:	0007883a 	mov	r3,zero
    a3fc:	1805883a 	mov	r2,r3
    a400:	dfc00717 	ldw	ra,28(sp)
    a404:	dec00804 	addi	sp,sp,32
    a408:	f800283a 	ret
    a40c:	00800044 	movi	r2,1
    a410:	10fff92e 	bgeu	r2,r3,a3f8 <__fixdfsi+0x30>
    a414:	00800104 	movi	r2,4
    a418:	18800426 	beq	r3,r2,a42c <__fixdfsi+0x64>
    a41c:	d8c00417 	ldw	r3,16(sp)
    a420:	183ff516 	blt	r3,zero,a3f8 <__fixdfsi+0x30>
    a424:	00800784 	movi	r2,30
    a428:	10c0080e 	bge	r2,r3,a44c <__fixdfsi+0x84>
    a42c:	d8800317 	ldw	r2,12(sp)
    a430:	1000121e 	bne	r2,zero,a47c <__fixdfsi+0xb4>
    a434:	00e00034 	movhi	r3,32768
    a438:	18ffffc4 	addi	r3,r3,-1
    a43c:	1805883a 	mov	r2,r3
    a440:	dfc00717 	ldw	ra,28(sp)
    a444:	dec00804 	addi	sp,sp,32
    a448:	f800283a 	ret
    a44c:	00800f04 	movi	r2,60
    a450:	10d1c83a 	sub	r8,r2,r3
    a454:	40bff804 	addi	r2,r8,-32
    a458:	d9800517 	ldw	r6,20(sp)
    a45c:	d9c00617 	ldw	r7,24(sp)
    a460:	10000816 	blt	r2,zero,a484 <__fixdfsi+0xbc>
    a464:	3888d83a 	srl	r4,r7,r2
    a468:	d8800317 	ldw	r2,12(sp)
    a46c:	2007883a 	mov	r3,r4
    a470:	103fe226 	beq	r2,zero,a3fc <__fixdfsi+0x34>
    a474:	0107c83a 	sub	r3,zero,r4
    a478:	003fe006 	br	a3fc <__fixdfsi+0x34>
    a47c:	00e00034 	movhi	r3,32768
    a480:	003fde06 	br	a3fc <__fixdfsi+0x34>
    a484:	39c7883a 	add	r3,r7,r7
    a488:	008007c4 	movi	r2,31
    a48c:	1205c83a 	sub	r2,r2,r8
    a490:	1886983a 	sll	r3,r3,r2
    a494:	3208d83a 	srl	r4,r6,r8
    a498:	1908b03a 	or	r4,r3,r4
    a49c:	003ff206 	br	a468 <__fixdfsi+0xa0>

0000a4a0 <__floatunsidf>:
    a4a0:	defff204 	addi	sp,sp,-56
    a4a4:	dfc00d15 	stw	ra,52(sp)
    a4a8:	ddc00c15 	stw	r23,48(sp)
    a4ac:	dd800b15 	stw	r22,44(sp)
    a4b0:	dd400a15 	stw	r21,40(sp)
    a4b4:	dd000915 	stw	r20,36(sp)
    a4b8:	dcc00815 	stw	r19,32(sp)
    a4bc:	dc800715 	stw	r18,28(sp)
    a4c0:	dc400615 	stw	r17,24(sp)
    a4c4:	dc000515 	stw	r16,20(sp)
    a4c8:	d8000115 	stw	zero,4(sp)
    a4cc:	20000f1e 	bne	r4,zero,a50c <__floatunsidf+0x6c>
    a4d0:	00800084 	movi	r2,2
    a4d4:	d8800015 	stw	r2,0(sp)
    a4d8:	d809883a 	mov	r4,sp
    a4dc:	000a95c0 	call	a95c <__pack_d>
    a4e0:	dfc00d17 	ldw	ra,52(sp)
    a4e4:	ddc00c17 	ldw	r23,48(sp)
    a4e8:	dd800b17 	ldw	r22,44(sp)
    a4ec:	dd400a17 	ldw	r21,40(sp)
    a4f0:	dd000917 	ldw	r20,36(sp)
    a4f4:	dcc00817 	ldw	r19,32(sp)
    a4f8:	dc800717 	ldw	r18,28(sp)
    a4fc:	dc400617 	ldw	r17,24(sp)
    a500:	dc000517 	ldw	r16,20(sp)
    a504:	dec00e04 	addi	sp,sp,56
    a508:	f800283a 	ret
    a50c:	008000c4 	movi	r2,3
    a510:	00c00f04 	movi	r3,60
    a514:	002f883a 	mov	r23,zero
    a518:	202d883a 	mov	r22,r4
    a51c:	d8800015 	stw	r2,0(sp)
    a520:	d8c00215 	stw	r3,8(sp)
    a524:	d9000315 	stw	r4,12(sp)
    a528:	ddc00415 	stw	r23,16(sp)
    a52c:	000a8dc0 	call	a8dc <__clzsi2>
    a530:	12400744 	addi	r9,r2,29
    a534:	48000b16 	blt	r9,zero,a564 <__floatunsidf+0xc4>
    a538:	483fe726 	beq	r9,zero,a4d8 <__floatunsidf+0x38>
    a53c:	10bfff44 	addi	r2,r2,-3
    a540:	10002e16 	blt	r2,zero,a5fc <__floatunsidf+0x15c>
    a544:	b0a2983a 	sll	r17,r22,r2
    a548:	0021883a 	mov	r16,zero
    a54c:	d8800217 	ldw	r2,8(sp)
    a550:	dc400415 	stw	r17,16(sp)
    a554:	dc000315 	stw	r16,12(sp)
    a558:	1245c83a 	sub	r2,r2,r9
    a55c:	d8800215 	stw	r2,8(sp)
    a560:	003fdd06 	br	a4d8 <__floatunsidf+0x38>
    a564:	0255c83a 	sub	r10,zero,r9
    a568:	51bff804 	addi	r6,r10,-32
    a56c:	30001b16 	blt	r6,zero,a5dc <__floatunsidf+0x13c>
    a570:	b9a8d83a 	srl	r20,r23,r6
    a574:	002b883a 	mov	r21,zero
    a578:	000f883a 	mov	r7,zero
    a57c:	01000044 	movi	r4,1
    a580:	0011883a 	mov	r8,zero
    a584:	30002516 	blt	r6,zero,a61c <__floatunsidf+0x17c>
    a588:	21a6983a 	sll	r19,r4,r6
    a58c:	0025883a 	mov	r18,zero
    a590:	00bfffc4 	movi	r2,-1
    a594:	9089883a 	add	r4,r18,r2
    a598:	988b883a 	add	r5,r19,r2
    a59c:	248d803a 	cmpltu	r6,r4,r18
    a5a0:	314b883a 	add	r5,r6,r5
    a5a4:	b104703a 	and	r2,r22,r4
    a5a8:	b946703a 	and	r3,r23,r5
    a5ac:	10c4b03a 	or	r2,r2,r3
    a5b0:	10000226 	beq	r2,zero,a5bc <__floatunsidf+0x11c>
    a5b4:	01c00044 	movi	r7,1
    a5b8:	0011883a 	mov	r8,zero
    a5bc:	d9000217 	ldw	r4,8(sp)
    a5c0:	a1c4b03a 	or	r2,r20,r7
    a5c4:	aa06b03a 	or	r3,r21,r8
    a5c8:	2249c83a 	sub	r4,r4,r9
    a5cc:	d8c00415 	stw	r3,16(sp)
    a5d0:	d9000215 	stw	r4,8(sp)
    a5d4:	d8800315 	stw	r2,12(sp)
    a5d8:	003fbf06 	br	a4d8 <__floatunsidf+0x38>
    a5dc:	bdc7883a 	add	r3,r23,r23
    a5e0:	008007c4 	movi	r2,31
    a5e4:	1285c83a 	sub	r2,r2,r10
    a5e8:	1886983a 	sll	r3,r3,r2
    a5ec:	b2a8d83a 	srl	r20,r22,r10
    a5f0:	baaad83a 	srl	r21,r23,r10
    a5f4:	1d28b03a 	or	r20,r3,r20
    a5f8:	003fdf06 	br	a578 <__floatunsidf+0xd8>
    a5fc:	b006d07a 	srli	r3,r22,1
    a600:	008007c4 	movi	r2,31
    a604:	1245c83a 	sub	r2,r2,r9
    a608:	1886d83a 	srl	r3,r3,r2
    a60c:	ba62983a 	sll	r17,r23,r9
    a610:	b260983a 	sll	r16,r22,r9
    a614:	1c62b03a 	or	r17,r3,r17
    a618:	003fcc06 	br	a54c <__floatunsidf+0xac>
    a61c:	2006d07a 	srli	r3,r4,1
    a620:	008007c4 	movi	r2,31
    a624:	1285c83a 	sub	r2,r2,r10
    a628:	18a6d83a 	srl	r19,r3,r2
    a62c:	22a4983a 	sll	r18,r4,r10
    a630:	003fd706 	br	a590 <__floatunsidf+0xf0>

0000a634 <udivmodsi4>:
    a634:	29001b2e 	bgeu	r5,r4,a6a4 <udivmodsi4+0x70>
    a638:	28001a16 	blt	r5,zero,a6a4 <udivmodsi4+0x70>
    a63c:	00800044 	movi	r2,1
    a640:	0007883a 	mov	r3,zero
    a644:	01c007c4 	movi	r7,31
    a648:	00000306 	br	a658 <udivmodsi4+0x24>
    a64c:	19c01326 	beq	r3,r7,a69c <udivmodsi4+0x68>
    a650:	18c00044 	addi	r3,r3,1
    a654:	28000416 	blt	r5,zero,a668 <udivmodsi4+0x34>
    a658:	294b883a 	add	r5,r5,r5
    a65c:	1085883a 	add	r2,r2,r2
    a660:	293ffa36 	bltu	r5,r4,a64c <udivmodsi4+0x18>
    a664:	10000d26 	beq	r2,zero,a69c <udivmodsi4+0x68>
    a668:	0007883a 	mov	r3,zero
    a66c:	21400236 	bltu	r4,r5,a678 <udivmodsi4+0x44>
    a670:	2149c83a 	sub	r4,r4,r5
    a674:	1886b03a 	or	r3,r3,r2
    a678:	1004d07a 	srli	r2,r2,1
    a67c:	280ad07a 	srli	r5,r5,1
    a680:	103ffa1e 	bne	r2,zero,a66c <udivmodsi4+0x38>
    a684:	30000226 	beq	r6,zero,a690 <udivmodsi4+0x5c>
    a688:	2005883a 	mov	r2,r4
    a68c:	f800283a 	ret
    a690:	1809883a 	mov	r4,r3
    a694:	2005883a 	mov	r2,r4
    a698:	f800283a 	ret
    a69c:	0007883a 	mov	r3,zero
    a6a0:	003ff806 	br	a684 <udivmodsi4+0x50>
    a6a4:	00800044 	movi	r2,1
    a6a8:	0007883a 	mov	r3,zero
    a6ac:	003fef06 	br	a66c <udivmodsi4+0x38>

0000a6b0 <__divsi3>:
    a6b0:	defffe04 	addi	sp,sp,-8
    a6b4:	dc000015 	stw	r16,0(sp)
    a6b8:	dfc00115 	stw	ra,4(sp)
    a6bc:	0021883a 	mov	r16,zero
    a6c0:	20000c16 	blt	r4,zero,a6f4 <__divsi3+0x44>
    a6c4:	000d883a 	mov	r6,zero
    a6c8:	28000e16 	blt	r5,zero,a704 <__divsi3+0x54>
    a6cc:	000a6340 	call	a634 <udivmodsi4>
    a6d0:	1007883a 	mov	r3,r2
    a6d4:	8005003a 	cmpeq	r2,r16,zero
    a6d8:	1000011e 	bne	r2,zero,a6e0 <__divsi3+0x30>
    a6dc:	00c7c83a 	sub	r3,zero,r3
    a6e0:	1805883a 	mov	r2,r3
    a6e4:	dfc00117 	ldw	ra,4(sp)
    a6e8:	dc000017 	ldw	r16,0(sp)
    a6ec:	dec00204 	addi	sp,sp,8
    a6f0:	f800283a 	ret
    a6f4:	0109c83a 	sub	r4,zero,r4
    a6f8:	04000044 	movi	r16,1
    a6fc:	000d883a 	mov	r6,zero
    a700:	283ff20e 	bge	r5,zero,a6cc <__divsi3+0x1c>
    a704:	014bc83a 	sub	r5,zero,r5
    a708:	8021003a 	cmpeq	r16,r16,zero
    a70c:	003fef06 	br	a6cc <__divsi3+0x1c>

0000a710 <__modsi3>:
    a710:	deffff04 	addi	sp,sp,-4
    a714:	dfc00015 	stw	ra,0(sp)
    a718:	01800044 	movi	r6,1
    a71c:	2807883a 	mov	r3,r5
    a720:	20000416 	blt	r4,zero,a734 <__modsi3+0x24>
    a724:	28000c16 	blt	r5,zero,a758 <__modsi3+0x48>
    a728:	dfc00017 	ldw	ra,0(sp)
    a72c:	dec00104 	addi	sp,sp,4
    a730:	000a6341 	jmpi	a634 <udivmodsi4>
    a734:	0109c83a 	sub	r4,zero,r4
    a738:	28000b16 	blt	r5,zero,a768 <__modsi3+0x58>
    a73c:	180b883a 	mov	r5,r3
    a740:	01800044 	movi	r6,1
    a744:	000a6340 	call	a634 <udivmodsi4>
    a748:	0085c83a 	sub	r2,zero,r2
    a74c:	dfc00017 	ldw	ra,0(sp)
    a750:	dec00104 	addi	sp,sp,4
    a754:	f800283a 	ret
    a758:	014bc83a 	sub	r5,zero,r5
    a75c:	dfc00017 	ldw	ra,0(sp)
    a760:	dec00104 	addi	sp,sp,4
    a764:	000a6341 	jmpi	a634 <udivmodsi4>
    a768:	0147c83a 	sub	r3,zero,r5
    a76c:	003ff306 	br	a73c <__modsi3+0x2c>

0000a770 <__udivsi3>:
    a770:	000d883a 	mov	r6,zero
    a774:	000a6341 	jmpi	a634 <udivmodsi4>

0000a778 <__umodsi3>:
    a778:	01800044 	movi	r6,1
    a77c:	000a6341 	jmpi	a634 <udivmodsi4>

0000a780 <__mulsi3>:
    a780:	20000a26 	beq	r4,zero,a7ac <__mulsi3+0x2c>
    a784:	0007883a 	mov	r3,zero
    a788:	2080004c 	andi	r2,r4,1
    a78c:	1005003a 	cmpeq	r2,r2,zero
    a790:	2008d07a 	srli	r4,r4,1
    a794:	1000011e 	bne	r2,zero,a79c <__mulsi3+0x1c>
    a798:	1947883a 	add	r3,r3,r5
    a79c:	294b883a 	add	r5,r5,r5
    a7a0:	203ff91e 	bne	r4,zero,a788 <__mulsi3+0x8>
    a7a4:	1805883a 	mov	r2,r3
    a7a8:	f800283a 	ret
    a7ac:	0007883a 	mov	r3,zero
    a7b0:	1805883a 	mov	r2,r3
    a7b4:	f800283a 	ret

0000a7b8 <__muldi3>:
    a7b8:	defff204 	addi	sp,sp,-56
    a7bc:	df000c15 	stw	fp,48(sp)
    a7c0:	3038d43a 	srli	fp,r6,16
    a7c4:	dd000815 	stw	r20,32(sp)
    a7c8:	dc400515 	stw	r17,20(sp)
    a7cc:	2028d43a 	srli	r20,r4,16
    a7d0:	247fffcc 	andi	r17,r4,65535
    a7d4:	dc000415 	stw	r16,16(sp)
    a7d8:	343fffcc 	andi	r16,r6,65535
    a7dc:	dcc00715 	stw	r19,28(sp)
    a7e0:	d9000015 	stw	r4,0(sp)
    a7e4:	2827883a 	mov	r19,r5
    a7e8:	8809883a 	mov	r4,r17
    a7ec:	d9400115 	stw	r5,4(sp)
    a7f0:	800b883a 	mov	r5,r16
    a7f4:	d9800215 	stw	r6,8(sp)
    a7f8:	dfc00d15 	stw	ra,52(sp)
    a7fc:	d9c00315 	stw	r7,12(sp)
    a800:	dd800a15 	stw	r22,40(sp)
    a804:	dd400915 	stw	r21,36(sp)
    a808:	302d883a 	mov	r22,r6
    a80c:	ddc00b15 	stw	r23,44(sp)
    a810:	dc800615 	stw	r18,24(sp)
    a814:	000a7800 	call	a780 <__mulsi3>
    a818:	8809883a 	mov	r4,r17
    a81c:	e00b883a 	mov	r5,fp
    a820:	102b883a 	mov	r21,r2
    a824:	000a7800 	call	a780 <__mulsi3>
    a828:	800b883a 	mov	r5,r16
    a82c:	a009883a 	mov	r4,r20
    a830:	1023883a 	mov	r17,r2
    a834:	000a7800 	call	a780 <__mulsi3>
    a838:	a009883a 	mov	r4,r20
    a83c:	e00b883a 	mov	r5,fp
    a840:	1021883a 	mov	r16,r2
    a844:	000a7800 	call	a780 <__mulsi3>
    a848:	a8ffffcc 	andi	r3,r21,65535
    a84c:	a82ad43a 	srli	r21,r21,16
    a850:	8c23883a 	add	r17,r17,r16
    a854:	1011883a 	mov	r8,r2
    a858:	ac6b883a 	add	r21,r21,r17
    a85c:	a804943a 	slli	r2,r21,16
    a860:	b009883a 	mov	r4,r22
    a864:	980b883a 	mov	r5,r19
    a868:	10c7883a 	add	r3,r2,r3
    a86c:	a812d43a 	srli	r9,r21,16
    a870:	180d883a 	mov	r6,r3
    a874:	ac00022e 	bgeu	r21,r16,a880 <__muldi3+0xc8>
    a878:	00800074 	movhi	r2,1
    a87c:	4091883a 	add	r8,r8,r2
    a880:	4267883a 	add	r19,r8,r9
    a884:	302d883a 	mov	r22,r6
    a888:	000a7800 	call	a780 <__mulsi3>
    a88c:	d9400317 	ldw	r5,12(sp)
    a890:	d9000017 	ldw	r4,0(sp)
    a894:	1023883a 	mov	r17,r2
    a898:	000a7800 	call	a780 <__mulsi3>
    a89c:	14cb883a 	add	r5,r2,r19
    a8a0:	894b883a 	add	r5,r17,r5
    a8a4:	b005883a 	mov	r2,r22
    a8a8:	2807883a 	mov	r3,r5
    a8ac:	dfc00d17 	ldw	ra,52(sp)
    a8b0:	df000c17 	ldw	fp,48(sp)
    a8b4:	ddc00b17 	ldw	r23,44(sp)
    a8b8:	dd800a17 	ldw	r22,40(sp)
    a8bc:	dd400917 	ldw	r21,36(sp)
    a8c0:	dd000817 	ldw	r20,32(sp)
    a8c4:	dcc00717 	ldw	r19,28(sp)
    a8c8:	dc800617 	ldw	r18,24(sp)
    a8cc:	dc400517 	ldw	r17,20(sp)
    a8d0:	dc000417 	ldw	r16,16(sp)
    a8d4:	dec00e04 	addi	sp,sp,56
    a8d8:	f800283a 	ret

0000a8dc <__clzsi2>:
    a8dc:	00bfffd4 	movui	r2,65535
    a8e0:	11000e36 	bltu	r2,r4,a91c <__clzsi2+0x40>
    a8e4:	00803fc4 	movi	r2,255
    a8e8:	01400204 	movi	r5,8
    a8ec:	0007883a 	mov	r3,zero
    a8f0:	11001036 	bltu	r2,r4,a934 <__clzsi2+0x58>
    a8f4:	000b883a 	mov	r5,zero
    a8f8:	20c6d83a 	srl	r3,r4,r3
    a8fc:	00800074 	movhi	r2,1
    a900:	10b6c804 	addi	r2,r2,-9440
    a904:	1887883a 	add	r3,r3,r2
    a908:	18800003 	ldbu	r2,0(r3)
    a90c:	00c00804 	movi	r3,32
    a910:	2885883a 	add	r2,r5,r2
    a914:	1885c83a 	sub	r2,r3,r2
    a918:	f800283a 	ret
    a91c:	01400404 	movi	r5,16
    a920:	00804034 	movhi	r2,256
    a924:	10bfffc4 	addi	r2,r2,-1
    a928:	2807883a 	mov	r3,r5
    a92c:	113ff22e 	bgeu	r2,r4,a8f8 <__clzsi2+0x1c>
    a930:	01400604 	movi	r5,24
    a934:	2807883a 	mov	r3,r5
    a938:	20c6d83a 	srl	r3,r4,r3
    a93c:	00800074 	movhi	r2,1
    a940:	10b6c804 	addi	r2,r2,-9440
    a944:	1887883a 	add	r3,r3,r2
    a948:	18800003 	ldbu	r2,0(r3)
    a94c:	00c00804 	movi	r3,32
    a950:	2885883a 	add	r2,r5,r2
    a954:	1885c83a 	sub	r2,r3,r2
    a958:	f800283a 	ret

0000a95c <__pack_d>:
    a95c:	20c00017 	ldw	r3,0(r4)
    a960:	defffd04 	addi	sp,sp,-12
    a964:	dc000015 	stw	r16,0(sp)
    a968:	dc800215 	stw	r18,8(sp)
    a96c:	dc400115 	stw	r17,4(sp)
    a970:	00800044 	movi	r2,1
    a974:	22000317 	ldw	r8,12(r4)
    a978:	001f883a 	mov	r15,zero
    a97c:	22400417 	ldw	r9,16(r4)
    a980:	24000117 	ldw	r16,4(r4)
    a984:	10c0552e 	bgeu	r2,r3,aadc <__pack_d+0x180>
    a988:	00800104 	movi	r2,4
    a98c:	18804f26 	beq	r3,r2,aacc <__pack_d+0x170>
    a990:	00800084 	movi	r2,2
    a994:	18800226 	beq	r3,r2,a9a0 <__pack_d+0x44>
    a998:	4244b03a 	or	r2,r8,r9
    a99c:	10001a1e 	bne	r2,zero,aa08 <__pack_d+0xac>
    a9a0:	000d883a 	mov	r6,zero
    a9a4:	000f883a 	mov	r7,zero
    a9a8:	0011883a 	mov	r8,zero
    a9ac:	00800434 	movhi	r2,16
    a9b0:	10bfffc4 	addi	r2,r2,-1
    a9b4:	301d883a 	mov	r14,r6
    a9b8:	3884703a 	and	r2,r7,r2
    a9bc:	400a953a 	slli	r5,r8,20
    a9c0:	79bffc2c 	andhi	r6,r15,65520
    a9c4:	308cb03a 	or	r6,r6,r2
    a9c8:	00e00434 	movhi	r3,32784
    a9cc:	18ffffc4 	addi	r3,r3,-1
    a9d0:	800497fa 	slli	r2,r16,31
    a9d4:	30c6703a 	and	r3,r6,r3
    a9d8:	1946b03a 	or	r3,r3,r5
    a9dc:	01600034 	movhi	r5,32768
    a9e0:	297fffc4 	addi	r5,r5,-1
    a9e4:	194a703a 	and	r5,r3,r5
    a9e8:	288ab03a 	or	r5,r5,r2
    a9ec:	2807883a 	mov	r3,r5
    a9f0:	7005883a 	mov	r2,r14
    a9f4:	dc800217 	ldw	r18,8(sp)
    a9f8:	dc400117 	ldw	r17,4(sp)
    a9fc:	dc000017 	ldw	r16,0(sp)
    aa00:	dec00304 	addi	sp,sp,12
    aa04:	f800283a 	ret
    aa08:	21000217 	ldw	r4,8(r4)
    aa0c:	00bf0084 	movi	r2,-1022
    aa10:	20803f16 	blt	r4,r2,ab10 <__pack_d+0x1b4>
    aa14:	0080ffc4 	movi	r2,1023
    aa18:	11002c16 	blt	r2,r4,aacc <__pack_d+0x170>
    aa1c:	00803fc4 	movi	r2,255
    aa20:	408c703a 	and	r6,r8,r2
    aa24:	00802004 	movi	r2,128
    aa28:	0007883a 	mov	r3,zero
    aa2c:	000f883a 	mov	r7,zero
    aa30:	2280ffc4 	addi	r10,r4,1023
    aa34:	30801e26 	beq	r6,r2,aab0 <__pack_d+0x154>
    aa38:	00801fc4 	movi	r2,127
    aa3c:	4089883a 	add	r4,r8,r2
    aa40:	220d803a 	cmpltu	r6,r4,r8
    aa44:	324d883a 	add	r6,r6,r9
    aa48:	2011883a 	mov	r8,r4
    aa4c:	3013883a 	mov	r9,r6
    aa50:	00880034 	movhi	r2,8192
    aa54:	10bfffc4 	addi	r2,r2,-1
    aa58:	12400d36 	bltu	r2,r9,aa90 <__pack_d+0x134>
    aa5c:	4804963a 	slli	r2,r9,24
    aa60:	400cd23a 	srli	r6,r8,8
    aa64:	480ed23a 	srli	r7,r9,8
    aa68:	013fffc4 	movi	r4,-1
    aa6c:	118cb03a 	or	r6,r2,r6
    aa70:	01400434 	movhi	r5,16
    aa74:	297fffc4 	addi	r5,r5,-1
    aa78:	3104703a 	and	r2,r6,r4
    aa7c:	3946703a 	and	r3,r7,r5
    aa80:	5201ffcc 	andi	r8,r10,2047
    aa84:	100d883a 	mov	r6,r2
    aa88:	180f883a 	mov	r7,r3
    aa8c:	003fc706 	br	a9ac <__pack_d+0x50>
    aa90:	480897fa 	slli	r4,r9,31
    aa94:	4004d07a 	srli	r2,r8,1
    aa98:	4806d07a 	srli	r3,r9,1
    aa9c:	52800044 	addi	r10,r10,1
    aaa0:	2084b03a 	or	r2,r4,r2
    aaa4:	1011883a 	mov	r8,r2
    aaa8:	1813883a 	mov	r9,r3
    aaac:	003feb06 	br	aa5c <__pack_d+0x100>
    aab0:	383fe11e 	bne	r7,zero,aa38 <__pack_d+0xdc>
    aab4:	01004004 	movi	r4,256
    aab8:	4104703a 	and	r2,r8,r4
    aabc:	10c4b03a 	or	r2,r2,r3
    aac0:	103fe326 	beq	r2,zero,aa50 <__pack_d+0xf4>
    aac4:	3005883a 	mov	r2,r6
    aac8:	003fdc06 	br	aa3c <__pack_d+0xe0>
    aacc:	000d883a 	mov	r6,zero
    aad0:	000f883a 	mov	r7,zero
    aad4:	0201ffc4 	movi	r8,2047
    aad8:	003fb406 	br	a9ac <__pack_d+0x50>
    aadc:	0005883a 	mov	r2,zero
    aae0:	00c00234 	movhi	r3,8
    aae4:	408cb03a 	or	r6,r8,r2
    aae8:	48ceb03a 	or	r7,r9,r3
    aaec:	013fffc4 	movi	r4,-1
    aaf0:	01400434 	movhi	r5,16
    aaf4:	297fffc4 	addi	r5,r5,-1
    aaf8:	3104703a 	and	r2,r6,r4
    aafc:	3946703a 	and	r3,r7,r5
    ab00:	100d883a 	mov	r6,r2
    ab04:	180f883a 	mov	r7,r3
    ab08:	0201ffc4 	movi	r8,2047
    ab0c:	003fa706 	br	a9ac <__pack_d+0x50>
    ab10:	1109c83a 	sub	r4,r2,r4
    ab14:	00800e04 	movi	r2,56
    ab18:	11004316 	blt	r2,r4,ac28 <__pack_d+0x2cc>
    ab1c:	21fff804 	addi	r7,r4,-32
    ab20:	38004516 	blt	r7,zero,ac38 <__pack_d+0x2dc>
    ab24:	49d8d83a 	srl	r12,r9,r7
    ab28:	001b883a 	mov	r13,zero
    ab2c:	0023883a 	mov	r17,zero
    ab30:	01400044 	movi	r5,1
    ab34:	0025883a 	mov	r18,zero
    ab38:	38004716 	blt	r7,zero,ac58 <__pack_d+0x2fc>
    ab3c:	29d6983a 	sll	r11,r5,r7
    ab40:	0015883a 	mov	r10,zero
    ab44:	00bfffc4 	movi	r2,-1
    ab48:	5089883a 	add	r4,r10,r2
    ab4c:	588b883a 	add	r5,r11,r2
    ab50:	228d803a 	cmpltu	r6,r4,r10
    ab54:	314b883a 	add	r5,r6,r5
    ab58:	4104703a 	and	r2,r8,r4
    ab5c:	4946703a 	and	r3,r9,r5
    ab60:	10c4b03a 	or	r2,r2,r3
    ab64:	10000226 	beq	r2,zero,ab70 <__pack_d+0x214>
    ab68:	04400044 	movi	r17,1
    ab6c:	0025883a 	mov	r18,zero
    ab70:	00803fc4 	movi	r2,255
    ab74:	644eb03a 	or	r7,r12,r17
    ab78:	3892703a 	and	r9,r7,r2
    ab7c:	00802004 	movi	r2,128
    ab80:	6c90b03a 	or	r8,r13,r18
    ab84:	0015883a 	mov	r10,zero
    ab88:	48801626 	beq	r9,r2,abe4 <__pack_d+0x288>
    ab8c:	01001fc4 	movi	r4,127
    ab90:	3905883a 	add	r2,r7,r4
    ab94:	11cd803a 	cmpltu	r6,r2,r7
    ab98:	320d883a 	add	r6,r6,r8
    ab9c:	100f883a 	mov	r7,r2
    aba0:	00840034 	movhi	r2,4096
    aba4:	10bfffc4 	addi	r2,r2,-1
    aba8:	3011883a 	mov	r8,r6
    abac:	0007883a 	mov	r3,zero
    abb0:	11801b36 	bltu	r2,r6,ac20 <__pack_d+0x2c4>
    abb4:	4004963a 	slli	r2,r8,24
    abb8:	3808d23a 	srli	r4,r7,8
    abbc:	400ad23a 	srli	r5,r8,8
    abc0:	1813883a 	mov	r9,r3
    abc4:	1108b03a 	or	r4,r2,r4
    abc8:	00bfffc4 	movi	r2,-1
    abcc:	00c00434 	movhi	r3,16
    abd0:	18ffffc4 	addi	r3,r3,-1
    abd4:	208c703a 	and	r6,r4,r2
    abd8:	28ce703a 	and	r7,r5,r3
    abdc:	4a01ffcc 	andi	r8,r9,2047
    abe0:	003f7206 	br	a9ac <__pack_d+0x50>
    abe4:	503fe91e 	bne	r10,zero,ab8c <__pack_d+0x230>
    abe8:	01004004 	movi	r4,256
    abec:	3904703a 	and	r2,r7,r4
    abf0:	0007883a 	mov	r3,zero
    abf4:	10c4b03a 	or	r2,r2,r3
    abf8:	10000626 	beq	r2,zero,ac14 <__pack_d+0x2b8>
    abfc:	3a45883a 	add	r2,r7,r9
    ac00:	11cd803a 	cmpltu	r6,r2,r7
    ac04:	320d883a 	add	r6,r6,r8
    ac08:	100f883a 	mov	r7,r2
    ac0c:	3011883a 	mov	r8,r6
    ac10:	0007883a 	mov	r3,zero
    ac14:	00840034 	movhi	r2,4096
    ac18:	10bfffc4 	addi	r2,r2,-1
    ac1c:	123fe52e 	bgeu	r2,r8,abb4 <__pack_d+0x258>
    ac20:	00c00044 	movi	r3,1
    ac24:	003fe306 	br	abb4 <__pack_d+0x258>
    ac28:	0009883a 	mov	r4,zero
    ac2c:	0013883a 	mov	r9,zero
    ac30:	000b883a 	mov	r5,zero
    ac34:	003fe406 	br	abc8 <__pack_d+0x26c>
    ac38:	4a47883a 	add	r3,r9,r9
    ac3c:	008007c4 	movi	r2,31
    ac40:	1105c83a 	sub	r2,r2,r4
    ac44:	1886983a 	sll	r3,r3,r2
    ac48:	4118d83a 	srl	r12,r8,r4
    ac4c:	491ad83a 	srl	r13,r9,r4
    ac50:	1b18b03a 	or	r12,r3,r12
    ac54:	003fb506 	br	ab2c <__pack_d+0x1d0>
    ac58:	2806d07a 	srli	r3,r5,1
    ac5c:	008007c4 	movi	r2,31
    ac60:	1105c83a 	sub	r2,r2,r4
    ac64:	1896d83a 	srl	r11,r3,r2
    ac68:	2914983a 	sll	r10,r5,r4
    ac6c:	003fb506 	br	ab44 <__pack_d+0x1e8>

0000ac70 <__unpack_d>:
    ac70:	20c00117 	ldw	r3,4(r4)
    ac74:	22400017 	ldw	r9,0(r4)
    ac78:	00800434 	movhi	r2,16
    ac7c:	10bfffc4 	addi	r2,r2,-1
    ac80:	1808d53a 	srli	r4,r3,20
    ac84:	180cd7fa 	srli	r6,r3,31
    ac88:	1894703a 	and	r10,r3,r2
    ac8c:	2201ffcc 	andi	r8,r4,2047
    ac90:	281b883a 	mov	r13,r5
    ac94:	4817883a 	mov	r11,r9
    ac98:	29800115 	stw	r6,4(r5)
    ac9c:	5019883a 	mov	r12,r10
    aca0:	40001e1e 	bne	r8,zero,ad1c <__unpack_d+0xac>
    aca4:	4a84b03a 	or	r2,r9,r10
    aca8:	10001926 	beq	r2,zero,ad10 <__unpack_d+0xa0>
    acac:	4804d63a 	srli	r2,r9,24
    acb0:	500c923a 	slli	r6,r10,8
    acb4:	013f0084 	movi	r4,-1022
    acb8:	00c40034 	movhi	r3,4096
    acbc:	18ffffc4 	addi	r3,r3,-1
    acc0:	118cb03a 	or	r6,r2,r6
    acc4:	008000c4 	movi	r2,3
    acc8:	480a923a 	slli	r5,r9,8
    accc:	68800015 	stw	r2,0(r13)
    acd0:	69000215 	stw	r4,8(r13)
    acd4:	19800b36 	bltu	r3,r6,ad04 <__unpack_d+0x94>
    acd8:	200f883a 	mov	r7,r4
    acdc:	1811883a 	mov	r8,r3
    ace0:	2945883a 	add	r2,r5,r5
    ace4:	1149803a 	cmpltu	r4,r2,r5
    ace8:	3187883a 	add	r3,r6,r6
    acec:	20c9883a 	add	r4,r4,r3
    acf0:	100b883a 	mov	r5,r2
    acf4:	200d883a 	mov	r6,r4
    acf8:	39ffffc4 	addi	r7,r7,-1
    acfc:	413ff82e 	bgeu	r8,r4,ace0 <__unpack_d+0x70>
    ad00:	69c00215 	stw	r7,8(r13)
    ad04:	69800415 	stw	r6,16(r13)
    ad08:	69400315 	stw	r5,12(r13)
    ad0c:	f800283a 	ret
    ad10:	00800084 	movi	r2,2
    ad14:	28800015 	stw	r2,0(r5)
    ad18:	f800283a 	ret
    ad1c:	0081ffc4 	movi	r2,2047
    ad20:	40800f26 	beq	r8,r2,ad60 <__unpack_d+0xf0>
    ad24:	480cd63a 	srli	r6,r9,24
    ad28:	5006923a 	slli	r3,r10,8
    ad2c:	4804923a 	slli	r2,r9,8
    ad30:	0009883a 	mov	r4,zero
    ad34:	30c6b03a 	or	r3,r6,r3
    ad38:	01440034 	movhi	r5,4096
    ad3c:	110cb03a 	or	r6,r2,r4
    ad40:	423f0044 	addi	r8,r8,-1023
    ad44:	194eb03a 	or	r7,r3,r5
    ad48:	008000c4 	movi	r2,3
    ad4c:	69c00415 	stw	r7,16(r13)
    ad50:	6a000215 	stw	r8,8(r13)
    ad54:	68800015 	stw	r2,0(r13)
    ad58:	69800315 	stw	r6,12(r13)
    ad5c:	f800283a 	ret
    ad60:	4a84b03a 	or	r2,r9,r10
    ad64:	1000031e 	bne	r2,zero,ad74 <__unpack_d+0x104>
    ad68:	00800104 	movi	r2,4
    ad6c:	28800015 	stw	r2,0(r5)
    ad70:	f800283a 	ret
    ad74:	0009883a 	mov	r4,zero
    ad78:	01400234 	movhi	r5,8
    ad7c:	4904703a 	and	r2,r9,r4
    ad80:	5146703a 	and	r3,r10,r5
    ad84:	10c4b03a 	or	r2,r2,r3
    ad88:	10000526 	beq	r2,zero,ada0 <__unpack_d+0x130>
    ad8c:	00800044 	movi	r2,1
    ad90:	68800015 	stw	r2,0(r13)
    ad94:	6b000415 	stw	r12,16(r13)
    ad98:	6ac00315 	stw	r11,12(r13)
    ad9c:	f800283a 	ret
    ada0:	68000015 	stw	zero,0(r13)
    ada4:	003ffb06 	br	ad94 <__unpack_d+0x124>

0000ada8 <__fpcmp_parts_d>:
    ada8:	21800017 	ldw	r6,0(r4)
    adac:	00c00044 	movi	r3,1
    adb0:	19800a2e 	bgeu	r3,r6,addc <__fpcmp_parts_d+0x34>
    adb4:	28800017 	ldw	r2,0(r5)
    adb8:	1880082e 	bgeu	r3,r2,addc <__fpcmp_parts_d+0x34>
    adbc:	00c00104 	movi	r3,4
    adc0:	30c02626 	beq	r6,r3,ae5c <__fpcmp_parts_d+0xb4>
    adc4:	10c02226 	beq	r2,r3,ae50 <__fpcmp_parts_d+0xa8>
    adc8:	00c00084 	movi	r3,2
    adcc:	30c00526 	beq	r6,r3,ade4 <__fpcmp_parts_d+0x3c>
    add0:	10c0071e 	bne	r2,r3,adf0 <__fpcmp_parts_d+0x48>
    add4:	20800117 	ldw	r2,4(r4)
    add8:	1000091e 	bne	r2,zero,ae00 <__fpcmp_parts_d+0x58>
    addc:	00800044 	movi	r2,1
    ade0:	f800283a 	ret
    ade4:	10c01a1e 	bne	r2,r3,ae50 <__fpcmp_parts_d+0xa8>
    ade8:	0005883a 	mov	r2,zero
    adec:	f800283a 	ret
    adf0:	22000117 	ldw	r8,4(r4)
    adf4:	28800117 	ldw	r2,4(r5)
    adf8:	40800326 	beq	r8,r2,ae08 <__fpcmp_parts_d+0x60>
    adfc:	403ff726 	beq	r8,zero,addc <__fpcmp_parts_d+0x34>
    ae00:	00bfffc4 	movi	r2,-1
    ae04:	f800283a 	ret
    ae08:	20c00217 	ldw	r3,8(r4)
    ae0c:	28800217 	ldw	r2,8(r5)
    ae10:	10fffa16 	blt	r2,r3,adfc <__fpcmp_parts_d+0x54>
    ae14:	18800916 	blt	r3,r2,ae3c <__fpcmp_parts_d+0x94>
    ae18:	21c00417 	ldw	r7,16(r4)
    ae1c:	28c00417 	ldw	r3,16(r5)
    ae20:	21800317 	ldw	r6,12(r4)
    ae24:	28800317 	ldw	r2,12(r5)
    ae28:	19fff436 	bltu	r3,r7,adfc <__fpcmp_parts_d+0x54>
    ae2c:	38c00526 	beq	r7,r3,ae44 <__fpcmp_parts_d+0x9c>
    ae30:	38c00236 	bltu	r7,r3,ae3c <__fpcmp_parts_d+0x94>
    ae34:	19ffec1e 	bne	r3,r7,ade8 <__fpcmp_parts_d+0x40>
    ae38:	30bfeb2e 	bgeu	r6,r2,ade8 <__fpcmp_parts_d+0x40>
    ae3c:	403fe71e 	bne	r8,zero,addc <__fpcmp_parts_d+0x34>
    ae40:	003fef06 	br	ae00 <__fpcmp_parts_d+0x58>
    ae44:	11bffa2e 	bgeu	r2,r6,ae30 <__fpcmp_parts_d+0x88>
    ae48:	403fe426 	beq	r8,zero,addc <__fpcmp_parts_d+0x34>
    ae4c:	003fec06 	br	ae00 <__fpcmp_parts_d+0x58>
    ae50:	28800117 	ldw	r2,4(r5)
    ae54:	103fe11e 	bne	r2,zero,addc <__fpcmp_parts_d+0x34>
    ae58:	003fe906 	br	ae00 <__fpcmp_parts_d+0x58>
    ae5c:	11bfdd1e 	bne	r2,r6,add4 <__fpcmp_parts_d+0x2c>
    ae60:	28c00117 	ldw	r3,4(r5)
    ae64:	20800117 	ldw	r2,4(r4)
    ae68:	1885c83a 	sub	r2,r3,r2
    ae6c:	f800283a 	ret

0000ae70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ae70:	defff404 	addi	sp,sp,-48
    ae74:	df000b15 	stw	fp,44(sp)
    ae78:	df000b04 	addi	fp,sp,44
    ae7c:	e13ffb15 	stw	r4,-20(fp)
    ae80:	e17ffc15 	stw	r5,-16(fp)
    ae84:	e1bffd15 	stw	r6,-12(fp)
    ae88:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ae8c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ae90:	00800074 	movhi	r2,1
    ae94:	10845104 	addi	r2,r2,4420
    ae98:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    ae9c:	1005003a 	cmpeq	r2,r2,zero
    aea0:	1000411e 	bne	r2,zero,afa8 <alt_alarm_start+0x138>
  {
    if (alarm)
    aea4:	e0bffb17 	ldw	r2,-20(fp)
    aea8:	1005003a 	cmpeq	r2,r2,zero
    aeac:	10003b1e 	bne	r2,zero,af9c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    aeb0:	e0fffb17 	ldw	r3,-20(fp)
    aeb4:	e0bffd17 	ldw	r2,-12(fp)
    aeb8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    aebc:	e0fffb17 	ldw	r3,-20(fp)
    aec0:	e0bffe17 	ldw	r2,-8(fp)
    aec4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aec8:	0005303a 	rdctl	r2,status
    aecc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aed0:	e0fff817 	ldw	r3,-32(fp)
    aed4:	00bfff84 	movi	r2,-2
    aed8:	1884703a 	and	r2,r3,r2
    aedc:	1001703a 	wrctl	status,r2
  
  return context;
    aee0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    aee4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    aee8:	00800074 	movhi	r2,1
    aeec:	10845204 	addi	r2,r2,4424
    aef0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    aef4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    aef8:	e0fffc17 	ldw	r3,-16(fp)
    aefc:	e0bff917 	ldw	r2,-28(fp)
    af00:	1885883a 	add	r2,r3,r2
    af04:	10c00044 	addi	r3,r2,1
    af08:	e0bffb17 	ldw	r2,-20(fp)
    af0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    af10:	e0bffb17 	ldw	r2,-20(fp)
    af14:	10c00217 	ldw	r3,8(r2)
    af18:	e0bff917 	ldw	r2,-28(fp)
    af1c:	1880042e 	bgeu	r3,r2,af30 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    af20:	e0fffb17 	ldw	r3,-20(fp)
    af24:	00800044 	movi	r2,1
    af28:	18800405 	stb	r2,16(r3)
    af2c:	00000206 	br	af38 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    af30:	e0bffb17 	ldw	r2,-20(fp)
    af34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    af38:	e0fffb17 	ldw	r3,-20(fp)
    af3c:	00800074 	movhi	r2,1
    af40:	10bda704 	addi	r2,r2,-2404
    af44:	e0bff615 	stw	r2,-40(fp)
    af48:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    af4c:	e0fff717 	ldw	r3,-36(fp)
    af50:	e0bff617 	ldw	r2,-40(fp)
    af54:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    af58:	e0bff617 	ldw	r2,-40(fp)
    af5c:	10c00017 	ldw	r3,0(r2)
    af60:	e0bff717 	ldw	r2,-36(fp)
    af64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    af68:	e0bff617 	ldw	r2,-40(fp)
    af6c:	10c00017 	ldw	r3,0(r2)
    af70:	e0bff717 	ldw	r2,-36(fp)
    af74:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    af78:	e0fff617 	ldw	r3,-40(fp)
    af7c:	e0bff717 	ldw	r2,-36(fp)
    af80:	18800015 	stw	r2,0(r3)
    af84:	e0bffa17 	ldw	r2,-24(fp)
    af88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af8c:	e0bff517 	ldw	r2,-44(fp)
    af90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    af94:	e03fff15 	stw	zero,-4(fp)
    af98:	00000506 	br	afb0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    af9c:	00bffa84 	movi	r2,-22
    afa0:	e0bfff15 	stw	r2,-4(fp)
    afa4:	00000206 	br	afb0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    afa8:	00bfde84 	movi	r2,-134
    afac:	e0bfff15 	stw	r2,-4(fp)
    afb0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    afb4:	e037883a 	mov	sp,fp
    afb8:	df000017 	ldw	fp,0(sp)
    afbc:	dec00104 	addi	sp,sp,4
    afc0:	f800283a 	ret

0000afc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    afc4:	defff804 	addi	sp,sp,-32
    afc8:	dfc00715 	stw	ra,28(sp)
    afcc:	df000615 	stw	fp,24(sp)
    afd0:	df000604 	addi	fp,sp,24
    afd4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    afd8:	e0bffc17 	ldw	r2,-16(fp)
    afdc:	1004803a 	cmplt	r2,r2,zero
    afe0:	1000091e 	bne	r2,zero,b008 <close+0x44>
    afe4:	e13ffc17 	ldw	r4,-16(fp)
    afe8:	01400304 	movi	r5,12
    afec:	000a7800 	call	a780 <__mulsi3>
    aff0:	1007883a 	mov	r3,r2
    aff4:	00800074 	movhi	r2,1
    aff8:	10b92204 	addi	r2,r2,-7032
    affc:	1887883a 	add	r3,r3,r2
    b000:	e0ffff15 	stw	r3,-4(fp)
    b004:	00000106 	br	b00c <close+0x48>
    b008:	e03fff15 	stw	zero,-4(fp)
    b00c:	e0bfff17 	ldw	r2,-4(fp)
    b010:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b014:	e0bffb17 	ldw	r2,-20(fp)
    b018:	1005003a 	cmpeq	r2,r2,zero
    b01c:	10001d1e 	bne	r2,zero,b094 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b020:	e0bffb17 	ldw	r2,-20(fp)
    b024:	10800017 	ldw	r2,0(r2)
    b028:	10800417 	ldw	r2,16(r2)
    b02c:	1005003a 	cmpeq	r2,r2,zero
    b030:	1000071e 	bne	r2,zero,b050 <close+0x8c>
    b034:	e0bffb17 	ldw	r2,-20(fp)
    b038:	10800017 	ldw	r2,0(r2)
    b03c:	10800417 	ldw	r2,16(r2)
    b040:	e13ffb17 	ldw	r4,-20(fp)
    b044:	103ee83a 	callr	r2
    b048:	e0bffe15 	stw	r2,-8(fp)
    b04c:	00000106 	br	b054 <close+0x90>
    b050:	e03ffe15 	stw	zero,-8(fp)
    b054:	e0bffe17 	ldw	r2,-8(fp)
    b058:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b05c:	e13ffc17 	ldw	r4,-16(fp)
    b060:	000b87c0 	call	b87c <alt_release_fd>
    if (rval < 0)
    b064:	e0bffa17 	ldw	r2,-24(fp)
    b068:	1004403a 	cmpge	r2,r2,zero
    b06c:	1000071e 	bne	r2,zero,b08c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    b070:	000b0c40 	call	b0c4 <alt_get_errno>
    b074:	e0fffa17 	ldw	r3,-24(fp)
    b078:	00c7c83a 	sub	r3,zero,r3
    b07c:	10c00015 	stw	r3,0(r2)
      return -1;
    b080:	00bfffc4 	movi	r2,-1
    b084:	e0bffd15 	stw	r2,-12(fp)
    b088:	00000806 	br	b0ac <close+0xe8>
    }
    return 0;
    b08c:	e03ffd15 	stw	zero,-12(fp)
    b090:	00000606 	br	b0ac <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b094:	000b0c40 	call	b0c4 <alt_get_errno>
    b098:	1007883a 	mov	r3,r2
    b09c:	00801444 	movi	r2,81
    b0a0:	18800015 	stw	r2,0(r3)
    return -1;
    b0a4:	00bfffc4 	movi	r2,-1
    b0a8:	e0bffd15 	stw	r2,-12(fp)
    b0ac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b0b0:	e037883a 	mov	sp,fp
    b0b4:	dfc00117 	ldw	ra,4(sp)
    b0b8:	df000017 	ldw	fp,0(sp)
    b0bc:	dec00204 	addi	sp,sp,8
    b0c0:	f800283a 	ret

0000b0c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b0c4:	defffd04 	addi	sp,sp,-12
    b0c8:	dfc00215 	stw	ra,8(sp)
    b0cc:	df000115 	stw	fp,4(sp)
    b0d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b0d4:	00800074 	movhi	r2,1
    b0d8:	10bda504 	addi	r2,r2,-2412
    b0dc:	10800017 	ldw	r2,0(r2)
    b0e0:	1005003a 	cmpeq	r2,r2,zero
    b0e4:	1000061e 	bne	r2,zero,b100 <alt_get_errno+0x3c>
    b0e8:	00800074 	movhi	r2,1
    b0ec:	10bda504 	addi	r2,r2,-2412
    b0f0:	10800017 	ldw	r2,0(r2)
    b0f4:	103ee83a 	callr	r2
    b0f8:	e0bfff15 	stw	r2,-4(fp)
    b0fc:	00000306 	br	b10c <alt_get_errno+0x48>
    b100:	00800074 	movhi	r2,1
    b104:	10844a04 	addi	r2,r2,4392
    b108:	e0bfff15 	stw	r2,-4(fp)
    b10c:	e0bfff17 	ldw	r2,-4(fp)
}
    b110:	e037883a 	mov	sp,fp
    b114:	dfc00117 	ldw	ra,4(sp)
    b118:	df000017 	ldw	fp,0(sp)
    b11c:	dec00204 	addi	sp,sp,8
    b120:	f800283a 	ret

0000b124 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b124:	defffc04 	addi	sp,sp,-16
    b128:	df000315 	stw	fp,12(sp)
    b12c:	df000304 	addi	fp,sp,12
    b130:	e13ffd15 	stw	r4,-12(fp)
    b134:	e17ffe15 	stw	r5,-8(fp)
    b138:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b13c:	e0bfff17 	ldw	r2,-4(fp)
}
    b140:	e037883a 	mov	sp,fp
    b144:	df000017 	ldw	fp,0(sp)
    b148:	dec00104 	addi	sp,sp,4
    b14c:	f800283a 	ret

0000b150 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b150:	defffd04 	addi	sp,sp,-12
    b154:	df000215 	stw	fp,8(sp)
    b158:	df000204 	addi	fp,sp,8
    b15c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b160:	e0bfff17 	ldw	r2,-4(fp)
    b164:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b168:	e0bffe17 	ldw	r2,-8(fp)
    b16c:	1005003a 	cmpeq	r2,r2,zero
    b170:	1000021e 	bne	r2,zero,b17c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b174:	002af070 	cmpltui	zero,zero,43969
    b178:	00000106 	br	b180 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b17c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b180:	e037883a 	mov	sp,fp
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00104 	addi	sp,sp,4
    b18c:	f800283a 	ret

0000b190 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b190:	defffd04 	addi	sp,sp,-12
    b194:	dfc00215 	stw	ra,8(sp)
    b198:	df000115 	stw	fp,4(sp)
    b19c:	df000104 	addi	fp,sp,4
    b1a0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b1a4:	e13fff17 	ldw	r4,-4(fp)
    b1a8:	000b1500 	call	b150 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b1ac:	003fff06 	br	b1ac <_exit+0x1c>

0000b1b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b1b0:	defff904 	addi	sp,sp,-28
    b1b4:	dfc00615 	stw	ra,24(sp)
    b1b8:	df000515 	stw	fp,20(sp)
    b1bc:	df000504 	addi	fp,sp,20
    b1c0:	e13ffc15 	stw	r4,-16(fp)
    b1c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b1c8:	e0bffc17 	ldw	r2,-16(fp)
    b1cc:	1004803a 	cmplt	r2,r2,zero
    b1d0:	1000091e 	bne	r2,zero,b1f8 <fstat+0x48>
    b1d4:	e13ffc17 	ldw	r4,-16(fp)
    b1d8:	01400304 	movi	r5,12
    b1dc:	000a7800 	call	a780 <__mulsi3>
    b1e0:	1007883a 	mov	r3,r2
    b1e4:	00800074 	movhi	r2,1
    b1e8:	10b92204 	addi	r2,r2,-7032
    b1ec:	1887883a 	add	r3,r3,r2
    b1f0:	e0ffff15 	stw	r3,-4(fp)
    b1f4:	00000106 	br	b1fc <fstat+0x4c>
    b1f8:	e03fff15 	stw	zero,-4(fp)
    b1fc:	e0bfff17 	ldw	r2,-4(fp)
    b200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b204:	e0bffb17 	ldw	r2,-20(fp)
    b208:	1005003a 	cmpeq	r2,r2,zero
    b20c:	1000121e 	bne	r2,zero,b258 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b210:	e0bffb17 	ldw	r2,-20(fp)
    b214:	10800017 	ldw	r2,0(r2)
    b218:	10800817 	ldw	r2,32(r2)
    b21c:	1005003a 	cmpeq	r2,r2,zero
    b220:	1000081e 	bne	r2,zero,b244 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    b224:	e0bffb17 	ldw	r2,-20(fp)
    b228:	10800017 	ldw	r2,0(r2)
    b22c:	10800817 	ldw	r2,32(r2)
    b230:	e13ffb17 	ldw	r4,-20(fp)
    b234:	e17ffd17 	ldw	r5,-12(fp)
    b238:	103ee83a 	callr	r2
    b23c:	e0bffe15 	stw	r2,-8(fp)
    b240:	00000b06 	br	b270 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b244:	e0fffd17 	ldw	r3,-12(fp)
    b248:	00880004 	movi	r2,8192
    b24c:	18800115 	stw	r2,4(r3)
      return 0;
    b250:	e03ffe15 	stw	zero,-8(fp)
    b254:	00000606 	br	b270 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b258:	000b2880 	call	b288 <alt_get_errno>
    b25c:	1007883a 	mov	r3,r2
    b260:	00801444 	movi	r2,81
    b264:	18800015 	stw	r2,0(r3)
    return -1;
    b268:	00bfffc4 	movi	r2,-1
    b26c:	e0bffe15 	stw	r2,-8(fp)
    b270:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b274:	e037883a 	mov	sp,fp
    b278:	dfc00117 	ldw	ra,4(sp)
    b27c:	df000017 	ldw	fp,0(sp)
    b280:	dec00204 	addi	sp,sp,8
    b284:	f800283a 	ret

0000b288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b288:	defffd04 	addi	sp,sp,-12
    b28c:	dfc00215 	stw	ra,8(sp)
    b290:	df000115 	stw	fp,4(sp)
    b294:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b298:	00800074 	movhi	r2,1
    b29c:	10bda504 	addi	r2,r2,-2412
    b2a0:	10800017 	ldw	r2,0(r2)
    b2a4:	1005003a 	cmpeq	r2,r2,zero
    b2a8:	1000061e 	bne	r2,zero,b2c4 <alt_get_errno+0x3c>
    b2ac:	00800074 	movhi	r2,1
    b2b0:	10bda504 	addi	r2,r2,-2412
    b2b4:	10800017 	ldw	r2,0(r2)
    b2b8:	103ee83a 	callr	r2
    b2bc:	e0bfff15 	stw	r2,-4(fp)
    b2c0:	00000306 	br	b2d0 <alt_get_errno+0x48>
    b2c4:	00800074 	movhi	r2,1
    b2c8:	10844a04 	addi	r2,r2,4392
    b2cc:	e0bfff15 	stw	r2,-4(fp)
    b2d0:	e0bfff17 	ldw	r2,-4(fp)
}
    b2d4:	e037883a 	mov	sp,fp
    b2d8:	dfc00117 	ldw	ra,4(sp)
    b2dc:	df000017 	ldw	fp,0(sp)
    b2e0:	dec00204 	addi	sp,sp,8
    b2e4:	f800283a 	ret

0000b2e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b2e8:	deffeb04 	addi	sp,sp,-84
    b2ec:	dfc01415 	stw	ra,80(sp)
    b2f0:	df001315 	stw	fp,76(sp)
    b2f4:	df001304 	addi	fp,sp,76
    b2f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b2fc:	e0bffd17 	ldw	r2,-12(fp)
    b300:	1004803a 	cmplt	r2,r2,zero
    b304:	1000091e 	bne	r2,zero,b32c <isatty+0x44>
    b308:	e13ffd17 	ldw	r4,-12(fp)
    b30c:	01400304 	movi	r5,12
    b310:	000a7800 	call	a780 <__mulsi3>
    b314:	1007883a 	mov	r3,r2
    b318:	00800074 	movhi	r2,1
    b31c:	10b92204 	addi	r2,r2,-7032
    b320:	1887883a 	add	r3,r3,r2
    b324:	e0ffff15 	stw	r3,-4(fp)
    b328:	00000106 	br	b330 <isatty+0x48>
    b32c:	e03fff15 	stw	zero,-4(fp)
    b330:	e0bfff17 	ldw	r2,-4(fp)
    b334:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b338:	e0bfed17 	ldw	r2,-76(fp)
    b33c:	1005003a 	cmpeq	r2,r2,zero
    b340:	10000f1e 	bne	r2,zero,b380 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b344:	e0bfed17 	ldw	r2,-76(fp)
    b348:	10800017 	ldw	r2,0(r2)
    b34c:	10800817 	ldw	r2,32(r2)
    b350:	1004c03a 	cmpne	r2,r2,zero
    b354:	1000031e 	bne	r2,zero,b364 <isatty+0x7c>
    {
      return 1;
    b358:	00800044 	movi	r2,1
    b35c:	e0bffe15 	stw	r2,-8(fp)
    b360:	00000c06 	br	b394 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b364:	e17fee04 	addi	r5,fp,-72
    b368:	e13ffd17 	ldw	r4,-12(fp)
    b36c:	000b1b00 	call	b1b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b370:	e0bfef17 	ldw	r2,-68(fp)
    b374:	10880020 	cmpeqi	r2,r2,8192
    b378:	e0bffe15 	stw	r2,-8(fp)
    b37c:	00000506 	br	b394 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b380:	000b3ac0 	call	b3ac <alt_get_errno>
    b384:	1007883a 	mov	r3,r2
    b388:	00801444 	movi	r2,81
    b38c:	18800015 	stw	r2,0(r3)
    return 0;
    b390:	e03ffe15 	stw	zero,-8(fp)
    b394:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b398:	e037883a 	mov	sp,fp
    b39c:	dfc00117 	ldw	ra,4(sp)
    b3a0:	df000017 	ldw	fp,0(sp)
    b3a4:	dec00204 	addi	sp,sp,8
    b3a8:	f800283a 	ret

0000b3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3ac:	defffd04 	addi	sp,sp,-12
    b3b0:	dfc00215 	stw	ra,8(sp)
    b3b4:	df000115 	stw	fp,4(sp)
    b3b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3bc:	00800074 	movhi	r2,1
    b3c0:	10bda504 	addi	r2,r2,-2412
    b3c4:	10800017 	ldw	r2,0(r2)
    b3c8:	1005003a 	cmpeq	r2,r2,zero
    b3cc:	1000061e 	bne	r2,zero,b3e8 <alt_get_errno+0x3c>
    b3d0:	00800074 	movhi	r2,1
    b3d4:	10bda504 	addi	r2,r2,-2412
    b3d8:	10800017 	ldw	r2,0(r2)
    b3dc:	103ee83a 	callr	r2
    b3e0:	e0bfff15 	stw	r2,-4(fp)
    b3e4:	00000306 	br	b3f4 <alt_get_errno+0x48>
    b3e8:	00800074 	movhi	r2,1
    b3ec:	10844a04 	addi	r2,r2,4392
    b3f0:	e0bfff15 	stw	r2,-4(fp)
    b3f4:	e0bfff17 	ldw	r2,-4(fp)
}
    b3f8:	e037883a 	mov	sp,fp
    b3fc:	dfc00117 	ldw	ra,4(sp)
    b400:	df000017 	ldw	fp,0(sp)
    b404:	dec00204 	addi	sp,sp,8
    b408:	f800283a 	ret

0000b40c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b40c:	defffe04 	addi	sp,sp,-8
    b410:	dfc00115 	stw	ra,4(sp)
    b414:	df000015 	stw	fp,0(sp)
    b418:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b41c:	01000074 	movhi	r4,1
    b420:	213daa04 	addi	r4,r4,-2392
    b424:	01400074 	movhi	r5,1
    b428:	29771304 	addi	r5,r5,-9140
    b42c:	01800074 	movhi	r6,1
    b430:	31bdaa04 	addi	r6,r6,-2392
    b434:	000b48c0 	call	b48c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b438:	01000034 	movhi	r4,0
    b43c:	21000804 	addi	r4,r4,32
    b440:	01400034 	movhi	r5,0
    b444:	29400804 	addi	r5,r5,32
    b448:	01800034 	movhi	r6,0
    b44c:	31807504 	addi	r6,r6,468
    b450:	000b48c0 	call	b48c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b454:	01000074 	movhi	r4,1
    b458:	2135cc04 	addi	r4,r4,-10448
    b45c:	01400074 	movhi	r5,1
    b460:	2975cc04 	addi	r5,r5,-10448
    b464:	01800074 	movhi	r6,1
    b468:	31b71304 	addi	r6,r6,-9140
    b46c:	000b48c0 	call	b48c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b470:	000c94c0 	call	c94c <alt_dcache_flush_all>
  alt_icache_flush_all();
    b474:	000cb440 	call	cb44 <alt_icache_flush_all>
}
    b478:	e037883a 	mov	sp,fp
    b47c:	dfc00117 	ldw	ra,4(sp)
    b480:	df000017 	ldw	fp,0(sp)
    b484:	dec00204 	addi	sp,sp,8
    b488:	f800283a 	ret

0000b48c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b48c:	defffc04 	addi	sp,sp,-16
    b490:	df000315 	stw	fp,12(sp)
    b494:	df000304 	addi	fp,sp,12
    b498:	e13ffd15 	stw	r4,-12(fp)
    b49c:	e17ffe15 	stw	r5,-8(fp)
    b4a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b4a4:	e0fffe17 	ldw	r3,-8(fp)
    b4a8:	e0bffd17 	ldw	r2,-12(fp)
    b4ac:	18800e26 	beq	r3,r2,b4e8 <alt_load_section+0x5c>
  {
    while( to != end )
    b4b0:	00000a06 	br	b4dc <alt_load_section+0x50>
    {
      *to++ = *from++;
    b4b4:	e0bffd17 	ldw	r2,-12(fp)
    b4b8:	10c00017 	ldw	r3,0(r2)
    b4bc:	e0bffe17 	ldw	r2,-8(fp)
    b4c0:	10c00015 	stw	r3,0(r2)
    b4c4:	e0bffe17 	ldw	r2,-8(fp)
    b4c8:	10800104 	addi	r2,r2,4
    b4cc:	e0bffe15 	stw	r2,-8(fp)
    b4d0:	e0bffd17 	ldw	r2,-12(fp)
    b4d4:	10800104 	addi	r2,r2,4
    b4d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b4dc:	e0fffe17 	ldw	r3,-8(fp)
    b4e0:	e0bfff17 	ldw	r2,-4(fp)
    b4e4:	18bff31e 	bne	r3,r2,b4b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b4e8:	e037883a 	mov	sp,fp
    b4ec:	df000017 	ldw	fp,0(sp)
    b4f0:	dec00104 	addi	sp,sp,4
    b4f4:	f800283a 	ret

0000b4f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b4f8:	defff804 	addi	sp,sp,-32
    b4fc:	dfc00715 	stw	ra,28(sp)
    b500:	df000615 	stw	fp,24(sp)
    b504:	df000604 	addi	fp,sp,24
    b508:	e13ffc15 	stw	r4,-16(fp)
    b50c:	e17ffd15 	stw	r5,-12(fp)
    b510:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b514:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b518:	e0bffc17 	ldw	r2,-16(fp)
    b51c:	1004803a 	cmplt	r2,r2,zero
    b520:	1000091e 	bne	r2,zero,b548 <lseek+0x50>
    b524:	e13ffc17 	ldw	r4,-16(fp)
    b528:	01400304 	movi	r5,12
    b52c:	000a7800 	call	a780 <__mulsi3>
    b530:	1007883a 	mov	r3,r2
    b534:	00800074 	movhi	r2,1
    b538:	10b92204 	addi	r2,r2,-7032
    b53c:	1887883a 	add	r3,r3,r2
    b540:	e0ffff15 	stw	r3,-4(fp)
    b544:	00000106 	br	b54c <lseek+0x54>
    b548:	e03fff15 	stw	zero,-4(fp)
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b554:	e0bffb17 	ldw	r2,-20(fp)
    b558:	1005003a 	cmpeq	r2,r2,zero
    b55c:	1000111e 	bne	r2,zero,b5a4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b560:	e0bffb17 	ldw	r2,-20(fp)
    b564:	10800017 	ldw	r2,0(r2)
    b568:	10800717 	ldw	r2,28(r2)
    b56c:	1005003a 	cmpeq	r2,r2,zero
    b570:	1000091e 	bne	r2,zero,b598 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b574:	e0bffb17 	ldw	r2,-20(fp)
    b578:	10800017 	ldw	r2,0(r2)
    b57c:	10800717 	ldw	r2,28(r2)
    b580:	e13ffb17 	ldw	r4,-20(fp)
    b584:	e17ffd17 	ldw	r5,-12(fp)
    b588:	e1bffe17 	ldw	r6,-8(fp)
    b58c:	103ee83a 	callr	r2
    b590:	e0bffa15 	stw	r2,-24(fp)
    b594:	00000506 	br	b5ac <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b598:	00bfde84 	movi	r2,-134
    b59c:	e0bffa15 	stw	r2,-24(fp)
    b5a0:	00000206 	br	b5ac <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    b5a4:	00bfebc4 	movi	r2,-81
    b5a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b5ac:	e0bffa17 	ldw	r2,-24(fp)
    b5b0:	1004403a 	cmpge	r2,r2,zero
    b5b4:	1000071e 	bne	r2,zero,b5d4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    b5b8:	000b5ec0 	call	b5ec <alt_get_errno>
    b5bc:	1007883a 	mov	r3,r2
    b5c0:	e0bffa17 	ldw	r2,-24(fp)
    b5c4:	0085c83a 	sub	r2,zero,r2
    b5c8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b5cc:	00bfffc4 	movi	r2,-1
    b5d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b5d4:	e0bffa17 	ldw	r2,-24(fp)
}
    b5d8:	e037883a 	mov	sp,fp
    b5dc:	dfc00117 	ldw	ra,4(sp)
    b5e0:	df000017 	ldw	fp,0(sp)
    b5e4:	dec00204 	addi	sp,sp,8
    b5e8:	f800283a 	ret

0000b5ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5ec:	defffd04 	addi	sp,sp,-12
    b5f0:	dfc00215 	stw	ra,8(sp)
    b5f4:	df000115 	stw	fp,4(sp)
    b5f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b5fc:	00800074 	movhi	r2,1
    b600:	10bda504 	addi	r2,r2,-2412
    b604:	10800017 	ldw	r2,0(r2)
    b608:	1005003a 	cmpeq	r2,r2,zero
    b60c:	1000061e 	bne	r2,zero,b628 <alt_get_errno+0x3c>
    b610:	00800074 	movhi	r2,1
    b614:	10bda504 	addi	r2,r2,-2412
    b618:	10800017 	ldw	r2,0(r2)
    b61c:	103ee83a 	callr	r2
    b620:	e0bfff15 	stw	r2,-4(fp)
    b624:	00000306 	br	b634 <alt_get_errno+0x48>
    b628:	00800074 	movhi	r2,1
    b62c:	10844a04 	addi	r2,r2,4392
    b630:	e0bfff15 	stw	r2,-4(fp)
    b634:	e0bfff17 	ldw	r2,-4(fp)
}
    b638:	e037883a 	mov	sp,fp
    b63c:	dfc00117 	ldw	ra,4(sp)
    b640:	df000017 	ldw	fp,0(sp)
    b644:	dec00204 	addi	sp,sp,8
    b648:	f800283a 	ret

0000b64c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b64c:	defffd04 	addi	sp,sp,-12
    b650:	dfc00215 	stw	ra,8(sp)
    b654:	df000115 	stw	fp,4(sp)
    b658:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b65c:	0009883a 	mov	r4,zero
    b660:	000bcd80 	call	bcd8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b664:	000bd0c0 	call	bd0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b668:	01000074 	movhi	r4,1
    b66c:	21370b04 	addi	r4,r4,-9172
    b670:	01400074 	movhi	r5,1
    b674:	29770b04 	addi	r5,r5,-9172
    b678:	01800074 	movhi	r6,1
    b67c:	31b70b04 	addi	r6,r6,-9172
    b680:	000cf040 	call	cf04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b684:	000ca7c0 	call	ca7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b688:	01000074 	movhi	r4,1
    b68c:	2132b804 	addi	r4,r4,-13600
    b690:	000d5040 	call	d504 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b694:	d126b417 	ldw	r4,-25904(gp)
    b698:	d166b517 	ldw	r5,-25900(gp)
    b69c:	d1a6b617 	ldw	r6,-25896(gp)
    b6a0:	00008480 	call	848 <main>
    b6a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b6a8:	01000044 	movi	r4,1
    b6ac:	000afc40 	call	afc4 <close>
  exit (result);
    b6b0:	e13fff17 	ldw	r4,-4(fp)
    b6b4:	0000e940 	call	e94 <exit>

0000b6b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b6b8:	defffe04 	addi	sp,sp,-8
    b6bc:	df000115 	stw	fp,4(sp)
    b6c0:	df000104 	addi	fp,sp,4
    b6c4:	e13fff15 	stw	r4,-4(fp)
}
    b6c8:	e037883a 	mov	sp,fp
    b6cc:	df000017 	ldw	fp,0(sp)
    b6d0:	dec00104 	addi	sp,sp,4
    b6d4:	f800283a 	ret

0000b6d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b6d8:	defffe04 	addi	sp,sp,-8
    b6dc:	df000115 	stw	fp,4(sp)
    b6e0:	df000104 	addi	fp,sp,4
    b6e4:	e13fff15 	stw	r4,-4(fp)
}
    b6e8:	e037883a 	mov	sp,fp
    b6ec:	df000017 	ldw	fp,0(sp)
    b6f0:	dec00104 	addi	sp,sp,4
    b6f4:	f800283a 	ret

0000b6f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b6f8:	defff704 	addi	sp,sp,-36
    b6fc:	dfc00815 	stw	ra,32(sp)
    b700:	df000715 	stw	fp,28(sp)
    b704:	df000704 	addi	fp,sp,28
    b708:	e13ffb15 	stw	r4,-20(fp)
    b70c:	e17ffc15 	stw	r5,-16(fp)
    b710:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b714:	e0bffb17 	ldw	r2,-20(fp)
    b718:	1004803a 	cmplt	r2,r2,zero
    b71c:	1000091e 	bne	r2,zero,b744 <read+0x4c>
    b720:	e13ffb17 	ldw	r4,-20(fp)
    b724:	01400304 	movi	r5,12
    b728:	000a7800 	call	a780 <__mulsi3>
    b72c:	1007883a 	mov	r3,r2
    b730:	00800074 	movhi	r2,1
    b734:	10b92204 	addi	r2,r2,-7032
    b738:	1887883a 	add	r3,r3,r2
    b73c:	e0ffff15 	stw	r3,-4(fp)
    b740:	00000106 	br	b748 <read+0x50>
    b744:	e03fff15 	stw	zero,-4(fp)
    b748:	e0bfff17 	ldw	r2,-4(fp)
    b74c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b750:	e0bffa17 	ldw	r2,-24(fp)
    b754:	1005003a 	cmpeq	r2,r2,zero
    b758:	1000241e 	bne	r2,zero,b7ec <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b75c:	e0bffa17 	ldw	r2,-24(fp)
    b760:	10800217 	ldw	r2,8(r2)
    b764:	108000cc 	andi	r2,r2,3
    b768:	10800060 	cmpeqi	r2,r2,1
    b76c:	10001a1e 	bne	r2,zero,b7d8 <read+0xe0>
    b770:	e0bffa17 	ldw	r2,-24(fp)
    b774:	10800017 	ldw	r2,0(r2)
    b778:	10800517 	ldw	r2,20(r2)
    b77c:	1005003a 	cmpeq	r2,r2,zero
    b780:	1000151e 	bne	r2,zero,b7d8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b784:	e0bffa17 	ldw	r2,-24(fp)
    b788:	10800017 	ldw	r2,0(r2)
    b78c:	10800517 	ldw	r2,20(r2)
    b790:	e17ffc17 	ldw	r5,-16(fp)
    b794:	e1bffd17 	ldw	r6,-12(fp)
    b798:	e13ffa17 	ldw	r4,-24(fp)
    b79c:	103ee83a 	callr	r2
    b7a0:	e0bff915 	stw	r2,-28(fp)
    b7a4:	e0bff917 	ldw	r2,-28(fp)
    b7a8:	1004403a 	cmpge	r2,r2,zero
    b7ac:	1000071e 	bne	r2,zero,b7cc <read+0xd4>
        {
          ALT_ERRNO = -rval;
    b7b0:	000b81c0 	call	b81c <alt_get_errno>
    b7b4:	e0fff917 	ldw	r3,-28(fp)
    b7b8:	00c7c83a 	sub	r3,zero,r3
    b7bc:	10c00015 	stw	r3,0(r2)
          return -1;
    b7c0:	00bfffc4 	movi	r2,-1
    b7c4:	e0bffe15 	stw	r2,-8(fp)
    b7c8:	00000e06 	br	b804 <read+0x10c>
        }
        return rval;
    b7cc:	e0bff917 	ldw	r2,-28(fp)
    b7d0:	e0bffe15 	stw	r2,-8(fp)
    b7d4:	00000b06 	br	b804 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b7d8:	000b81c0 	call	b81c <alt_get_errno>
    b7dc:	1007883a 	mov	r3,r2
    b7e0:	00800344 	movi	r2,13
    b7e4:	18800015 	stw	r2,0(r3)
    b7e8:	00000406 	br	b7fc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b7ec:	000b81c0 	call	b81c <alt_get_errno>
    b7f0:	1007883a 	mov	r3,r2
    b7f4:	00801444 	movi	r2,81
    b7f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b7fc:	00bfffc4 	movi	r2,-1
    b800:	e0bffe15 	stw	r2,-8(fp)
    b804:	e0bffe17 	ldw	r2,-8(fp)
}
    b808:	e037883a 	mov	sp,fp
    b80c:	dfc00117 	ldw	ra,4(sp)
    b810:	df000017 	ldw	fp,0(sp)
    b814:	dec00204 	addi	sp,sp,8
    b818:	f800283a 	ret

0000b81c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b81c:	defffd04 	addi	sp,sp,-12
    b820:	dfc00215 	stw	ra,8(sp)
    b824:	df000115 	stw	fp,4(sp)
    b828:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b82c:	00800074 	movhi	r2,1
    b830:	10bda504 	addi	r2,r2,-2412
    b834:	10800017 	ldw	r2,0(r2)
    b838:	1005003a 	cmpeq	r2,r2,zero
    b83c:	1000061e 	bne	r2,zero,b858 <alt_get_errno+0x3c>
    b840:	00800074 	movhi	r2,1
    b844:	10bda504 	addi	r2,r2,-2412
    b848:	10800017 	ldw	r2,0(r2)
    b84c:	103ee83a 	callr	r2
    b850:	e0bfff15 	stw	r2,-4(fp)
    b854:	00000306 	br	b864 <alt_get_errno+0x48>
    b858:	00800074 	movhi	r2,1
    b85c:	10844a04 	addi	r2,r2,4392
    b860:	e0bfff15 	stw	r2,-4(fp)
    b864:	e0bfff17 	ldw	r2,-4(fp)
}
    b868:	e037883a 	mov	sp,fp
    b86c:	dfc00117 	ldw	ra,4(sp)
    b870:	df000017 	ldw	fp,0(sp)
    b874:	dec00204 	addi	sp,sp,8
    b878:	f800283a 	ret

0000b87c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b87c:	defffc04 	addi	sp,sp,-16
    b880:	dfc00315 	stw	ra,12(sp)
    b884:	df000215 	stw	fp,8(sp)
    b888:	dc000115 	stw	r16,4(sp)
    b88c:	df000104 	addi	fp,sp,4
    b890:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b894:	e0bfff17 	ldw	r2,-4(fp)
    b898:	108000d0 	cmplti	r2,r2,3
    b89c:	10000f1e 	bne	r2,zero,b8dc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    b8a0:	e13fff17 	ldw	r4,-4(fp)
    b8a4:	04000074 	movhi	r16,1
    b8a8:	84392204 	addi	r16,r16,-7032
    b8ac:	01400304 	movi	r5,12
    b8b0:	000a7800 	call	a780 <__mulsi3>
    b8b4:	1405883a 	add	r2,r2,r16
    b8b8:	10800204 	addi	r2,r2,8
    b8bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b8c0:	e13fff17 	ldw	r4,-4(fp)
    b8c4:	04000074 	movhi	r16,1
    b8c8:	84392204 	addi	r16,r16,-7032
    b8cc:	01400304 	movi	r5,12
    b8d0:	000a7800 	call	a780 <__mulsi3>
    b8d4:	1405883a 	add	r2,r2,r16
    b8d8:	10000015 	stw	zero,0(r2)
  }
}
    b8dc:	e037883a 	mov	sp,fp
    b8e0:	dfc00217 	ldw	ra,8(sp)
    b8e4:	df000117 	ldw	fp,4(sp)
    b8e8:	dc000017 	ldw	r16,0(sp)
    b8ec:	dec00304 	addi	sp,sp,12
    b8f0:	f800283a 	ret

0000b8f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b8f4:	defff804 	addi	sp,sp,-32
    b8f8:	df000715 	stw	fp,28(sp)
    b8fc:	df000704 	addi	fp,sp,28
    b900:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b904:	0005303a 	rdctl	r2,status
    b908:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b90c:	e0fffb17 	ldw	r3,-20(fp)
    b910:	00bfff84 	movi	r2,-2
    b914:	1884703a 	and	r2,r3,r2
    b918:	1001703a 	wrctl	status,r2
  
  return context;
    b91c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b920:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b924:	d0a00c17 	ldw	r2,-32720(gp)
    b928:	10c000c4 	addi	r3,r2,3
    b92c:	00bfff04 	movi	r2,-4
    b930:	1884703a 	and	r2,r3,r2
    b934:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b938:	d0e00c17 	ldw	r3,-32720(gp)
    b93c:	e0bffe17 	ldw	r2,-8(fp)
    b940:	1887883a 	add	r3,r3,r2
    b944:	00802034 	movhi	r2,128
    b948:	10800004 	addi	r2,r2,0
    b94c:	10c0072e 	bgeu	r2,r3,b96c <sbrk+0x78>
    b950:	e0bffd17 	ldw	r2,-12(fp)
    b954:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b958:	e0bffa17 	ldw	r2,-24(fp)
    b95c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b960:	00bfffc4 	movi	r2,-1
    b964:	e0bfff15 	stw	r2,-4(fp)
    b968:	00000c06 	br	b99c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b96c:	d0a00c17 	ldw	r2,-32720(gp)
    b970:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b974:	d0e00c17 	ldw	r3,-32720(gp)
    b978:	e0bffe17 	ldw	r2,-8(fp)
    b97c:	1885883a 	add	r2,r3,r2
    b980:	d0a00c15 	stw	r2,-32720(gp)
    b984:	e0bffd17 	ldw	r2,-12(fp)
    b988:	e0bff915 	stw	r2,-28(fp)
    b98c:	e0bff917 	ldw	r2,-28(fp)
    b990:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b994:	e0bffc17 	ldw	r2,-16(fp)
    b998:	e0bfff15 	stw	r2,-4(fp)
    b99c:	e0bfff17 	ldw	r2,-4(fp)
} 
    b9a0:	e037883a 	mov	sp,fp
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00104 	addi	sp,sp,4
    b9ac:	f800283a 	ret

0000b9b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b9b0:	defffa04 	addi	sp,sp,-24
    b9b4:	df000515 	stw	fp,20(sp)
    b9b8:	df000504 	addi	fp,sp,20
    b9bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9c0:	0005303a 	rdctl	r2,status
    b9c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9c8:	e0fffd17 	ldw	r3,-12(fp)
    b9cc:	00bfff84 	movi	r2,-2
    b9d0:	1884703a 	and	r2,r3,r2
    b9d4:	1001703a 	wrctl	status,r2
  
  return context;
    b9d8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b9dc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b9e0:	e0bfff17 	ldw	r2,-4(fp)
    b9e4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b9e8:	e0bffc17 	ldw	r2,-16(fp)
    b9ec:	10c00017 	ldw	r3,0(r2)
    b9f0:	e0bffc17 	ldw	r2,-16(fp)
    b9f4:	10800117 	ldw	r2,4(r2)
    b9f8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b9fc:	e0bffc17 	ldw	r2,-16(fp)
    ba00:	10c00117 	ldw	r3,4(r2)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	10800017 	ldw	r2,0(r2)
    ba0c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ba10:	e0fffc17 	ldw	r3,-16(fp)
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    ba1c:	e0fffc17 	ldw	r3,-16(fp)
    ba20:	e0bffc17 	ldw	r2,-16(fp)
    ba24:	18800015 	stw	r2,0(r3)
    ba28:	e0bffe17 	ldw	r2,-8(fp)
    ba2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba30:	e0bffb17 	ldw	r2,-20(fp)
    ba34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ba38:	e037883a 	mov	sp,fp
    ba3c:	df000017 	ldw	fp,0(sp)
    ba40:	dec00104 	addi	sp,sp,4
    ba44:	f800283a 	ret

0000ba48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ba48:	defffb04 	addi	sp,sp,-20
    ba4c:	dfc00415 	stw	ra,16(sp)
    ba50:	df000315 	stw	fp,12(sp)
    ba54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ba58:	d0a00d17 	ldw	r2,-32716(gp)
    ba5c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ba60:	d0a6b817 	ldw	r2,-25888(gp)
    ba64:	10800044 	addi	r2,r2,1
    ba68:	d0a6b815 	stw	r2,-25888(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ba6c:	00003106 	br	bb34 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    ba70:	e0bffe17 	ldw	r2,-8(fp)
    ba74:	10800017 	ldw	r2,0(r2)
    ba78:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ba7c:	e0bffe17 	ldw	r2,-8(fp)
    ba80:	10800403 	ldbu	r2,16(r2)
    ba84:	10803fcc 	andi	r2,r2,255
    ba88:	1005003a 	cmpeq	r2,r2,zero
    ba8c:	1000051e 	bne	r2,zero,baa4 <alt_tick+0x5c>
    ba90:	d0a6b817 	ldw	r2,-25888(gp)
    ba94:	1004c03a 	cmpne	r2,r2,zero
    ba98:	1000021e 	bne	r2,zero,baa4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    ba9c:	e0bffe17 	ldw	r2,-8(fp)
    baa0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    baa4:	e0bffe17 	ldw	r2,-8(fp)
    baa8:	10c00217 	ldw	r3,8(r2)
    baac:	d0a6b817 	ldw	r2,-25888(gp)
    bab0:	10c01e36 	bltu	r2,r3,bb2c <alt_tick+0xe4>
    bab4:	e0bffe17 	ldw	r2,-8(fp)
    bab8:	10800403 	ldbu	r2,16(r2)
    babc:	10803fcc 	andi	r2,r2,255
    bac0:	1004c03a 	cmpne	r2,r2,zero
    bac4:	1000191e 	bne	r2,zero,bb2c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    bac8:	e0bffe17 	ldw	r2,-8(fp)
    bacc:	10c00317 	ldw	r3,12(r2)
    bad0:	e0bffe17 	ldw	r2,-8(fp)
    bad4:	11000517 	ldw	r4,20(r2)
    bad8:	183ee83a 	callr	r3
    badc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bae0:	e0bffd17 	ldw	r2,-12(fp)
    bae4:	1004c03a 	cmpne	r2,r2,zero
    bae8:	1000031e 	bne	r2,zero,baf8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    baec:	e13ffe17 	ldw	r4,-8(fp)
    baf0:	000b9b00 	call	b9b0 <alt_alarm_stop>
    baf4:	00000d06 	br	bb2c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    baf8:	e0bffe17 	ldw	r2,-8(fp)
    bafc:	10c00217 	ldw	r3,8(r2)
    bb00:	e0bffd17 	ldw	r2,-12(fp)
    bb04:	1887883a 	add	r3,r3,r2
    bb08:	e0bffe17 	ldw	r2,-8(fp)
    bb0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bb10:	e0bffe17 	ldw	r2,-8(fp)
    bb14:	10c00217 	ldw	r3,8(r2)
    bb18:	d0a6b817 	ldw	r2,-25888(gp)
    bb1c:	1880032e 	bgeu	r3,r2,bb2c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    bb20:	e0fffe17 	ldw	r3,-8(fp)
    bb24:	00800044 	movi	r2,1
    bb28:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    bb2c:	e0bfff17 	ldw	r2,-4(fp)
    bb30:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bb34:	d0e00d04 	addi	r3,gp,-32716
    bb38:	e0bffe17 	ldw	r2,-8(fp)
    bb3c:	10ffcc1e 	bne	r2,r3,ba70 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    bb40:	e037883a 	mov	sp,fp
    bb44:	dfc00117 	ldw	ra,4(sp)
    bb48:	df000017 	ldw	fp,0(sp)
    bb4c:	dec00204 	addi	sp,sp,8
    bb50:	f800283a 	ret

0000bb54 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bb54:	defff704 	addi	sp,sp,-36
    bb58:	dfc00815 	stw	ra,32(sp)
    bb5c:	df000715 	stw	fp,28(sp)
    bb60:	df000704 	addi	fp,sp,28
    bb64:	e13ffb15 	stw	r4,-20(fp)
    bb68:	e17ffc15 	stw	r5,-16(fp)
    bb6c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bb70:	e0bffb17 	ldw	r2,-20(fp)
    bb74:	1004803a 	cmplt	r2,r2,zero
    bb78:	1000091e 	bne	r2,zero,bba0 <write+0x4c>
    bb7c:	e13ffb17 	ldw	r4,-20(fp)
    bb80:	01400304 	movi	r5,12
    bb84:	000a7800 	call	a780 <__mulsi3>
    bb88:	1007883a 	mov	r3,r2
    bb8c:	00800074 	movhi	r2,1
    bb90:	10b92204 	addi	r2,r2,-7032
    bb94:	1887883a 	add	r3,r3,r2
    bb98:	e0ffff15 	stw	r3,-4(fp)
    bb9c:	00000106 	br	bba4 <write+0x50>
    bba0:	e03fff15 	stw	zero,-4(fp)
    bba4:	e0bfff17 	ldw	r2,-4(fp)
    bba8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bbac:	e0bffa17 	ldw	r2,-24(fp)
    bbb0:	1005003a 	cmpeq	r2,r2,zero
    bbb4:	1000241e 	bne	r2,zero,bc48 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bbb8:	e0bffa17 	ldw	r2,-24(fp)
    bbbc:	10800217 	ldw	r2,8(r2)
    bbc0:	108000cc 	andi	r2,r2,3
    bbc4:	1005003a 	cmpeq	r2,r2,zero
    bbc8:	10001a1e 	bne	r2,zero,bc34 <write+0xe0>
    bbcc:	e0bffa17 	ldw	r2,-24(fp)
    bbd0:	10800017 	ldw	r2,0(r2)
    bbd4:	10800617 	ldw	r2,24(r2)
    bbd8:	1005003a 	cmpeq	r2,r2,zero
    bbdc:	1000151e 	bne	r2,zero,bc34 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bbe0:	e0bffa17 	ldw	r2,-24(fp)
    bbe4:	10800017 	ldw	r2,0(r2)
    bbe8:	10800617 	ldw	r2,24(r2)
    bbec:	e17ffc17 	ldw	r5,-16(fp)
    bbf0:	e1bffd17 	ldw	r6,-12(fp)
    bbf4:	e13ffa17 	ldw	r4,-24(fp)
    bbf8:	103ee83a 	callr	r2
    bbfc:	e0bff915 	stw	r2,-28(fp)
    bc00:	e0bff917 	ldw	r2,-28(fp)
    bc04:	1004403a 	cmpge	r2,r2,zero
    bc08:	1000071e 	bne	r2,zero,bc28 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    bc0c:	000bc780 	call	bc78 <alt_get_errno>
    bc10:	e0fff917 	ldw	r3,-28(fp)
    bc14:	00c7c83a 	sub	r3,zero,r3
    bc18:	10c00015 	stw	r3,0(r2)
        return -1;
    bc1c:	00bfffc4 	movi	r2,-1
    bc20:	e0bffe15 	stw	r2,-8(fp)
    bc24:	00000e06 	br	bc60 <write+0x10c>
      }
      return rval;
    bc28:	e0bff917 	ldw	r2,-28(fp)
    bc2c:	e0bffe15 	stw	r2,-8(fp)
    bc30:	00000b06 	br	bc60 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bc34:	000bc780 	call	bc78 <alt_get_errno>
    bc38:	1007883a 	mov	r3,r2
    bc3c:	00800344 	movi	r2,13
    bc40:	18800015 	stw	r2,0(r3)
    bc44:	00000406 	br	bc58 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bc48:	000bc780 	call	bc78 <alt_get_errno>
    bc4c:	1007883a 	mov	r3,r2
    bc50:	00801444 	movi	r2,81
    bc54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bc58:	00bfffc4 	movi	r2,-1
    bc5c:	e0bffe15 	stw	r2,-8(fp)
    bc60:	e0bffe17 	ldw	r2,-8(fp)
}
    bc64:	e037883a 	mov	sp,fp
    bc68:	dfc00117 	ldw	ra,4(sp)
    bc6c:	df000017 	ldw	fp,0(sp)
    bc70:	dec00204 	addi	sp,sp,8
    bc74:	f800283a 	ret

0000bc78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bc78:	defffd04 	addi	sp,sp,-12
    bc7c:	dfc00215 	stw	ra,8(sp)
    bc80:	df000115 	stw	fp,4(sp)
    bc84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bc88:	00800074 	movhi	r2,1
    bc8c:	10bda504 	addi	r2,r2,-2412
    bc90:	10800017 	ldw	r2,0(r2)
    bc94:	1005003a 	cmpeq	r2,r2,zero
    bc98:	1000061e 	bne	r2,zero,bcb4 <alt_get_errno+0x3c>
    bc9c:	00800074 	movhi	r2,1
    bca0:	10bda504 	addi	r2,r2,-2412
    bca4:	10800017 	ldw	r2,0(r2)
    bca8:	103ee83a 	callr	r2
    bcac:	e0bfff15 	stw	r2,-4(fp)
    bcb0:	00000306 	br	bcc0 <alt_get_errno+0x48>
    bcb4:	00800074 	movhi	r2,1
    bcb8:	10844a04 	addi	r2,r2,4392
    bcbc:	e0bfff15 	stw	r2,-4(fp)
    bcc0:	e0bfff17 	ldw	r2,-4(fp)
}
    bcc4:	e037883a 	mov	sp,fp
    bcc8:	dfc00117 	ldw	ra,4(sp)
    bccc:	df000017 	ldw	fp,0(sp)
    bcd0:	dec00204 	addi	sp,sp,8
    bcd4:	f800283a 	ret

0000bcd8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bcd8:	defffd04 	addi	sp,sp,-12
    bcdc:	dfc00215 	stw	ra,8(sp)
    bce0:	df000115 	stw	fp,4(sp)
    bce4:	df000104 	addi	fp,sp,4
    bce8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    bcec:	000d2600 	call	d260 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bcf0:	00800044 	movi	r2,1
    bcf4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bcf8:	e037883a 	mov	sp,fp
    bcfc:	dfc00117 	ldw	ra,4(sp)
    bd00:	df000017 	ldw	fp,0(sp)
    bd04:	dec00204 	addi	sp,sp,8
    bd08:	f800283a 	ret

0000bd0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bd0c:	defffe04 	addi	sp,sp,-8
    bd10:	dfc00115 	stw	ra,4(sp)
    bd14:	df000015 	stw	fp,0(sp)
    bd18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    bd1c:	01040034 	movhi	r4,4096
    bd20:	21080004 	addi	r4,r4,8192
    bd24:	000b883a 	mov	r5,zero
    bd28:	000d883a 	mov	r6,zero
    bd2c:	01c00204 	movi	r7,8
    bd30:	000c8bc0 	call	c8bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    bd34:	01000074 	movhi	r4,1
    bd38:	21398c04 	addi	r4,r4,-6608
    bd3c:	000b883a 	mov	r5,zero
    bd40:	01800204 	movi	r6,8
    bd44:	000bee80 	call	bee8 <altera_avalon_jtag_uart_init>
    bd48:	01000074 	movhi	r4,1
    bd4c:	21398204 	addi	r4,r4,-6648
    bd50:	000bd680 	call	bd68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    bd54:	e037883a 	mov	sp,fp
    bd58:	dfc00117 	ldw	ra,4(sp)
    bd5c:	df000017 	ldw	fp,0(sp)
    bd60:	dec00204 	addi	sp,sp,8
    bd64:	f800283a 	ret

0000bd68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bd68:	defffd04 	addi	sp,sp,-12
    bd6c:	dfc00215 	stw	ra,8(sp)
    bd70:	df000115 	stw	fp,4(sp)
    bd74:	df000104 	addi	fp,sp,4
    bd78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bd7c:	e13fff17 	ldw	r4,-4(fp)
    bd80:	01400074 	movhi	r5,1
    bd84:	297da204 	addi	r5,r5,-2424
    bd88:	000c9680 	call	c968 <alt_dev_llist_insert>
}
    bd8c:	e037883a 	mov	sp,fp
    bd90:	dfc00117 	ldw	ra,4(sp)
    bd94:	df000017 	ldw	fp,0(sp)
    bd98:	dec00204 	addi	sp,sp,8
    bd9c:	f800283a 	ret

0000bda0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bda0:	defffa04 	addi	sp,sp,-24
    bda4:	dfc00515 	stw	ra,20(sp)
    bda8:	df000415 	stw	fp,16(sp)
    bdac:	df000404 	addi	fp,sp,16
    bdb0:	e13ffd15 	stw	r4,-12(fp)
    bdb4:	e17ffe15 	stw	r5,-8(fp)
    bdb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bdbc:	e0bffd17 	ldw	r2,-12(fp)
    bdc0:	10800017 	ldw	r2,0(r2)
    bdc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bdc8:	e0bffc17 	ldw	r2,-16(fp)
    bdcc:	11000a04 	addi	r4,r2,40
    bdd0:	e0bffd17 	ldw	r2,-12(fp)
    bdd4:	11c00217 	ldw	r7,8(r2)
    bdd8:	e17ffe17 	ldw	r5,-8(fp)
    bddc:	e1bfff17 	ldw	r6,-4(fp)
    bde0:	000c3e80 	call	c3e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bde4:	e037883a 	mov	sp,fp
    bde8:	dfc00117 	ldw	ra,4(sp)
    bdec:	df000017 	ldw	fp,0(sp)
    bdf0:	dec00204 	addi	sp,sp,8
    bdf4:	f800283a 	ret

0000bdf8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bdf8:	defffa04 	addi	sp,sp,-24
    bdfc:	dfc00515 	stw	ra,20(sp)
    be00:	df000415 	stw	fp,16(sp)
    be04:	df000404 	addi	fp,sp,16
    be08:	e13ffd15 	stw	r4,-12(fp)
    be0c:	e17ffe15 	stw	r5,-8(fp)
    be10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be14:	e0bffd17 	ldw	r2,-12(fp)
    be18:	10800017 	ldw	r2,0(r2)
    be1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    be20:	e0bffc17 	ldw	r2,-16(fp)
    be24:	11000a04 	addi	r4,r2,40
    be28:	e0bffd17 	ldw	r2,-12(fp)
    be2c:	11c00217 	ldw	r7,8(r2)
    be30:	e17ffe17 	ldw	r5,-8(fp)
    be34:	e1bfff17 	ldw	r6,-4(fp)
    be38:	000c60c0 	call	c60c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    be3c:	e037883a 	mov	sp,fp
    be40:	dfc00117 	ldw	ra,4(sp)
    be44:	df000017 	ldw	fp,0(sp)
    be48:	dec00204 	addi	sp,sp,8
    be4c:	f800283a 	ret

0000be50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    be50:	defffc04 	addi	sp,sp,-16
    be54:	dfc00315 	stw	ra,12(sp)
    be58:	df000215 	stw	fp,8(sp)
    be5c:	df000204 	addi	fp,sp,8
    be60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be64:	e0bfff17 	ldw	r2,-4(fp)
    be68:	10800017 	ldw	r2,0(r2)
    be6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    be70:	e0bffe17 	ldw	r2,-8(fp)
    be74:	11000a04 	addi	r4,r2,40
    be78:	e0bfff17 	ldw	r2,-4(fp)
    be7c:	11400217 	ldw	r5,8(r2)
    be80:	000c2800 	call	c280 <altera_avalon_jtag_uart_close>
}
    be84:	e037883a 	mov	sp,fp
    be88:	dfc00117 	ldw	ra,4(sp)
    be8c:	df000017 	ldw	fp,0(sp)
    be90:	dec00204 	addi	sp,sp,8
    be94:	f800283a 	ret

0000be98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    be98:	defffa04 	addi	sp,sp,-24
    be9c:	dfc00515 	stw	ra,20(sp)
    bea0:	df000415 	stw	fp,16(sp)
    bea4:	df000404 	addi	fp,sp,16
    bea8:	e13ffd15 	stw	r4,-12(fp)
    beac:	e17ffe15 	stw	r5,-8(fp)
    beb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    beb4:	e0bffd17 	ldw	r2,-12(fp)
    beb8:	10800017 	ldw	r2,0(r2)
    bebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bec0:	e0bffc17 	ldw	r2,-16(fp)
    bec4:	11000a04 	addi	r4,r2,40
    bec8:	e17ffe17 	ldw	r5,-8(fp)
    becc:	e1bfff17 	ldw	r6,-4(fp)
    bed0:	000c2f40 	call	c2f4 <altera_avalon_jtag_uart_ioctl>
}
    bed4:	e037883a 	mov	sp,fp
    bed8:	dfc00117 	ldw	ra,4(sp)
    bedc:	df000017 	ldw	fp,0(sp)
    bee0:	dec00204 	addi	sp,sp,8
    bee4:	f800283a 	ret

0000bee8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bee8:	defffa04 	addi	sp,sp,-24
    beec:	dfc00515 	stw	ra,20(sp)
    bef0:	df000415 	stw	fp,16(sp)
    bef4:	df000404 	addi	fp,sp,16
    bef8:	e13ffd15 	stw	r4,-12(fp)
    befc:	e17ffe15 	stw	r5,-8(fp)
    bf00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bf04:	e0fffd17 	ldw	r3,-12(fp)
    bf08:	00800044 	movi	r2,1
    bf0c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bf10:	e0bffd17 	ldw	r2,-12(fp)
    bf14:	10800017 	ldw	r2,0(r2)
    bf18:	11000104 	addi	r4,r2,4
    bf1c:	e0bffd17 	ldw	r2,-12(fp)
    bf20:	10800817 	ldw	r2,32(r2)
    bf24:	1007883a 	mov	r3,r2
    bf28:	2005883a 	mov	r2,r4
    bf2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    bf30:	e13ffe17 	ldw	r4,-8(fp)
    bf34:	e17fff17 	ldw	r5,-4(fp)
    bf38:	d8000015 	stw	zero,0(sp)
    bf3c:	01800074 	movhi	r6,1
    bf40:	31afea04 	addi	r6,r6,-16472
    bf44:	e1fffd17 	ldw	r7,-12(fp)
    bf48:	000cb600 	call	cb60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bf4c:	e0bffd17 	ldw	r2,-12(fp)
    bf50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bf54:	e0bffd17 	ldw	r2,-12(fp)
    bf58:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bf5c:	00800074 	movhi	r2,1
    bf60:	10845104 	addi	r2,r2,4420
    bf64:	10800017 	ldw	r2,0(r2)
    bf68:	100b883a 	mov	r5,r2
    bf6c:	01800074 	movhi	r6,1
    bf70:	31b07404 	addi	r6,r6,-15920
    bf74:	e1fffd17 	ldw	r7,-12(fp)
    bf78:	000ae700 	call	ae70 <alt_alarm_start>
    bf7c:	1004403a 	cmpge	r2,r2,zero
    bf80:	1000041e 	bne	r2,zero,bf94 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bf84:	e0fffd17 	ldw	r3,-12(fp)
    bf88:	00a00034 	movhi	r2,32768
    bf8c:	10bfffc4 	addi	r2,r2,-1
    bf90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bf94:	e037883a 	mov	sp,fp
    bf98:	dfc00117 	ldw	ra,4(sp)
    bf9c:	df000017 	ldw	fp,0(sp)
    bfa0:	dec00204 	addi	sp,sp,8
    bfa4:	f800283a 	ret

0000bfa8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bfa8:	defff804 	addi	sp,sp,-32
    bfac:	df000715 	stw	fp,28(sp)
    bfb0:	df000704 	addi	fp,sp,28
    bfb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bfb8:	e0bfff17 	ldw	r2,-4(fp)
    bfbc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    bfc0:	e0bffe17 	ldw	r2,-8(fp)
    bfc4:	10800017 	ldw	r2,0(r2)
    bfc8:	e0bffd15 	stw	r2,-12(fp)
    bfcc:	00000006 	br	bfd0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bfd0:	e0bffd17 	ldw	r2,-12(fp)
    bfd4:	10800104 	addi	r2,r2,4
    bfd8:	10800037 	ldwio	r2,0(r2)
    bfdc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bfe0:	e0bffc17 	ldw	r2,-16(fp)
    bfe4:	1080c00c 	andi	r2,r2,768
    bfe8:	1005003a 	cmpeq	r2,r2,zero
    bfec:	1000741e 	bne	r2,zero,c1c0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    bff0:	e0bffc17 	ldw	r2,-16(fp)
    bff4:	1080400c 	andi	r2,r2,256
    bff8:	1005003a 	cmpeq	r2,r2,zero
    bffc:	1000351e 	bne	r2,zero,c0d4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c000:	00800074 	movhi	r2,1
    c004:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c008:	e0bffe17 	ldw	r2,-8(fp)
    c00c:	10800a17 	ldw	r2,40(r2)
    c010:	10800044 	addi	r2,r2,1
    c014:	1081ffcc 	andi	r2,r2,2047
    c018:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c01c:	e0bffe17 	ldw	r2,-8(fp)
    c020:	10c00b17 	ldw	r3,44(r2)
    c024:	e0bffa17 	ldw	r2,-24(fp)
    c028:	18801626 	beq	r3,r2,c084 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c02c:	e0bffd17 	ldw	r2,-12(fp)
    c030:	10800037 	ldwio	r2,0(r2)
    c034:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c038:	e0bffb17 	ldw	r2,-20(fp)
    c03c:	10a0000c 	andi	r2,r2,32768
    c040:	1005003a 	cmpeq	r2,r2,zero
    c044:	10000f1e 	bne	r2,zero,c084 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c048:	e0bffe17 	ldw	r2,-8(fp)
    c04c:	10c00a17 	ldw	r3,40(r2)
    c050:	e0bffb17 	ldw	r2,-20(fp)
    c054:	1009883a 	mov	r4,r2
    c058:	e0bffe17 	ldw	r2,-8(fp)
    c05c:	1885883a 	add	r2,r3,r2
    c060:	10800e04 	addi	r2,r2,56
    c064:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c068:	e0bffe17 	ldw	r2,-8(fp)
    c06c:	10800a17 	ldw	r2,40(r2)
    c070:	10800044 	addi	r2,r2,1
    c074:	10c1ffcc 	andi	r3,r2,2047
    c078:	e0bffe17 	ldw	r2,-8(fp)
    c07c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c080:	003fe106 	br	c008 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c084:	e0bffb17 	ldw	r2,-20(fp)
    c088:	10bfffec 	andhi	r2,r2,65535
    c08c:	1005003a 	cmpeq	r2,r2,zero
    c090:	1000101e 	bne	r2,zero,c0d4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c094:	e0bffe17 	ldw	r2,-8(fp)
    c098:	10c00817 	ldw	r3,32(r2)
    c09c:	00bfff84 	movi	r2,-2
    c0a0:	1886703a 	and	r3,r3,r2
    c0a4:	e0bffe17 	ldw	r2,-8(fp)
    c0a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c0ac:	e0bffd17 	ldw	r2,-12(fp)
    c0b0:	11000104 	addi	r4,r2,4
    c0b4:	e0bffe17 	ldw	r2,-8(fp)
    c0b8:	10800817 	ldw	r2,32(r2)
    c0bc:	1007883a 	mov	r3,r2
    c0c0:	2005883a 	mov	r2,r4
    c0c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c0c8:	e0bffd17 	ldw	r2,-12(fp)
    c0cc:	10800104 	addi	r2,r2,4
    c0d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c0d4:	e0bffc17 	ldw	r2,-16(fp)
    c0d8:	1080800c 	andi	r2,r2,512
    c0dc:	1005003a 	cmpeq	r2,r2,zero
    c0e0:	103fbb1e 	bne	r2,zero,bfd0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c0e4:	e0bffc17 	ldw	r2,-16(fp)
    c0e8:	10bfffec 	andhi	r2,r2,65535
    c0ec:	1004d43a 	srli	r2,r2,16
    c0f0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c0f4:	00001506 	br	c14c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c0f8:	e13ffd17 	ldw	r4,-12(fp)
    c0fc:	e0bffe17 	ldw	r2,-8(fp)
    c100:	10c00d17 	ldw	r3,52(r2)
    c104:	e0bffe17 	ldw	r2,-8(fp)
    c108:	1885883a 	add	r2,r3,r2
    c10c:	10820e04 	addi	r2,r2,2104
    c110:	10800003 	ldbu	r2,0(r2)
    c114:	10c03fcc 	andi	r3,r2,255
    c118:	18c0201c 	xori	r3,r3,128
    c11c:	18ffe004 	addi	r3,r3,-128
    c120:	2005883a 	mov	r2,r4
    c124:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c128:	e0bffe17 	ldw	r2,-8(fp)
    c12c:	10800d17 	ldw	r2,52(r2)
    c130:	10800044 	addi	r2,r2,1
    c134:	10c1ffcc 	andi	r3,r2,2047
    c138:	e0bffe17 	ldw	r2,-8(fp)
    c13c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c140:	e0bff917 	ldw	r2,-28(fp)
    c144:	10bfffc4 	addi	r2,r2,-1
    c148:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c14c:	e0bff917 	ldw	r2,-28(fp)
    c150:	1005003a 	cmpeq	r2,r2,zero
    c154:	1000051e 	bne	r2,zero,c16c <altera_avalon_jtag_uart_irq+0x1c4>
    c158:	e0bffe17 	ldw	r2,-8(fp)
    c15c:	10c00d17 	ldw	r3,52(r2)
    c160:	e0bffe17 	ldw	r2,-8(fp)
    c164:	10800c17 	ldw	r2,48(r2)
    c168:	18bfe31e 	bne	r3,r2,c0f8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c16c:	e0bff917 	ldw	r2,-28(fp)
    c170:	1005003a 	cmpeq	r2,r2,zero
    c174:	103f961e 	bne	r2,zero,bfd0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c178:	e0bffe17 	ldw	r2,-8(fp)
    c17c:	10c00817 	ldw	r3,32(r2)
    c180:	00bfff44 	movi	r2,-3
    c184:	1886703a 	and	r3,r3,r2
    c188:	e0bffe17 	ldw	r2,-8(fp)
    c18c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c190:	e0bffe17 	ldw	r2,-8(fp)
    c194:	10800017 	ldw	r2,0(r2)
    c198:	11000104 	addi	r4,r2,4
    c19c:	e0bffe17 	ldw	r2,-8(fp)
    c1a0:	10800817 	ldw	r2,32(r2)
    c1a4:	1007883a 	mov	r3,r2
    c1a8:	2005883a 	mov	r2,r4
    c1ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c1b0:	e0bffd17 	ldw	r2,-12(fp)
    c1b4:	10800104 	addi	r2,r2,4
    c1b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c1bc:	003f8406 	br	bfd0 <altera_avalon_jtag_uart_irq+0x28>
}
    c1c0:	e037883a 	mov	sp,fp
    c1c4:	df000017 	ldw	fp,0(sp)
    c1c8:	dec00104 	addi	sp,sp,4
    c1cc:	f800283a 	ret

0000c1d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c1d0:	defffc04 	addi	sp,sp,-16
    c1d4:	df000315 	stw	fp,12(sp)
    c1d8:	df000304 	addi	fp,sp,12
    c1dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c1e0:	e0bfff17 	ldw	r2,-4(fp)
    c1e4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	10800017 	ldw	r2,0(r2)
    c1f0:	10800104 	addi	r2,r2,4
    c1f4:	10800037 	ldwio	r2,0(r2)
    c1f8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	1081000c 	andi	r2,r2,1024
    c204:	1005003a 	cmpeq	r2,r2,zero
    c208:	10000c1e 	bne	r2,zero,c23c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	10800017 	ldw	r2,0(r2)
    c214:	11000104 	addi	r4,r2,4
    c218:	e0bffe17 	ldw	r2,-8(fp)
    c21c:	10800817 	ldw	r2,32(r2)
    c220:	10810014 	ori	r2,r2,1024
    c224:	1007883a 	mov	r3,r2
    c228:	2005883a 	mov	r2,r4
    c22c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c230:	e0bffe17 	ldw	r2,-8(fp)
    c234:	10000915 	stw	zero,36(r2)
    c238:	00000a06 	br	c264 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c23c:	e0bffe17 	ldw	r2,-8(fp)
    c240:	10c00917 	ldw	r3,36(r2)
    c244:	00a00034 	movhi	r2,32768
    c248:	10bfff04 	addi	r2,r2,-4
    c24c:	10c00536 	bltu	r2,r3,c264 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c250:	e0bffe17 	ldw	r2,-8(fp)
    c254:	10800917 	ldw	r2,36(r2)
    c258:	10c00044 	addi	r3,r2,1
    c25c:	e0bffe17 	ldw	r2,-8(fp)
    c260:	10c00915 	stw	r3,36(r2)
    c264:	00800074 	movhi	r2,1
    c268:	10845104 	addi	r2,r2,4420
    c26c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c270:	e037883a 	mov	sp,fp
    c274:	df000017 	ldw	fp,0(sp)
    c278:	dec00104 	addi	sp,sp,4
    c27c:	f800283a 	ret

0000c280 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c280:	defffc04 	addi	sp,sp,-16
    c284:	df000315 	stw	fp,12(sp)
    c288:	df000304 	addi	fp,sp,12
    c28c:	e13ffd15 	stw	r4,-12(fp)
    c290:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c294:	00000706 	br	c2b4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c298:	e0bffe17 	ldw	r2,-8(fp)
    c29c:	1090000c 	andi	r2,r2,16384
    c2a0:	1005003a 	cmpeq	r2,r2,zero
    c2a4:	1000031e 	bne	r2,zero,c2b4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c2a8:	00bffd44 	movi	r2,-11
    c2ac:	e0bfff15 	stw	r2,-4(fp)
    c2b0:	00000b06 	br	c2e0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c2b4:	e0bffd17 	ldw	r2,-12(fp)
    c2b8:	10c00d17 	ldw	r3,52(r2)
    c2bc:	e0bffd17 	ldw	r2,-12(fp)
    c2c0:	10800c17 	ldw	r2,48(r2)
    c2c4:	18800526 	beq	r3,r2,c2dc <altera_avalon_jtag_uart_close+0x5c>
    c2c8:	e0bffd17 	ldw	r2,-12(fp)
    c2cc:	10c00917 	ldw	r3,36(r2)
    c2d0:	e0bffd17 	ldw	r2,-12(fp)
    c2d4:	10800117 	ldw	r2,4(r2)
    c2d8:	18bfef36 	bltu	r3,r2,c298 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c2dc:	e03fff15 	stw	zero,-4(fp)
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
}
    c2e4:	e037883a 	mov	sp,fp
    c2e8:	df000017 	ldw	fp,0(sp)
    c2ec:	dec00104 	addi	sp,sp,4
    c2f0:	f800283a 	ret

0000c2f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c2f4:	defff804 	addi	sp,sp,-32
    c2f8:	df000715 	stw	fp,28(sp)
    c2fc:	df000704 	addi	fp,sp,28
    c300:	e13ffb15 	stw	r4,-20(fp)
    c304:	e17ffc15 	stw	r5,-16(fp)
    c308:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c30c:	00bff9c4 	movi	r2,-25
    c310:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c314:	e0bffc17 	ldw	r2,-16(fp)
    c318:	e0bfff15 	stw	r2,-4(fp)
    c31c:	e0ffff17 	ldw	r3,-4(fp)
    c320:	189a8060 	cmpeqi	r2,r3,27137
    c324:	1000041e 	bne	r2,zero,c338 <altera_avalon_jtag_uart_ioctl+0x44>
    c328:	e0ffff17 	ldw	r3,-4(fp)
    c32c:	189a80a0 	cmpeqi	r2,r3,27138
    c330:	10001b1e 	bne	r2,zero,c3a0 <altera_avalon_jtag_uart_ioctl+0xac>
    c334:	00002706 	br	c3d4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c338:	e0bffb17 	ldw	r2,-20(fp)
    c33c:	10c00117 	ldw	r3,4(r2)
    c340:	00a00034 	movhi	r2,32768
    c344:	10bfffc4 	addi	r2,r2,-1
    c348:	18802226 	beq	r3,r2,c3d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c34c:	e0bffd17 	ldw	r2,-12(fp)
    c350:	10800017 	ldw	r2,0(r2)
    c354:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c358:	e0bff917 	ldw	r2,-28(fp)
    c35c:	10800090 	cmplti	r2,r2,2
    c360:	1000071e 	bne	r2,zero,c380 <altera_avalon_jtag_uart_ioctl+0x8c>
    c364:	e0fff917 	ldw	r3,-28(fp)
    c368:	00a00034 	movhi	r2,32768
    c36c:	10bfffc4 	addi	r2,r2,-1
    c370:	18800326 	beq	r3,r2,c380 <altera_avalon_jtag_uart_ioctl+0x8c>
    c374:	e0bff917 	ldw	r2,-28(fp)
    c378:	e0bffe15 	stw	r2,-8(fp)
    c37c:	00000306 	br	c38c <altera_avalon_jtag_uart_ioctl+0x98>
    c380:	00e00034 	movhi	r3,32768
    c384:	18ffff84 	addi	r3,r3,-2
    c388:	e0fffe15 	stw	r3,-8(fp)
    c38c:	e0bffb17 	ldw	r2,-20(fp)
    c390:	e0fffe17 	ldw	r3,-8(fp)
    c394:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c398:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c39c:	00000d06 	br	c3d4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c3a0:	e0bffb17 	ldw	r2,-20(fp)
    c3a4:	10c00117 	ldw	r3,4(r2)
    c3a8:	00a00034 	movhi	r2,32768
    c3ac:	10bfffc4 	addi	r2,r2,-1
    c3b0:	18800826 	beq	r3,r2,c3d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c3b4:	e13ffd17 	ldw	r4,-12(fp)
    c3b8:	e0bffb17 	ldw	r2,-20(fp)
    c3bc:	10c00917 	ldw	r3,36(r2)
    c3c0:	e0bffb17 	ldw	r2,-20(fp)
    c3c4:	10800117 	ldw	r2,4(r2)
    c3c8:	1885803a 	cmpltu	r2,r3,r2
    c3cc:	20800015 	stw	r2,0(r4)
      rc = 0;
    c3d0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c3d4:	e0bffa17 	ldw	r2,-24(fp)
}
    c3d8:	e037883a 	mov	sp,fp
    c3dc:	df000017 	ldw	fp,0(sp)
    c3e0:	dec00104 	addi	sp,sp,4
    c3e4:	f800283a 	ret

0000c3e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c3e8:	defff204 	addi	sp,sp,-56
    c3ec:	dfc00d15 	stw	ra,52(sp)
    c3f0:	df000c15 	stw	fp,48(sp)
    c3f4:	df000c04 	addi	fp,sp,48
    c3f8:	e13ffb15 	stw	r4,-20(fp)
    c3fc:	e17ffc15 	stw	r5,-16(fp)
    c400:	e1bffd15 	stw	r6,-12(fp)
    c404:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c408:	e0bffc17 	ldw	r2,-16(fp)
    c40c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c410:	00004806 	br	c534 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c414:	e0bffb17 	ldw	r2,-20(fp)
    c418:	10800a17 	ldw	r2,40(r2)
    c41c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c420:	e0bffb17 	ldw	r2,-20(fp)
    c424:	10800b17 	ldw	r2,44(r2)
    c428:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c42c:	e0fff717 	ldw	r3,-36(fp)
    c430:	e0bff617 	ldw	r2,-40(fp)
    c434:	18800536 	bltu	r3,r2,c44c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c438:	e0bff717 	ldw	r2,-36(fp)
    c43c:	e0fff617 	ldw	r3,-40(fp)
    c440:	10c5c83a 	sub	r2,r2,r3
    c444:	e0bff815 	stw	r2,-32(fp)
    c448:	00000406 	br	c45c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c44c:	00820004 	movi	r2,2048
    c450:	e0fff617 	ldw	r3,-40(fp)
    c454:	10c5c83a 	sub	r2,r2,r3
    c458:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c45c:	e0bff817 	ldw	r2,-32(fp)
    c460:	1005003a 	cmpeq	r2,r2,zero
    c464:	10001f1e 	bne	r2,zero,c4e4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c468:	e0fffd17 	ldw	r3,-12(fp)
    c46c:	e0bff817 	ldw	r2,-32(fp)
    c470:	1880022e 	bgeu	r3,r2,c47c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c474:	e0bffd17 	ldw	r2,-12(fp)
    c478:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c47c:	e0bffb17 	ldw	r2,-20(fp)
    c480:	10c00e04 	addi	r3,r2,56
    c484:	e0bff617 	ldw	r2,-40(fp)
    c488:	1887883a 	add	r3,r3,r2
    c48c:	e0bffa17 	ldw	r2,-24(fp)
    c490:	1009883a 	mov	r4,r2
    c494:	180b883a 	mov	r5,r3
    c498:	e1bff817 	ldw	r6,-32(fp)
    c49c:	000654c0 	call	654c <memcpy>
      ptr   += n;
    c4a0:	e0fff817 	ldw	r3,-32(fp)
    c4a4:	e0bffa17 	ldw	r2,-24(fp)
    c4a8:	10c5883a 	add	r2,r2,r3
    c4ac:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c4b0:	e0fffd17 	ldw	r3,-12(fp)
    c4b4:	e0bff817 	ldw	r2,-32(fp)
    c4b8:	1885c83a 	sub	r2,r3,r2
    c4bc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4c0:	e0fff617 	ldw	r3,-40(fp)
    c4c4:	e0bff817 	ldw	r2,-32(fp)
    c4c8:	1885883a 	add	r2,r3,r2
    c4cc:	10c1ffcc 	andi	r3,r2,2047
    c4d0:	e0bffb17 	ldw	r2,-20(fp)
    c4d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c4d8:	e0bffd17 	ldw	r2,-12(fp)
    c4dc:	10800048 	cmpgei	r2,r2,1
    c4e0:	103fcc1e 	bne	r2,zero,c414 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c4e4:	e0fffa17 	ldw	r3,-24(fp)
    c4e8:	e0bffc17 	ldw	r2,-16(fp)
    c4ec:	1880141e 	bne	r3,r2,c540 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c4f0:	e0bffe17 	ldw	r2,-8(fp)
    c4f4:	1090000c 	andi	r2,r2,16384
    c4f8:	1004c03a 	cmpne	r2,r2,zero
    c4fc:	1000101e 	bne	r2,zero,c540 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c500:	e0bffb17 	ldw	r2,-20(fp)
    c504:	10c00a17 	ldw	r3,40(r2)
    c508:	e0bff717 	ldw	r2,-36(fp)
    c50c:	1880051e 	bne	r3,r2,c524 <altera_avalon_jtag_uart_read+0x13c>
    c510:	e0bffb17 	ldw	r2,-20(fp)
    c514:	10c00917 	ldw	r3,36(r2)
    c518:	e0bffb17 	ldw	r2,-20(fp)
    c51c:	10800117 	ldw	r2,4(r2)
    c520:	18bff736 	bltu	r3,r2,c500 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c524:	e0bffb17 	ldw	r2,-20(fp)
    c528:	10c00a17 	ldw	r3,40(r2)
    c52c:	e0bff717 	ldw	r2,-36(fp)
    c530:	18800326 	beq	r3,r2,c540 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c534:	e0bffd17 	ldw	r2,-12(fp)
    c538:	10800048 	cmpgei	r2,r2,1
    c53c:	103fb51e 	bne	r2,zero,c414 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c540:	e0fffa17 	ldw	r3,-24(fp)
    c544:	e0bffc17 	ldw	r2,-16(fp)
    c548:	18801926 	beq	r3,r2,c5b0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c54c:	0005303a 	rdctl	r2,status
    c550:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c554:	e0fff517 	ldw	r3,-44(fp)
    c558:	00bfff84 	movi	r2,-2
    c55c:	1884703a 	and	r2,r3,r2
    c560:	1001703a 	wrctl	status,r2
  
  return context;
    c564:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c568:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	10800817 	ldw	r2,32(r2)
    c574:	10c00054 	ori	r3,r2,1
    c578:	e0bffb17 	ldw	r2,-20(fp)
    c57c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c580:	e0bffb17 	ldw	r2,-20(fp)
    c584:	10800017 	ldw	r2,0(r2)
    c588:	11000104 	addi	r4,r2,4
    c58c:	e0bffb17 	ldw	r2,-20(fp)
    c590:	10800817 	ldw	r2,32(r2)
    c594:	1007883a 	mov	r3,r2
    c598:	2005883a 	mov	r2,r4
    c59c:	10c00035 	stwio	r3,0(r2)
    c5a0:	e0bff917 	ldw	r2,-28(fp)
    c5a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5a8:	e0bff417 	ldw	r2,-48(fp)
    c5ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c5b0:	e0fffa17 	ldw	r3,-24(fp)
    c5b4:	e0bffc17 	ldw	r2,-16(fp)
    c5b8:	18800526 	beq	r3,r2,c5d0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c5bc:	e0fffa17 	ldw	r3,-24(fp)
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	1887c83a 	sub	r3,r3,r2
    c5c8:	e0ffff15 	stw	r3,-4(fp)
    c5cc:	00000906 	br	c5f4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c5d0:	e0bffe17 	ldw	r2,-8(fp)
    c5d4:	1090000c 	andi	r2,r2,16384
    c5d8:	1005003a 	cmpeq	r2,r2,zero
    c5dc:	1000031e 	bne	r2,zero,c5ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c5e0:	00bffd44 	movi	r2,-11
    c5e4:	e0bfff15 	stw	r2,-4(fp)
    c5e8:	00000206 	br	c5f4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c5ec:	00bffec4 	movi	r2,-5
    c5f0:	e0bfff15 	stw	r2,-4(fp)
    c5f4:	e0bfff17 	ldw	r2,-4(fp)
}
    c5f8:	e037883a 	mov	sp,fp
    c5fc:	dfc00117 	ldw	ra,4(sp)
    c600:	df000017 	ldw	fp,0(sp)
    c604:	dec00204 	addi	sp,sp,8
    c608:	f800283a 	ret

0000c60c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c60c:	defff204 	addi	sp,sp,-56
    c610:	dfc00d15 	stw	ra,52(sp)
    c614:	df000c15 	stw	fp,48(sp)
    c618:	df000c04 	addi	fp,sp,48
    c61c:	e13ffb15 	stw	r4,-20(fp)
    c620:	e17ffc15 	stw	r5,-16(fp)
    c624:	e1bffd15 	stw	r6,-12(fp)
    c628:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c62c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c630:	e0bffc17 	ldw	r2,-16(fp)
    c634:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c638:	00003a06 	br	c724 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c63c:	e0bffb17 	ldw	r2,-20(fp)
    c640:	10800c17 	ldw	r2,48(r2)
    c644:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c648:	e0bffb17 	ldw	r2,-20(fp)
    c64c:	10800d17 	ldw	r2,52(r2)
    c650:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c654:	e0fffa17 	ldw	r3,-24(fp)
    c658:	e0bff917 	ldw	r2,-28(fp)
    c65c:	1880062e 	bgeu	r3,r2,c678 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c660:	e0fff917 	ldw	r3,-28(fp)
    c664:	e0bffa17 	ldw	r2,-24(fp)
    c668:	1885c83a 	sub	r2,r3,r2
    c66c:	10bfffc4 	addi	r2,r2,-1
    c670:	e0bff815 	stw	r2,-32(fp)
    c674:	00000c06 	br	c6a8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c678:	e0bff917 	ldw	r2,-28(fp)
    c67c:	1005003a 	cmpeq	r2,r2,zero
    c680:	1000051e 	bne	r2,zero,c698 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c684:	00820004 	movi	r2,2048
    c688:	e0fffa17 	ldw	r3,-24(fp)
    c68c:	10c5c83a 	sub	r2,r2,r3
    c690:	e0bff815 	stw	r2,-32(fp)
    c694:	00000406 	br	c6a8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c698:	0081ffc4 	movi	r2,2047
    c69c:	e0fffa17 	ldw	r3,-24(fp)
    c6a0:	10c5c83a 	sub	r2,r2,r3
    c6a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c6a8:	e0bff817 	ldw	r2,-32(fp)
    c6ac:	1005003a 	cmpeq	r2,r2,zero
    c6b0:	10001f1e 	bne	r2,zero,c730 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c6b4:	e0fffd17 	ldw	r3,-12(fp)
    c6b8:	e0bff817 	ldw	r2,-32(fp)
    c6bc:	1880022e 	bgeu	r3,r2,c6c8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c6c0:	e0bffd17 	ldw	r2,-12(fp)
    c6c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c6c8:	e0bffb17 	ldw	r2,-20(fp)
    c6cc:	10c20e04 	addi	r3,r2,2104
    c6d0:	e0bffa17 	ldw	r2,-24(fp)
    c6d4:	1885883a 	add	r2,r3,r2
    c6d8:	e0fffc17 	ldw	r3,-16(fp)
    c6dc:	1009883a 	mov	r4,r2
    c6e0:	180b883a 	mov	r5,r3
    c6e4:	e1bff817 	ldw	r6,-32(fp)
    c6e8:	000654c0 	call	654c <memcpy>
      ptr   += n;
    c6ec:	e0fff817 	ldw	r3,-32(fp)
    c6f0:	e0bffc17 	ldw	r2,-16(fp)
    c6f4:	10c5883a 	add	r2,r2,r3
    c6f8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c6fc:	e0fffd17 	ldw	r3,-12(fp)
    c700:	e0bff817 	ldw	r2,-32(fp)
    c704:	1885c83a 	sub	r2,r3,r2
    c708:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c70c:	e0fffa17 	ldw	r3,-24(fp)
    c710:	e0bff817 	ldw	r2,-32(fp)
    c714:	1885883a 	add	r2,r3,r2
    c718:	10c1ffcc 	andi	r3,r2,2047
    c71c:	e0bffb17 	ldw	r2,-20(fp)
    c720:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c724:	e0bffd17 	ldw	r2,-12(fp)
    c728:	10800048 	cmpgei	r2,r2,1
    c72c:	103fc31e 	bne	r2,zero,c63c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c730:	0005303a 	rdctl	r2,status
    c734:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c738:	e0fff517 	ldw	r3,-44(fp)
    c73c:	00bfff84 	movi	r2,-2
    c740:	1884703a 	and	r2,r3,r2
    c744:	1001703a 	wrctl	status,r2
  
  return context;
    c748:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c74c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c750:	e0bffb17 	ldw	r2,-20(fp)
    c754:	10800817 	ldw	r2,32(r2)
    c758:	10c00094 	ori	r3,r2,2
    c75c:	e0bffb17 	ldw	r2,-20(fp)
    c760:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c764:	e0bffb17 	ldw	r2,-20(fp)
    c768:	10800017 	ldw	r2,0(r2)
    c76c:	11000104 	addi	r4,r2,4
    c770:	e0bffb17 	ldw	r2,-20(fp)
    c774:	10800817 	ldw	r2,32(r2)
    c778:	1007883a 	mov	r3,r2
    c77c:	2005883a 	mov	r2,r4
    c780:	10c00035 	stwio	r3,0(r2)
    c784:	e0bff717 	ldw	r2,-36(fp)
    c788:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c78c:	e0bff417 	ldw	r2,-48(fp)
    c790:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c794:	e0bffd17 	ldw	r2,-12(fp)
    c798:	10800050 	cmplti	r2,r2,1
    c79c:	1000111e 	bne	r2,zero,c7e4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c7a0:	e0bffe17 	ldw	r2,-8(fp)
    c7a4:	1090000c 	andi	r2,r2,16384
    c7a8:	1004c03a 	cmpne	r2,r2,zero
    c7ac:	1000101e 	bne	r2,zero,c7f0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c7b0:	e0bffb17 	ldw	r2,-20(fp)
    c7b4:	10c00d17 	ldw	r3,52(r2)
    c7b8:	e0bff917 	ldw	r2,-28(fp)
    c7bc:	1880051e 	bne	r3,r2,c7d4 <altera_avalon_jtag_uart_write+0x1c8>
    c7c0:	e0bffb17 	ldw	r2,-20(fp)
    c7c4:	10c00917 	ldw	r3,36(r2)
    c7c8:	e0bffb17 	ldw	r2,-20(fp)
    c7cc:	10800117 	ldw	r2,4(r2)
    c7d0:	18bff736 	bltu	r3,r2,c7b0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c7d4:	e0bffb17 	ldw	r2,-20(fp)
    c7d8:	10c00d17 	ldw	r3,52(r2)
    c7dc:	e0bff917 	ldw	r2,-28(fp)
    c7e0:	18800326 	beq	r3,r2,c7f0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c7e4:	e0bffd17 	ldw	r2,-12(fp)
    c7e8:	10800048 	cmpgei	r2,r2,1
    c7ec:	103fcd1e 	bne	r2,zero,c724 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c7f0:	e0fffc17 	ldw	r3,-16(fp)
    c7f4:	e0bff617 	ldw	r2,-40(fp)
    c7f8:	18800526 	beq	r3,r2,c810 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c7fc:	e0fffc17 	ldw	r3,-16(fp)
    c800:	e0bff617 	ldw	r2,-40(fp)
    c804:	1887c83a 	sub	r3,r3,r2
    c808:	e0ffff15 	stw	r3,-4(fp)
    c80c:	00000906 	br	c834 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c810:	e0bffe17 	ldw	r2,-8(fp)
    c814:	1090000c 	andi	r2,r2,16384
    c818:	1005003a 	cmpeq	r2,r2,zero
    c81c:	1000031e 	bne	r2,zero,c82c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c820:	00bffd44 	movi	r2,-11
    c824:	e0bfff15 	stw	r2,-4(fp)
    c828:	00000206 	br	c834 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c82c:	00bffec4 	movi	r2,-5
    c830:	e0bfff15 	stw	r2,-4(fp)
    c834:	e0bfff17 	ldw	r2,-4(fp)
}
    c838:	e037883a 	mov	sp,fp
    c83c:	dfc00117 	ldw	ra,4(sp)
    c840:	df000017 	ldw	fp,0(sp)
    c844:	dec00204 	addi	sp,sp,8
    c848:	f800283a 	ret

0000c84c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c84c:	defffa04 	addi	sp,sp,-24
    c850:	dfc00515 	stw	ra,20(sp)
    c854:	df000415 	stw	fp,16(sp)
    c858:	df000404 	addi	fp,sp,16
    c85c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c860:	e0bfff17 	ldw	r2,-4(fp)
    c864:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c868:	e0bfff17 	ldw	r2,-4(fp)
    c86c:	10800104 	addi	r2,r2,4
    c870:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c874:	0005303a 	rdctl	r2,status
    c878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c87c:	e0fffd17 	ldw	r3,-12(fp)
    c880:	00bfff84 	movi	r2,-2
    c884:	1884703a 	and	r2,r3,r2
    c888:	1001703a 	wrctl	status,r2
  
  return context;
    c88c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c890:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c894:	000ba480 	call	ba48 <alt_tick>
    c898:	e0bffe17 	ldw	r2,-8(fp)
    c89c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8a0:	e0bffc17 	ldw	r2,-16(fp)
    c8a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c8a8:	e037883a 	mov	sp,fp
    c8ac:	dfc00117 	ldw	ra,4(sp)
    c8b0:	df000017 	ldw	fp,0(sp)
    c8b4:	dec00204 	addi	sp,sp,8
    c8b8:	f800283a 	ret

0000c8bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c8bc:	defff804 	addi	sp,sp,-32
    c8c0:	dfc00715 	stw	ra,28(sp)
    c8c4:	df000615 	stw	fp,24(sp)
    c8c8:	df000604 	addi	fp,sp,24
    c8cc:	e13ffc15 	stw	r4,-16(fp)
    c8d0:	e17ffd15 	stw	r5,-12(fp)
    c8d4:	e1bffe15 	stw	r6,-8(fp)
    c8d8:	e1ffff15 	stw	r7,-4(fp)
    c8dc:	e0bfff17 	ldw	r2,-4(fp)
    c8e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c8e4:	00800074 	movhi	r2,1
    c8e8:	10845104 	addi	r2,r2,4420
    c8ec:	10800017 	ldw	r2,0(r2)
    c8f0:	1004c03a 	cmpne	r2,r2,zero
    c8f4:	1000041e 	bne	r2,zero,c908 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c8f8:	00c00074 	movhi	r3,1
    c8fc:	18c45104 	addi	r3,r3,4420
    c900:	e0bffb17 	ldw	r2,-20(fp)
    c904:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c908:	e0bffc17 	ldw	r2,-16(fp)
    c90c:	10800104 	addi	r2,r2,4
    c910:	1007883a 	mov	r3,r2
    c914:	008001c4 	movi	r2,7
    c918:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c91c:	d8000015 	stw	zero,0(sp)
    c920:	e13ffd17 	ldw	r4,-12(fp)
    c924:	e17ffe17 	ldw	r5,-8(fp)
    c928:	01800074 	movhi	r6,1
    c92c:	31b21304 	addi	r6,r6,-14260
    c930:	e1fffc17 	ldw	r7,-16(fp)
    c934:	000cb600 	call	cb60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c938:	e037883a 	mov	sp,fp
    c93c:	dfc00117 	ldw	ra,4(sp)
    c940:	df000017 	ldw	fp,0(sp)
    c944:	dec00204 	addi	sp,sp,8
    c948:	f800283a 	ret

0000c94c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c94c:	deffff04 	addi	sp,sp,-4
    c950:	df000015 	stw	fp,0(sp)
    c954:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c958:	e037883a 	mov	sp,fp
    c95c:	df000017 	ldw	fp,0(sp)
    c960:	dec00104 	addi	sp,sp,4
    c964:	f800283a 	ret

0000c968 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c968:	defff904 	addi	sp,sp,-28
    c96c:	dfc00615 	stw	ra,24(sp)
    c970:	df000515 	stw	fp,20(sp)
    c974:	df000504 	addi	fp,sp,20
    c978:	e13ffd15 	stw	r4,-12(fp)
    c97c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c980:	e0bffd17 	ldw	r2,-12(fp)
    c984:	1005003a 	cmpeq	r2,r2,zero
    c988:	1000041e 	bne	r2,zero,c99c <alt_dev_llist_insert+0x34>
    c98c:	e0bffd17 	ldw	r2,-12(fp)
    c990:	10800217 	ldw	r2,8(r2)
    c994:	1004c03a 	cmpne	r2,r2,zero
    c998:	1000071e 	bne	r2,zero,c9b8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c99c:	000ca1c0 	call	ca1c <alt_get_errno>
    c9a0:	1007883a 	mov	r3,r2
    c9a4:	00800584 	movi	r2,22
    c9a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c9ac:	00bffa84 	movi	r2,-22
    c9b0:	e0bfff15 	stw	r2,-4(fp)
    c9b4:	00001306 	br	ca04 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c9b8:	e0fffd17 	ldw	r3,-12(fp)
    c9bc:	e0bffe17 	ldw	r2,-8(fp)
    c9c0:	e0bffb15 	stw	r2,-20(fp)
    c9c4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c9c8:	e0fffc17 	ldw	r3,-16(fp)
    c9cc:	e0bffb17 	ldw	r2,-20(fp)
    c9d0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c9d4:	e0bffb17 	ldw	r2,-20(fp)
    c9d8:	10c00017 	ldw	r3,0(r2)
    c9dc:	e0bffc17 	ldw	r2,-16(fp)
    c9e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c9e4:	e0bffb17 	ldw	r2,-20(fp)
    c9e8:	10c00017 	ldw	r3,0(r2)
    c9ec:	e0bffc17 	ldw	r2,-16(fp)
    c9f0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c9f4:	e0fffb17 	ldw	r3,-20(fp)
    c9f8:	e0bffc17 	ldw	r2,-16(fp)
    c9fc:	18800015 	stw	r2,0(r3)

  return 0;  
    ca00:	e03fff15 	stw	zero,-4(fp)
    ca04:	e0bfff17 	ldw	r2,-4(fp)
}
    ca08:	e037883a 	mov	sp,fp
    ca0c:	dfc00117 	ldw	ra,4(sp)
    ca10:	df000017 	ldw	fp,0(sp)
    ca14:	dec00204 	addi	sp,sp,8
    ca18:	f800283a 	ret

0000ca1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca1c:	defffd04 	addi	sp,sp,-12
    ca20:	dfc00215 	stw	ra,8(sp)
    ca24:	df000115 	stw	fp,4(sp)
    ca28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ca2c:	00800074 	movhi	r2,1
    ca30:	10bda504 	addi	r2,r2,-2412
    ca34:	10800017 	ldw	r2,0(r2)
    ca38:	1005003a 	cmpeq	r2,r2,zero
    ca3c:	1000061e 	bne	r2,zero,ca58 <alt_get_errno+0x3c>
    ca40:	00800074 	movhi	r2,1
    ca44:	10bda504 	addi	r2,r2,-2412
    ca48:	10800017 	ldw	r2,0(r2)
    ca4c:	103ee83a 	callr	r2
    ca50:	e0bfff15 	stw	r2,-4(fp)
    ca54:	00000306 	br	ca64 <alt_get_errno+0x48>
    ca58:	00800074 	movhi	r2,1
    ca5c:	10844a04 	addi	r2,r2,4392
    ca60:	e0bfff15 	stw	r2,-4(fp)
    ca64:	e0bfff17 	ldw	r2,-4(fp)
}
    ca68:	e037883a 	mov	sp,fp
    ca6c:	dfc00117 	ldw	ra,4(sp)
    ca70:	df000017 	ldw	fp,0(sp)
    ca74:	dec00204 	addi	sp,sp,8
    ca78:	f800283a 	ret

0000ca7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ca7c:	defffd04 	addi	sp,sp,-12
    ca80:	dfc00215 	stw	ra,8(sp)
    ca84:	df000115 	stw	fp,4(sp)
    ca88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ca8c:	00bfff04 	movi	r2,-4
    ca90:	00c00074 	movhi	r3,1
    ca94:	18f5cc04 	addi	r3,r3,-10448
    ca98:	1885883a 	add	r2,r3,r2
    ca9c:	e0bfff15 	stw	r2,-4(fp)
    caa0:	00000606 	br	cabc <_do_ctors+0x40>
        (*ctor) (); 
    caa4:	e0bfff17 	ldw	r2,-4(fp)
    caa8:	10800017 	ldw	r2,0(r2)
    caac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cab0:	e0bfff17 	ldw	r2,-4(fp)
    cab4:	10bfff04 	addi	r2,r2,-4
    cab8:	e0bfff15 	stw	r2,-4(fp)
    cabc:	e0ffff17 	ldw	r3,-4(fp)
    cac0:	00800074 	movhi	r2,1
    cac4:	10b5cb04 	addi	r2,r2,-10452
    cac8:	18bff62e 	bgeu	r3,r2,caa4 <_do_ctors+0x28>
        (*ctor) (); 
}
    cacc:	e037883a 	mov	sp,fp
    cad0:	dfc00117 	ldw	ra,4(sp)
    cad4:	df000017 	ldw	fp,0(sp)
    cad8:	dec00204 	addi	sp,sp,8
    cadc:	f800283a 	ret

0000cae0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cae0:	defffd04 	addi	sp,sp,-12
    cae4:	dfc00215 	stw	ra,8(sp)
    cae8:	df000115 	stw	fp,4(sp)
    caec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    caf0:	00bfff04 	movi	r2,-4
    caf4:	00c00074 	movhi	r3,1
    caf8:	18f5cc04 	addi	r3,r3,-10448
    cafc:	1885883a 	add	r2,r3,r2
    cb00:	e0bfff15 	stw	r2,-4(fp)
    cb04:	00000606 	br	cb20 <_do_dtors+0x40>
        (*dtor) (); 
    cb08:	e0bfff17 	ldw	r2,-4(fp)
    cb0c:	10800017 	ldw	r2,0(r2)
    cb10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cb14:	e0bfff17 	ldw	r2,-4(fp)
    cb18:	10bfff04 	addi	r2,r2,-4
    cb1c:	e0bfff15 	stw	r2,-4(fp)
    cb20:	e0ffff17 	ldw	r3,-4(fp)
    cb24:	00800074 	movhi	r2,1
    cb28:	10b5cc04 	addi	r2,r2,-10448
    cb2c:	18bff62e 	bgeu	r3,r2,cb08 <_do_dtors+0x28>
        (*dtor) (); 
}
    cb30:	e037883a 	mov	sp,fp
    cb34:	dfc00117 	ldw	ra,4(sp)
    cb38:	df000017 	ldw	fp,0(sp)
    cb3c:	dec00204 	addi	sp,sp,8
    cb40:	f800283a 	ret

0000cb44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cb44:	deffff04 	addi	sp,sp,-4
    cb48:	df000015 	stw	fp,0(sp)
    cb4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    cb50:	e037883a 	mov	sp,fp
    cb54:	df000017 	ldw	fp,0(sp)
    cb58:	dec00104 	addi	sp,sp,4
    cb5c:	f800283a 	ret

0000cb60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cb60:	defff904 	addi	sp,sp,-28
    cb64:	dfc00615 	stw	ra,24(sp)
    cb68:	df000515 	stw	fp,20(sp)
    cb6c:	df000504 	addi	fp,sp,20
    cb70:	e13ffc15 	stw	r4,-16(fp)
    cb74:	e17ffd15 	stw	r5,-12(fp)
    cb78:	e1bffe15 	stw	r6,-8(fp)
    cb7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cb80:	e0800217 	ldw	r2,8(fp)
    cb84:	d8800015 	stw	r2,0(sp)
    cb88:	e13ffc17 	ldw	r4,-16(fp)
    cb8c:	e17ffd17 	ldw	r5,-12(fp)
    cb90:	e1bffe17 	ldw	r6,-8(fp)
    cb94:	e1ffff17 	ldw	r7,-4(fp)
    cb98:	000cd340 	call	cd34 <alt_iic_isr_register>
}  
    cb9c:	e037883a 	mov	sp,fp
    cba0:	dfc00117 	ldw	ra,4(sp)
    cba4:	df000017 	ldw	fp,0(sp)
    cba8:	dec00204 	addi	sp,sp,8
    cbac:	f800283a 	ret

0000cbb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    cbb0:	defff904 	addi	sp,sp,-28
    cbb4:	df000615 	stw	fp,24(sp)
    cbb8:	df000604 	addi	fp,sp,24
    cbbc:	e13ffe15 	stw	r4,-8(fp)
    cbc0:	e17fff15 	stw	r5,-4(fp)
    cbc4:	e0bfff17 	ldw	r2,-4(fp)
    cbc8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbcc:	0005303a 	rdctl	r2,status
    cbd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbd4:	e0fffb17 	ldw	r3,-20(fp)
    cbd8:	00bfff84 	movi	r2,-2
    cbdc:	1884703a 	and	r2,r3,r2
    cbe0:	1001703a 	wrctl	status,r2
  
  return context;
    cbe4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cbe8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    cbec:	e0fffc17 	ldw	r3,-16(fp)
    cbf0:	00800044 	movi	r2,1
    cbf4:	10c4983a 	sll	r2,r2,r3
    cbf8:	1007883a 	mov	r3,r2
    cbfc:	00800074 	movhi	r2,1
    cc00:	10845304 	addi	r2,r2,4428
    cc04:	10800017 	ldw	r2,0(r2)
    cc08:	1886b03a 	or	r3,r3,r2
    cc0c:	00800074 	movhi	r2,1
    cc10:	10845304 	addi	r2,r2,4428
    cc14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cc18:	00800074 	movhi	r2,1
    cc1c:	10845304 	addi	r2,r2,4428
    cc20:	10800017 	ldw	r2,0(r2)
    cc24:	100170fa 	wrctl	ienable,r2
    cc28:	e0bffd17 	ldw	r2,-12(fp)
    cc2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc30:	e0bffa17 	ldw	r2,-24(fp)
    cc34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cc38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cc3c:	e037883a 	mov	sp,fp
    cc40:	df000017 	ldw	fp,0(sp)
    cc44:	dec00104 	addi	sp,sp,4
    cc48:	f800283a 	ret

0000cc4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cc4c:	defff904 	addi	sp,sp,-28
    cc50:	df000615 	stw	fp,24(sp)
    cc54:	df000604 	addi	fp,sp,24
    cc58:	e13ffe15 	stw	r4,-8(fp)
    cc5c:	e17fff15 	stw	r5,-4(fp)
    cc60:	e0bfff17 	ldw	r2,-4(fp)
    cc64:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc68:	0005303a 	rdctl	r2,status
    cc6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc70:	e0fffb17 	ldw	r3,-20(fp)
    cc74:	00bfff84 	movi	r2,-2
    cc78:	1884703a 	and	r2,r3,r2
    cc7c:	1001703a 	wrctl	status,r2
  
  return context;
    cc80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cc84:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    cc88:	e0fffc17 	ldw	r3,-16(fp)
    cc8c:	00800044 	movi	r2,1
    cc90:	10c4983a 	sll	r2,r2,r3
    cc94:	0084303a 	nor	r2,zero,r2
    cc98:	1007883a 	mov	r3,r2
    cc9c:	00800074 	movhi	r2,1
    cca0:	10845304 	addi	r2,r2,4428
    cca4:	10800017 	ldw	r2,0(r2)
    cca8:	1886703a 	and	r3,r3,r2
    ccac:	00800074 	movhi	r2,1
    ccb0:	10845304 	addi	r2,r2,4428
    ccb4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ccb8:	00800074 	movhi	r2,1
    ccbc:	10845304 	addi	r2,r2,4428
    ccc0:	10800017 	ldw	r2,0(r2)
    ccc4:	100170fa 	wrctl	ienable,r2
    ccc8:	e0bffd17 	ldw	r2,-12(fp)
    cccc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ccd0:	e0bffa17 	ldw	r2,-24(fp)
    ccd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ccd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    ccdc:	e037883a 	mov	sp,fp
    cce0:	df000017 	ldw	fp,0(sp)
    cce4:	dec00104 	addi	sp,sp,4
    cce8:	f800283a 	ret

0000ccec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ccec:	defffc04 	addi	sp,sp,-16
    ccf0:	df000315 	stw	fp,12(sp)
    ccf4:	df000304 	addi	fp,sp,12
    ccf8:	e13ffe15 	stw	r4,-8(fp)
    ccfc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cd00:	000530fa 	rdctl	r2,ienable
    cd04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cd08:	e0ffff17 	ldw	r3,-4(fp)
    cd0c:	00800044 	movi	r2,1
    cd10:	10c4983a 	sll	r2,r2,r3
    cd14:	1007883a 	mov	r3,r2
    cd18:	e0bffd17 	ldw	r2,-12(fp)
    cd1c:	1884703a 	and	r2,r3,r2
    cd20:	1004c03a 	cmpne	r2,r2,zero
}
    cd24:	e037883a 	mov	sp,fp
    cd28:	df000017 	ldw	fp,0(sp)
    cd2c:	dec00104 	addi	sp,sp,4
    cd30:	f800283a 	ret

0000cd34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cd34:	defff404 	addi	sp,sp,-48
    cd38:	dfc00b15 	stw	ra,44(sp)
    cd3c:	df000a15 	stw	fp,40(sp)
    cd40:	df000a04 	addi	fp,sp,40
    cd44:	e13ffb15 	stw	r4,-20(fp)
    cd48:	e17ffc15 	stw	r5,-16(fp)
    cd4c:	e1bffd15 	stw	r6,-12(fp)
    cd50:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    cd54:	00bffa84 	movi	r2,-22
    cd58:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cd5c:	e0bffc17 	ldw	r2,-16(fp)
    cd60:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cd64:	e0bff917 	ldw	r2,-28(fp)
    cd68:	10800808 	cmpgei	r2,r2,32
    cd6c:	1000291e 	bne	r2,zero,ce14 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd70:	0005303a 	rdctl	r2,status
    cd74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd78:	e0fff717 	ldw	r3,-36(fp)
    cd7c:	00bfff84 	movi	r2,-2
    cd80:	1884703a 	and	r2,r3,r2
    cd84:	1001703a 	wrctl	status,r2
  
  return context;
    cd88:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cd8c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    cd90:	e0bff917 	ldw	r2,-28(fp)
    cd94:	00c00074 	movhi	r3,1
    cd98:	18c46d04 	addi	r3,r3,4532
    cd9c:	100490fa 	slli	r2,r2,3
    cda0:	10c7883a 	add	r3,r2,r3
    cda4:	e0bffd17 	ldw	r2,-12(fp)
    cda8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    cdac:	e0bff917 	ldw	r2,-28(fp)
    cdb0:	00c00074 	movhi	r3,1
    cdb4:	18c46d04 	addi	r3,r3,4532
    cdb8:	100490fa 	slli	r2,r2,3
    cdbc:	10c5883a 	add	r2,r2,r3
    cdc0:	10c00104 	addi	r3,r2,4
    cdc4:	e0bffe17 	ldw	r2,-8(fp)
    cdc8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cdcc:	e0bffd17 	ldw	r2,-12(fp)
    cdd0:	1005003a 	cmpeq	r2,r2,zero
    cdd4:	1000051e 	bne	r2,zero,cdec <alt_iic_isr_register+0xb8>
    cdd8:	e17ff917 	ldw	r5,-28(fp)
    cddc:	e13ffb17 	ldw	r4,-20(fp)
    cde0:	000cbb00 	call	cbb0 <alt_ic_irq_enable>
    cde4:	e0bfff15 	stw	r2,-4(fp)
    cde8:	00000406 	br	cdfc <alt_iic_isr_register+0xc8>
    cdec:	e17ff917 	ldw	r5,-28(fp)
    cdf0:	e13ffb17 	ldw	r4,-20(fp)
    cdf4:	000cc4c0 	call	cc4c <alt_ic_irq_disable>
    cdf8:	e0bfff15 	stw	r2,-4(fp)
    cdfc:	e0bfff17 	ldw	r2,-4(fp)
    ce00:	e0bffa15 	stw	r2,-24(fp)
    ce04:	e0bff817 	ldw	r2,-32(fp)
    ce08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce0c:	e0bff617 	ldw	r2,-40(fp)
    ce10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ce14:	e0bffa17 	ldw	r2,-24(fp)
}
    ce18:	e037883a 	mov	sp,fp
    ce1c:	dfc00117 	ldw	ra,4(sp)
    ce20:	df000017 	ldw	fp,0(sp)
    ce24:	dec00204 	addi	sp,sp,8
    ce28:	f800283a 	ret

0000ce2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ce2c:	defff804 	addi	sp,sp,-32
    ce30:	dfc00715 	stw	ra,28(sp)
    ce34:	df000615 	stw	fp,24(sp)
    ce38:	dc000515 	stw	r16,20(sp)
    ce3c:	df000504 	addi	fp,sp,20
    ce40:	e13ffc15 	stw	r4,-16(fp)
    ce44:	e17ffd15 	stw	r5,-12(fp)
    ce48:	e1bffe15 	stw	r6,-8(fp)
    ce4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ce50:	e13ffd17 	ldw	r4,-12(fp)
    ce54:	e17ffe17 	ldw	r5,-8(fp)
    ce58:	e1bfff17 	ldw	r6,-4(fp)
    ce5c:	000d0740 	call	d074 <open>
    ce60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ce64:	e0bffb17 	ldw	r2,-20(fp)
    ce68:	1004803a 	cmplt	r2,r2,zero
    ce6c:	10001f1e 	bne	r2,zero,ceec <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    ce70:	e13ffb17 	ldw	r4,-20(fp)
    ce74:	04000074 	movhi	r16,1
    ce78:	84392204 	addi	r16,r16,-7032
    ce7c:	01400304 	movi	r5,12
    ce80:	000a7800 	call	a780 <__mulsi3>
    ce84:	1405883a 	add	r2,r2,r16
    ce88:	10c00017 	ldw	r3,0(r2)
    ce8c:	e0bffc17 	ldw	r2,-16(fp)
    ce90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ce94:	e13ffb17 	ldw	r4,-20(fp)
    ce98:	04000074 	movhi	r16,1
    ce9c:	84392204 	addi	r16,r16,-7032
    cea0:	01400304 	movi	r5,12
    cea4:	000a7800 	call	a780 <__mulsi3>
    cea8:	1405883a 	add	r2,r2,r16
    ceac:	10800104 	addi	r2,r2,4
    ceb0:	10c00017 	ldw	r3,0(r2)
    ceb4:	e0bffc17 	ldw	r2,-16(fp)
    ceb8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cebc:	e13ffb17 	ldw	r4,-20(fp)
    cec0:	04000074 	movhi	r16,1
    cec4:	84392204 	addi	r16,r16,-7032
    cec8:	01400304 	movi	r5,12
    cecc:	000a7800 	call	a780 <__mulsi3>
    ced0:	1405883a 	add	r2,r2,r16
    ced4:	10800204 	addi	r2,r2,8
    ced8:	10c00017 	ldw	r3,0(r2)
    cedc:	e0bffc17 	ldw	r2,-16(fp)
    cee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cee4:	e13ffb17 	ldw	r4,-20(fp)
    cee8:	000b87c0 	call	b87c <alt_release_fd>
  }
} 
    ceec:	e037883a 	mov	sp,fp
    cef0:	dfc00217 	ldw	ra,8(sp)
    cef4:	df000117 	ldw	fp,4(sp)
    cef8:	dc000017 	ldw	r16,0(sp)
    cefc:	dec00304 	addi	sp,sp,12
    cf00:	f800283a 	ret

0000cf04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cf04:	defffb04 	addi	sp,sp,-20
    cf08:	dfc00415 	stw	ra,16(sp)
    cf0c:	df000315 	stw	fp,12(sp)
    cf10:	df000304 	addi	fp,sp,12
    cf14:	e13ffd15 	stw	r4,-12(fp)
    cf18:	e17ffe15 	stw	r5,-8(fp)
    cf1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cf20:	01000074 	movhi	r4,1
    cf24:	21392504 	addi	r4,r4,-7020
    cf28:	e17ffd17 	ldw	r5,-12(fp)
    cf2c:	01800044 	movi	r6,1
    cf30:	01c07fc4 	movi	r7,511
    cf34:	000ce2c0 	call	ce2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    cf38:	01000074 	movhi	r4,1
    cf3c:	21392204 	addi	r4,r4,-7032
    cf40:	e17ffe17 	ldw	r5,-8(fp)
    cf44:	000d883a 	mov	r6,zero
    cf48:	01c07fc4 	movi	r7,511
    cf4c:	000ce2c0 	call	ce2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    cf50:	01000074 	movhi	r4,1
    cf54:	21392804 	addi	r4,r4,-7008
    cf58:	e17fff17 	ldw	r5,-4(fp)
    cf5c:	01800044 	movi	r6,1
    cf60:	01c07fc4 	movi	r7,511
    cf64:	000ce2c0 	call	ce2c <alt_open_fd>
}  
    cf68:	e037883a 	mov	sp,fp
    cf6c:	dfc00117 	ldw	ra,4(sp)
    cf70:	df000017 	ldw	fp,0(sp)
    cf74:	dec00204 	addi	sp,sp,8
    cf78:	f800283a 	ret

0000cf7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cf7c:	defffa04 	addi	sp,sp,-24
    cf80:	dfc00515 	stw	ra,20(sp)
    cf84:	df000415 	stw	fp,16(sp)
    cf88:	dc000315 	stw	r16,12(sp)
    cf8c:	df000304 	addi	fp,sp,12
    cf90:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cf94:	e0bffe17 	ldw	r2,-8(fp)
    cf98:	10800217 	ldw	r2,8(r2)
    cf9c:	10d00034 	orhi	r3,r2,16384
    cfa0:	e0bffe17 	ldw	r2,-8(fp)
    cfa4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cfa8:	e03ffd15 	stw	zero,-12(fp)
    cfac:	00002306 	br	d03c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cfb0:	e13ffd17 	ldw	r4,-12(fp)
    cfb4:	04000074 	movhi	r16,1
    cfb8:	84392204 	addi	r16,r16,-7032
    cfbc:	01400304 	movi	r5,12
    cfc0:	000a7800 	call	a780 <__mulsi3>
    cfc4:	1405883a 	add	r2,r2,r16
    cfc8:	10c00017 	ldw	r3,0(r2)
    cfcc:	e0bffe17 	ldw	r2,-8(fp)
    cfd0:	10800017 	ldw	r2,0(r2)
    cfd4:	1880161e 	bne	r3,r2,d030 <alt_file_locked+0xb4>
    cfd8:	e13ffd17 	ldw	r4,-12(fp)
    cfdc:	04000074 	movhi	r16,1
    cfe0:	84392204 	addi	r16,r16,-7032
    cfe4:	01400304 	movi	r5,12
    cfe8:	000a7800 	call	a780 <__mulsi3>
    cfec:	1405883a 	add	r2,r2,r16
    cff0:	10800204 	addi	r2,r2,8
    cff4:	10800017 	ldw	r2,0(r2)
    cff8:	1004403a 	cmpge	r2,r2,zero
    cffc:	10000c1e 	bne	r2,zero,d030 <alt_file_locked+0xb4>
    d000:	e13ffd17 	ldw	r4,-12(fp)
    d004:	01400304 	movi	r5,12
    d008:	000a7800 	call	a780 <__mulsi3>
    d00c:	1007883a 	mov	r3,r2
    d010:	00800074 	movhi	r2,1
    d014:	10b92204 	addi	r2,r2,-7032
    d018:	1887883a 	add	r3,r3,r2
    d01c:	e0bffe17 	ldw	r2,-8(fp)
    d020:	18800326 	beq	r3,r2,d030 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d024:	00bffcc4 	movi	r2,-13
    d028:	e0bfff15 	stw	r2,-4(fp)
    d02c:	00000a06 	br	d058 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d030:	e0bffd17 	ldw	r2,-12(fp)
    d034:	10800044 	addi	r2,r2,1
    d038:	e0bffd15 	stw	r2,-12(fp)
    d03c:	00800074 	movhi	r2,1
    d040:	10bda404 	addi	r2,r2,-2416
    d044:	10800017 	ldw	r2,0(r2)
    d048:	1007883a 	mov	r3,r2
    d04c:	e0bffd17 	ldw	r2,-12(fp)
    d050:	18bfd72e 	bgeu	r3,r2,cfb0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d054:	e03fff15 	stw	zero,-4(fp)
    d058:	e0bfff17 	ldw	r2,-4(fp)
}
    d05c:	e037883a 	mov	sp,fp
    d060:	dfc00217 	ldw	ra,8(sp)
    d064:	df000117 	ldw	fp,4(sp)
    d068:	dc000017 	ldw	r16,0(sp)
    d06c:	dec00304 	addi	sp,sp,12
    d070:	f800283a 	ret

0000d074 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d074:	defff404 	addi	sp,sp,-48
    d078:	dfc00b15 	stw	ra,44(sp)
    d07c:	df000a15 	stw	fp,40(sp)
    d080:	df000a04 	addi	fp,sp,40
    d084:	e13ffb15 	stw	r4,-20(fp)
    d088:	e17ffc15 	stw	r5,-16(fp)
    d08c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d090:	00bfffc4 	movi	r2,-1
    d094:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d098:	00bffb44 	movi	r2,-19
    d09c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d0a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d0a4:	e13ffb17 	ldw	r4,-20(fp)
    d0a8:	01400074 	movhi	r5,1
    d0ac:	297da204 	addi	r5,r5,-2424
    d0b0:	000d2800 	call	d280 <alt_find_dev>
    d0b4:	e0bffa15 	stw	r2,-24(fp)
    d0b8:	e0bffa17 	ldw	r2,-24(fp)
    d0bc:	1004c03a 	cmpne	r2,r2,zero
    d0c0:	1000051e 	bne	r2,zero,d0d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d0c4:	e13ffb17 	ldw	r4,-20(fp)
    d0c8:	000d3140 	call	d314 <alt_find_file>
    d0cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d0d0:	00800044 	movi	r2,1
    d0d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d0d8:	e0bffa17 	ldw	r2,-24(fp)
    d0dc:	1005003a 	cmpeq	r2,r2,zero
    d0e0:	1000311e 	bne	r2,zero,d1a8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d0e4:	e13ffa17 	ldw	r4,-24(fp)
    d0e8:	000d4340 	call	d434 <alt_get_fd>
    d0ec:	e0bff815 	stw	r2,-32(fp)
    d0f0:	e0bff817 	ldw	r2,-32(fp)
    d0f4:	1004403a 	cmpge	r2,r2,zero
    d0f8:	1000031e 	bne	r2,zero,d108 <open+0x94>
    {
      status = index;
    d0fc:	e0bff817 	ldw	r2,-32(fp)
    d100:	e0bff715 	stw	r2,-36(fp)
    d104:	00002a06 	br	d1b0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    d108:	e13ff817 	ldw	r4,-32(fp)
    d10c:	01400304 	movi	r5,12
    d110:	000a7800 	call	a780 <__mulsi3>
    d114:	1007883a 	mov	r3,r2
    d118:	00800074 	movhi	r2,1
    d11c:	10b92204 	addi	r2,r2,-7032
    d120:	1885883a 	add	r2,r3,r2
    d124:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d128:	e0fffc17 	ldw	r3,-16(fp)
    d12c:	00900034 	movhi	r2,16384
    d130:	10bfffc4 	addi	r2,r2,-1
    d134:	1886703a 	and	r3,r3,r2
    d138:	e0bff917 	ldw	r2,-28(fp)
    d13c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d140:	e0bff617 	ldw	r2,-40(fp)
    d144:	1004c03a 	cmpne	r2,r2,zero
    d148:	1000061e 	bne	r2,zero,d164 <open+0xf0>
    d14c:	e13ff917 	ldw	r4,-28(fp)
    d150:	000cf7c0 	call	cf7c <alt_file_locked>
    d154:	e0bff715 	stw	r2,-36(fp)
    d158:	e0bff717 	ldw	r2,-36(fp)
    d15c:	1004803a 	cmplt	r2,r2,zero
    d160:	1000131e 	bne	r2,zero,d1b0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d164:	e0bffa17 	ldw	r2,-24(fp)
    d168:	10800317 	ldw	r2,12(r2)
    d16c:	1005003a 	cmpeq	r2,r2,zero
    d170:	1000091e 	bne	r2,zero,d198 <open+0x124>
    d174:	e0bffa17 	ldw	r2,-24(fp)
    d178:	10800317 	ldw	r2,12(r2)
    d17c:	e13ff917 	ldw	r4,-28(fp)
    d180:	e17ffb17 	ldw	r5,-20(fp)
    d184:	e1bffc17 	ldw	r6,-16(fp)
    d188:	e1fffd17 	ldw	r7,-12(fp)
    d18c:	103ee83a 	callr	r2
    d190:	e0bfff15 	stw	r2,-4(fp)
    d194:	00000106 	br	d19c <open+0x128>
    d198:	e03fff15 	stw	zero,-4(fp)
    d19c:	e0bfff17 	ldw	r2,-4(fp)
    d1a0:	e0bff715 	stw	r2,-36(fp)
    d1a4:	00000206 	br	d1b0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d1a8:	00bffb44 	movi	r2,-19
    d1ac:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d1b0:	e0bff717 	ldw	r2,-36(fp)
    d1b4:	1004403a 	cmpge	r2,r2,zero
    d1b8:	1000091e 	bne	r2,zero,d1e0 <open+0x16c>
  {
    alt_release_fd (index);  
    d1bc:	e13ff817 	ldw	r4,-32(fp)
    d1c0:	000b87c0 	call	b87c <alt_release_fd>
    ALT_ERRNO = -status;
    d1c4:	000d2000 	call	d200 <alt_get_errno>
    d1c8:	e0fff717 	ldw	r3,-36(fp)
    d1cc:	00c7c83a 	sub	r3,zero,r3
    d1d0:	10c00015 	stw	r3,0(r2)
    return -1;
    d1d4:	00bfffc4 	movi	r2,-1
    d1d8:	e0bffe15 	stw	r2,-8(fp)
    d1dc:	00000206 	br	d1e8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    d1e0:	e0bff817 	ldw	r2,-32(fp)
    d1e4:	e0bffe15 	stw	r2,-8(fp)
    d1e8:	e0bffe17 	ldw	r2,-8(fp)
}
    d1ec:	e037883a 	mov	sp,fp
    d1f0:	dfc00117 	ldw	ra,4(sp)
    d1f4:	df000017 	ldw	fp,0(sp)
    d1f8:	dec00204 	addi	sp,sp,8
    d1fc:	f800283a 	ret

0000d200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d200:	defffd04 	addi	sp,sp,-12
    d204:	dfc00215 	stw	ra,8(sp)
    d208:	df000115 	stw	fp,4(sp)
    d20c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d210:	00800074 	movhi	r2,1
    d214:	10bda504 	addi	r2,r2,-2412
    d218:	10800017 	ldw	r2,0(r2)
    d21c:	1005003a 	cmpeq	r2,r2,zero
    d220:	1000061e 	bne	r2,zero,d23c <alt_get_errno+0x3c>
    d224:	00800074 	movhi	r2,1
    d228:	10bda504 	addi	r2,r2,-2412
    d22c:	10800017 	ldw	r2,0(r2)
    d230:	103ee83a 	callr	r2
    d234:	e0bfff15 	stw	r2,-4(fp)
    d238:	00000306 	br	d248 <alt_get_errno+0x48>
    d23c:	00800074 	movhi	r2,1
    d240:	10844a04 	addi	r2,r2,4392
    d244:	e0bfff15 	stw	r2,-4(fp)
    d248:	e0bfff17 	ldw	r2,-4(fp)
}
    d24c:	e037883a 	mov	sp,fp
    d250:	dfc00117 	ldw	ra,4(sp)
    d254:	df000017 	ldw	fp,0(sp)
    d258:	dec00204 	addi	sp,sp,8
    d25c:	f800283a 	ret

0000d260 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    d260:	deffff04 	addi	sp,sp,-4
    d264:	df000015 	stw	fp,0(sp)
    d268:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d26c:	000170fa 	wrctl	ienable,zero
}
    d270:	e037883a 	mov	sp,fp
    d274:	df000017 	ldw	fp,0(sp)
    d278:	dec00104 	addi	sp,sp,4
    d27c:	f800283a 	ret

0000d280 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d280:	defff904 	addi	sp,sp,-28
    d284:	dfc00615 	stw	ra,24(sp)
    d288:	df000515 	stw	fp,20(sp)
    d28c:	df000504 	addi	fp,sp,20
    d290:	e13ffd15 	stw	r4,-12(fp)
    d294:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d298:	e0bffe17 	ldw	r2,-8(fp)
    d29c:	10800017 	ldw	r2,0(r2)
    d2a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d2a4:	e13ffd17 	ldw	r4,-12(fp)
    d2a8:	00017f40 	call	17f4 <strlen>
    d2ac:	10800044 	addi	r2,r2,1
    d2b0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d2b4:	00000d06 	br	d2ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d2b8:	e0bffc17 	ldw	r2,-16(fp)
    d2bc:	11000217 	ldw	r4,8(r2)
    d2c0:	e1bffb17 	ldw	r6,-20(fp)
    d2c4:	e17ffd17 	ldw	r5,-12(fp)
    d2c8:	000d5180 	call	d518 <memcmp>
    d2cc:	1004c03a 	cmpne	r2,r2,zero
    d2d0:	1000031e 	bne	r2,zero,d2e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d2d4:	e0bffc17 	ldw	r2,-16(fp)
    d2d8:	e0bfff15 	stw	r2,-4(fp)
    d2dc:	00000706 	br	d2fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d2e0:	e0bffc17 	ldw	r2,-16(fp)
    d2e4:	10800017 	ldw	r2,0(r2)
    d2e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d2ec:	e0fffe17 	ldw	r3,-8(fp)
    d2f0:	e0bffc17 	ldw	r2,-16(fp)
    d2f4:	10fff01e 	bne	r2,r3,d2b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d2f8:	e03fff15 	stw	zero,-4(fp)
    d2fc:	e0bfff17 	ldw	r2,-4(fp)
}
    d300:	e037883a 	mov	sp,fp
    d304:	dfc00117 	ldw	ra,4(sp)
    d308:	df000017 	ldw	fp,0(sp)
    d30c:	dec00204 	addi	sp,sp,8
    d310:	f800283a 	ret

0000d314 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d314:	defffa04 	addi	sp,sp,-24
    d318:	dfc00515 	stw	ra,20(sp)
    d31c:	df000415 	stw	fp,16(sp)
    d320:	df000404 	addi	fp,sp,16
    d324:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d328:	00800074 	movhi	r2,1
    d32c:	10bda004 	addi	r2,r2,-2432
    d330:	10800017 	ldw	r2,0(r2)
    d334:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d338:	00003306 	br	d408 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    d33c:	e0bffd17 	ldw	r2,-12(fp)
    d340:	11000217 	ldw	r4,8(r2)
    d344:	00017f40 	call	17f4 <strlen>
    d348:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    d34c:	e0bffd17 	ldw	r2,-12(fp)
    d350:	10c00217 	ldw	r3,8(r2)
    d354:	e0bffc17 	ldw	r2,-16(fp)
    d358:	1885883a 	add	r2,r3,r2
    d35c:	10bfffc4 	addi	r2,r2,-1
    d360:	10800003 	ldbu	r2,0(r2)
    d364:	10803fcc 	andi	r2,r2,255
    d368:	1080201c 	xori	r2,r2,128
    d36c:	10bfe004 	addi	r2,r2,-128
    d370:	10800bd8 	cmpnei	r2,r2,47
    d374:	1000031e 	bne	r2,zero,d384 <alt_find_file+0x70>
    {
      len -= 1;
    d378:	e0bffc17 	ldw	r2,-16(fp)
    d37c:	10bfffc4 	addi	r2,r2,-1
    d380:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d384:	e0bffc17 	ldw	r2,-16(fp)
    d388:	1007883a 	mov	r3,r2
    d38c:	e0bffe17 	ldw	r2,-8(fp)
    d390:	1885883a 	add	r2,r3,r2
    d394:	10800003 	ldbu	r2,0(r2)
    d398:	10803fcc 	andi	r2,r2,255
    d39c:	1080201c 	xori	r2,r2,128
    d3a0:	10bfe004 	addi	r2,r2,-128
    d3a4:	10800be0 	cmpeqi	r2,r2,47
    d3a8:	10000a1e 	bne	r2,zero,d3d4 <alt_find_file+0xc0>
    d3ac:	e0bffc17 	ldw	r2,-16(fp)
    d3b0:	1007883a 	mov	r3,r2
    d3b4:	e0bffe17 	ldw	r2,-8(fp)
    d3b8:	1885883a 	add	r2,r3,r2
    d3bc:	10800003 	ldbu	r2,0(r2)
    d3c0:	10803fcc 	andi	r2,r2,255
    d3c4:	1080201c 	xori	r2,r2,128
    d3c8:	10bfe004 	addi	r2,r2,-128
    d3cc:	1004c03a 	cmpne	r2,r2,zero
    d3d0:	10000a1e 	bne	r2,zero,d3fc <alt_find_file+0xe8>
    d3d4:	e0bffd17 	ldw	r2,-12(fp)
    d3d8:	11000217 	ldw	r4,8(r2)
    d3dc:	e1bffc17 	ldw	r6,-16(fp)
    d3e0:	e17ffe17 	ldw	r5,-8(fp)
    d3e4:	000d5180 	call	d518 <memcmp>
    d3e8:	1004c03a 	cmpne	r2,r2,zero
    d3ec:	1000031e 	bne	r2,zero,d3fc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d3f0:	e0bffd17 	ldw	r2,-12(fp)
    d3f4:	e0bfff15 	stw	r2,-4(fp)
    d3f8:	00000806 	br	d41c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d3fc:	e0bffd17 	ldw	r2,-12(fp)
    d400:	10800017 	ldw	r2,0(r2)
    d404:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d408:	00c00074 	movhi	r3,1
    d40c:	18fda004 	addi	r3,r3,-2432
    d410:	e0bffd17 	ldw	r2,-12(fp)
    d414:	10ffc91e 	bne	r2,r3,d33c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d418:	e03fff15 	stw	zero,-4(fp)
    d41c:	e0bfff17 	ldw	r2,-4(fp)
}
    d420:	e037883a 	mov	sp,fp
    d424:	dfc00117 	ldw	ra,4(sp)
    d428:	df000017 	ldw	fp,0(sp)
    d42c:	dec00204 	addi	sp,sp,8
    d430:	f800283a 	ret

0000d434 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d434:	defffa04 	addi	sp,sp,-24
    d438:	dfc00515 	stw	ra,20(sp)
    d43c:	df000415 	stw	fp,16(sp)
    d440:	dc000315 	stw	r16,12(sp)
    d444:	df000304 	addi	fp,sp,12
    d448:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d44c:	00bffa04 	movi	r2,-24
    d450:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d454:	e03ffe15 	stw	zero,-8(fp)
    d458:	00002006 	br	d4dc <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    d45c:	e13ffe17 	ldw	r4,-8(fp)
    d460:	04000074 	movhi	r16,1
    d464:	84392204 	addi	r16,r16,-7032
    d468:	01400304 	movi	r5,12
    d46c:	000a7800 	call	a780 <__mulsi3>
    d470:	1405883a 	add	r2,r2,r16
    d474:	10800017 	ldw	r2,0(r2)
    d478:	1004c03a 	cmpne	r2,r2,zero
    d47c:	1000141e 	bne	r2,zero,d4d0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    d480:	e13ffe17 	ldw	r4,-8(fp)
    d484:	04000074 	movhi	r16,1
    d488:	84392204 	addi	r16,r16,-7032
    d48c:	01400304 	movi	r5,12
    d490:	000a7800 	call	a780 <__mulsi3>
    d494:	1407883a 	add	r3,r2,r16
    d498:	e0bfff17 	ldw	r2,-4(fp)
    d49c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d4a0:	00800074 	movhi	r2,1
    d4a4:	10bda404 	addi	r2,r2,-2416
    d4a8:	10c00017 	ldw	r3,0(r2)
    d4ac:	e0bffe17 	ldw	r2,-8(fp)
    d4b0:	1880040e 	bge	r3,r2,d4c4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    d4b4:	00c00074 	movhi	r3,1
    d4b8:	18fda404 	addi	r3,r3,-2416
    d4bc:	e0bffe17 	ldw	r2,-8(fp)
    d4c0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d4c4:	e0bffe17 	ldw	r2,-8(fp)
    d4c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d4cc:	00000606 	br	d4e8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d4d0:	e0bffe17 	ldw	r2,-8(fp)
    d4d4:	10800044 	addi	r2,r2,1
    d4d8:	e0bffe15 	stw	r2,-8(fp)
    d4dc:	e0bffe17 	ldw	r2,-8(fp)
    d4e0:	10800810 	cmplti	r2,r2,32
    d4e4:	103fdd1e 	bne	r2,zero,d45c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d4e8:	e0bffd17 	ldw	r2,-12(fp)
}
    d4ec:	e037883a 	mov	sp,fp
    d4f0:	dfc00217 	ldw	ra,8(sp)
    d4f4:	df000117 	ldw	fp,4(sp)
    d4f8:	dc000017 	ldw	r16,0(sp)
    d4fc:	dec00304 	addi	sp,sp,12
    d500:	f800283a 	ret

0000d504 <atexit>:
    d504:	200b883a 	mov	r5,r4
    d508:	000d883a 	mov	r6,zero
    d50c:	0009883a 	mov	r4,zero
    d510:	000f883a 	mov	r7,zero
    d514:	000d58c1 	jmpi	d58c <__register_exitproc>

0000d518 <memcmp>:
    d518:	00c000c4 	movi	r3,3
    d51c:	1980032e 	bgeu	r3,r6,d52c <memcmp+0x14>
    d520:	2144b03a 	or	r2,r4,r5
    d524:	10c4703a 	and	r2,r2,r3
    d528:	10000f26 	beq	r2,zero,d568 <memcmp+0x50>
    d52c:	31ffffc4 	addi	r7,r6,-1
    d530:	3000061e 	bne	r6,zero,d54c <memcmp+0x34>
    d534:	00000a06 	br	d560 <memcmp+0x48>
    d538:	39ffffc4 	addi	r7,r7,-1
    d53c:	00bfffc4 	movi	r2,-1
    d540:	21000044 	addi	r4,r4,1
    d544:	29400044 	addi	r5,r5,1
    d548:	38800526 	beq	r7,r2,d560 <memcmp+0x48>
    d54c:	20c00003 	ldbu	r3,0(r4)
    d550:	28800003 	ldbu	r2,0(r5)
    d554:	18bff826 	beq	r3,r2,d538 <memcmp+0x20>
    d558:	1885c83a 	sub	r2,r3,r2
    d55c:	f800283a 	ret
    d560:	0005883a 	mov	r2,zero
    d564:	f800283a 	ret
    d568:	180f883a 	mov	r7,r3
    d56c:	20c00017 	ldw	r3,0(r4)
    d570:	28800017 	ldw	r2,0(r5)
    d574:	18bfed1e 	bne	r3,r2,d52c <memcmp+0x14>
    d578:	31bfff04 	addi	r6,r6,-4
    d57c:	21000104 	addi	r4,r4,4
    d580:	29400104 	addi	r5,r5,4
    d584:	39bff936 	bltu	r7,r6,d56c <memcmp+0x54>
    d588:	003fe806 	br	d52c <memcmp+0x14>

0000d58c <__register_exitproc>:
    d58c:	defffa04 	addi	sp,sp,-24
    d590:	00800074 	movhi	r2,1
    d594:	10bd9b04 	addi	r2,r2,-2452
    d598:	dc000015 	stw	r16,0(sp)
    d59c:	14000017 	ldw	r16,0(r2)
    d5a0:	dd000415 	stw	r20,16(sp)
    d5a4:	2829883a 	mov	r20,r5
    d5a8:	81405217 	ldw	r5,328(r16)
    d5ac:	dcc00315 	stw	r19,12(sp)
    d5b0:	dc800215 	stw	r18,8(sp)
    d5b4:	dc400115 	stw	r17,4(sp)
    d5b8:	dfc00515 	stw	ra,20(sp)
    d5bc:	2023883a 	mov	r17,r4
    d5c0:	3027883a 	mov	r19,r6
    d5c4:	3825883a 	mov	r18,r7
    d5c8:	28002526 	beq	r5,zero,d660 <__register_exitproc+0xd4>
    d5cc:	29000117 	ldw	r4,4(r5)
    d5d0:	008007c4 	movi	r2,31
    d5d4:	11002716 	blt	r2,r4,d674 <__register_exitproc+0xe8>
    d5d8:	8800101e 	bne	r17,zero,d61c <__register_exitproc+0x90>
    d5dc:	2105883a 	add	r2,r4,r4
    d5e0:	1085883a 	add	r2,r2,r2
    d5e4:	20c00044 	addi	r3,r4,1
    d5e8:	1145883a 	add	r2,r2,r5
    d5ec:	0009883a 	mov	r4,zero
    d5f0:	15000215 	stw	r20,8(r2)
    d5f4:	28c00115 	stw	r3,4(r5)
    d5f8:	2005883a 	mov	r2,r4
    d5fc:	dfc00517 	ldw	ra,20(sp)
    d600:	dd000417 	ldw	r20,16(sp)
    d604:	dcc00317 	ldw	r19,12(sp)
    d608:	dc800217 	ldw	r18,8(sp)
    d60c:	dc400117 	ldw	r17,4(sp)
    d610:	dc000017 	ldw	r16,0(sp)
    d614:	dec00604 	addi	sp,sp,24
    d618:	f800283a 	ret
    d61c:	29802204 	addi	r6,r5,136
    d620:	00800044 	movi	r2,1
    d624:	110e983a 	sll	r7,r2,r4
    d628:	30c04017 	ldw	r3,256(r6)
    d62c:	2105883a 	add	r2,r4,r4
    d630:	1085883a 	add	r2,r2,r2
    d634:	1185883a 	add	r2,r2,r6
    d638:	19c6b03a 	or	r3,r3,r7
    d63c:	14802015 	stw	r18,128(r2)
    d640:	14c00015 	stw	r19,0(r2)
    d644:	00800084 	movi	r2,2
    d648:	30c04015 	stw	r3,256(r6)
    d64c:	88bfe31e 	bne	r17,r2,d5dc <__register_exitproc+0x50>
    d650:	30804117 	ldw	r2,260(r6)
    d654:	11c4b03a 	or	r2,r2,r7
    d658:	30804115 	stw	r2,260(r6)
    d65c:	003fdf06 	br	d5dc <__register_exitproc+0x50>
    d660:	00800074 	movhi	r2,1
    d664:	1084ad04 	addi	r2,r2,4788
    d668:	100b883a 	mov	r5,r2
    d66c:	80805215 	stw	r2,328(r16)
    d670:	003fd606 	br	d5cc <__register_exitproc+0x40>
    d674:	00800034 	movhi	r2,0
    d678:	1083b804 	addi	r2,r2,3808
    d67c:	1000021e 	bne	r2,zero,d688 <__register_exitproc+0xfc>
    d680:	013fffc4 	movi	r4,-1
    d684:	003fdc06 	br	d5f8 <__register_exitproc+0x6c>
    d688:	01006404 	movi	r4,400
    d68c:	103ee83a 	callr	r2
    d690:	1007883a 	mov	r3,r2
    d694:	103ffa26 	beq	r2,zero,d680 <__register_exitproc+0xf4>
    d698:	80805217 	ldw	r2,328(r16)
    d69c:	180b883a 	mov	r5,r3
    d6a0:	18000115 	stw	zero,4(r3)
    d6a4:	18800015 	stw	r2,0(r3)
    d6a8:	80c05215 	stw	r3,328(r16)
    d6ac:	18006215 	stw	zero,392(r3)
    d6b0:	18006315 	stw	zero,396(r3)
    d6b4:	0009883a 	mov	r4,zero
    d6b8:	883fc826 	beq	r17,zero,d5dc <__register_exitproc+0x50>
    d6bc:	003fd706 	br	d61c <__register_exitproc+0x90>
    d6c0:	00000010 	cmplti	zero,zero,0
    d6c4:	00000000 	call	0 <__alt_mem_SDRAM>
    d6c8:	00527a01 	jmpi	527a0 <_gp+0x3b138>
    d6cc:	011f7c01 	jmpi	11f7c0 <_gp+0x108158>
    d6d0:	001b0c0b 	ldhu	zero,27696(zero)
    d6d4:	00000028 	cmpgeui	zero,zero,0
    d6d8:	00000018 	cmpnei	zero,zero,0
    d6dc:	0000883c 	xorhi	zero,zero,544
    d6e0:	0000066c 	andhi	zero,zero,25
    d6e4:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    d6e8:	910a9074 	orhi	r4,r18,10817
    d6ec:	94089209 	0x94089209
    d6f0:	97049606 	br	e94c <JTAG_UART+0x344>
    d6f4:	93019f03 	ldbu	r12,1660(r18)
    d6f8:	9c059507 	ldb	r16,5716(r19)
    d6fc:	00000002 	0x2
    d700:	00000028 	cmpgeui	zero,zero,0
    d704:	00000044 	movi	zero,1
    d708:	00008ea8 	cmpgeui	zero,zero,570
    d70c:	00000660 	cmpeqi	zero,zero,25
    d710:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    d714:	92099170 	cmpltui	r8,r18,9797
    d718:	96069408 	cmpgei	et,r18,6736
    d71c:	9c039704 	addi	r16,r19,3676
    d720:	90019f02 	0x90019f02
    d724:	9507930a 	0x9507930a
    d728:	00000005 	stb	zero,0(zero)
    d72c:	000038e4 	muli	zero,zero,227
